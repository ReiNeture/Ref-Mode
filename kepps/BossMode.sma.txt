#include <amxmodx>
#include <amxmisc>
#include <engine>
#include <nvault>
#include <cstrike>
#include <fakemeta>
#include <hamsandwich>
#include <dhudmessage>
#include <cs_player_models_api>
#include <xs>
#include <fun>
native amx_make_space(Float:freezeover_time, Float:bomb_time, Mode)
native get_user_eye(id)
native get_user_strong(id)
native give_the_strong(id)
native get_user_skullaxe(id)
native give_the_skullaxe(id)
native get_user_ak4760r(id)
native give_the_ak4760r(id)
native give_the_m95(id)
native give_the_skull5(id)
native give_the_aw50(id)
native give_the_trg42(id)
native give_the_dmp7a1(id)
native get_user_m4a160r(id)
native give_the_m4a160r(id)
native get_user_m4a1adminonly(id)
native give_the_m4a1adminonly(id)
native get_user_m24(id)
native give_the_m24(id)
native get_user_f2000(id)
native give_the_f2000(id)
native get_user_wa2000(id)
native give_the_wa2000(id)
native get_user_thompson(id)
native give_the_thompson(id)
native get_user_ssvd(id)
native give_the_ssvd(id)
native get_user_k1ases(id)
native give_the_k1ases(id)
native get_user_mg3(id)
native give_the_mg3(id)
native get_the_damage_up()
native get_cant_spawn(id)
native set_cant_spawn(id, set)
native give_the_damage_up(id)
native get_user_curse(id)
native give_the_curse(id)
native give_the_shockwave(id)
native give_the_m79(id)
native give_the_portalgun(id)
native give_the_respawn(id)
native give_the_giaf(id)
native give_the_plasma(id)
native give_the_gravitygun(id)
native in_low_zone(id)
native in_high_zone(id)
native get_user_plasma(id)
native get_user_hit(id)
native get_user_axe(id)
native Float:get_user_hittime(id)
native get_user_pw(id)
native get_user_pw2(id)
native get_user_login(id)
native set_user_pw(id)
native set_user_pw2(id)
native set_user_login(id)
native task_reg_menu(id)
native get_my_team(id)
native get_using_skill(id, get)
native get_skill_level(team, get)

enum _:MAX_TYPES
{
	TYPE_NONE,
	TYPE_RELATION,
	TYPE_PLAYER,
}
enum
{
	LOOK_FRIEND = 1,
	LOOK_ENEMY,
	LOOK_HOSTAGE,
}
enum _:MAX_REPLACES
{
	RE_CLASS,
	RE_LV,
	RE_STAT,
	RE_NAME,
}
enum _:MAX_UP
{
	UP_TIME_1,
	UP_TIME_2,
	UP_TIME_3,
	UP_TIME_4,
	UP_TIME_5,
	UP_DAY_1,
	UP_DAY_3,
	UP_DAY_7,
	UP_DAY_14,
	UP_FIRST_KILL_BOSS,
	UP_FIRST_BE_BOSS,
	UP_FIRST_KILL_HUMAN,
	UP_HIT_777,
	UP_1_ALIVE,
	UP_2_ALIVE,
	UP_1HP_ALIVE,
	UP_ALL_CLEAR_BOSS,
	UP_KNIFE_KILL_BOSS,
	UP_ROUND_15S_KILL,
	UP_LAST_1AMMO_KILL,
	UP_USE_1AMMO_KILL,
	UP_KILL_5_BOSS,
	UP_KILL_10_BOSS,
	UP_KILL_20_BOSS,
	UP_BE_BUG_BOSS_KILL,
	UP_HS_KILL_BOSS,
	UP_HS_10KILL_BOSS,
	UP_HS_KNIFE_KILL_BOSS,
	UP_NO_DAMAGE_ALIVE,
	UP_NO_ATTACK_ALIVE,
	UP_HP_ON_125_ALIVE,
	UP_HP_ON_175_ALIVE,
	UP_HP_UNDER_15_ALIVE,
	UP_HE_KILL_BOSS,
	UP_FIRST_HIT_BOSS,
	UP_AM_4_44_KILL,
	UP_PM_4_44_KILL,
	UP_DAMAGE_88888,
	UP_DAMAGE_350000,
	UP_DAMAGE_700000,
	UP_DEATH_HIGHEST,
	UP_KILL_HIGHEST,
	UP_MONEY_77,
	UP_MONEY_777,
	UP_MONEY_7777,
	UP_MONEY_77777,
	UP_MONEY_777777,
	UP_LUCKY_GOD2,
	UP_LUCKY_GOD3,
	UP_DAMAGE_444,
	UP_HURT_5_ALIVE,
	UP_HE_HIT_BOSS,
	UP_ALIVE_2ROUND,
	UP_ALIVE_5ROUND,
	UP_ALIVE_7ROUND,
	UP_ALIVE_10ROUND,
	UP_1ROUND_KILL_TWO_BOSS,
	UP_FIRST_RESPAWN,
	UP_KILL_SP_BOSS,
	UP_5KILL_SP_BOSS,
	UP_BE_SP_BOSS,
	UP_TAKE_GRENADE,
	UP_KILL_YOURSELF,
	UP_1ROUND_CLEAN_5UP,
	UP_AT_AIR_10S,
	UP_ALL_CT_NO_DAMAGE,
	UP_ALL_CT_NO_KILL,
	UP_ATTACK_TEAMMATE_ATTACK1,
	UP_ATTACK_TEAMMATE_ATTACK2,
	UP_ON_BOSS_10S,
	UP_LIE_BIRTHDAY,
	UP_PING_TO_1000,
	UP_LOST_EYE_1M_ALIVE,
	UP_SP_BOSS_BEDIE_ATTACK,
	UP_SP_BOSS_BEDIE_5ATTACK,
	UP_SP_BOSS_BEDIE_10KILL,
	UP_SP_BOSS_BEDIE_20KILL,
	UP_SP_BOSS_BEDIE_30KILL,
	UP_BUG_BOSS_KILL,
	UP_BUG_BOSS_5KILL,
	UP_FULL_STAT_KILL,
	UP_ATTACK_CRIT_20,
	UP_ATTACK_CRIT_40,
	UP_NODAMAGE_DEAD,
	UP_USE_1000_MONEY,
	UP_USE_5000_MONEY,
	UP_USE_10000_MONEY,
	UP_BE_BOSS_DAMAGE_BY_HE_20,
	UP_LAST_GUN_5KILL_BOSS,
	UP_LAST_GUN_10KILL_BOSS,
	UP_LAST_GUN_30KILL_BOSS,
	UP_DAMAGE_BY_KNIFE_200000,
	UP_DAMAGE_BY_KNIFE_500000,
	UP_BOSS_ATTACK_BACK,
	UP_DAMAGE_BOSS_BACK_50,
	UP_ALL_DAMAGE_GET_100MONEY,
	UP_ALL_DAMAGE_GET_150MONEY,
	UP_ATTACK_10DIFFERENT_TEAMMATE,
	UP_CLEAR_50_UP,
	UP_CLEAR_100_UP,
	UP_LUCKY_ATTACK,
	UP_100_ROUND,
	UP_200_ROUND,
	UP_300_ROUND,
	UP_LOST_EYE_KILL_BOSS,
	UP_LOST_EYE_KILL_HUMAN,
	UP_DEAD_KILL_BOSS,
	UP_TMP_KILL,
	UP_MAC10_KILL,
	UP_UMP45_KILL,
	UP_MP5NAVY_KILL,
	UP_P90_KILL,
	UP_SCOUT_KILL,
	UP_AWP_KILL,
	UP_FAMAS_KILL,
	UP_GALIL_KILL,
	UP_M3_KILL,
	UP_XM1014_KILL,
	UP_AK47_KILL,
	UP_M4A1_KILL,
	UP_AUG_KILL,
	UP_SG552_KILL,
	UP_SG550_KILL,
	UP_ROCK_5_ALIVE,
	UP_VECTOR_GET_3_ALIVE,
	UP_LASER_MODE_ALIVE,
	UP_SPACE_10_ALIVE,
	UP_LASER_5_ALIVE,
	UP_ITEM_DAMAGE_5000,
	UP_SHOP_100_BUY,
	UP_SHOP_300_BUY,
	UP_SHOP_500_BUY,
	UP_M79_KILL,
	UP_M79_5KILL,
	UP_M79_10KILL,
	UP_STRONG_KILL,
	UP_STRONG_5KILL,
	UP_STRONG_10KILL,
	UP_SKULLAXE_KILL,
	UP_SKULLAXE_5KILL,
	UP_SKULLAXE_10KILL,
	UP_SHOCKWAVE,
	UP_ROUND_10S_HURT_BOSS,
	UP_AT_AIR_KILL_BOSS,
	UP_1HP_KNIFE_KILL,
	UP_NO_SELECT_GUN,
	UP_CANT_USE_GUN,
	UP_KILL_DOOR,
	UP_KILL_5DOOR,
	UP_KILL_10DOOR,
	UP_BE_OBERON,
	UP_GOTO_PORTAL,
	UP_ALL_CT_NO_KILL_OBERON,
	UP_SHOP_EVERYONE_BUY,
	UP_KILL_YOURSELF3,
	UP_FIRST_BUY_ITEM,
	UP_CLAER_IN_60S,
	UP_CURSE_KILL_BOSS,
	UP_RESPAWN_HUMAN,
	UP_RESPAWN_3HUMAN,
	UP_RESPAWN_5HUMAN,
	UP_HEGRENADE_KILL_YOURSELF,
	UP_KILL_OBERON,
	UP_KILL_3OBERON,
	UP_KILL_5OBERON,
	UP_DAMAGE_UP_10,
	UP_NO_KILL_DEAD,
	UP_OBERON_SW_KILL,
	UP_OBERON_SW_10KILL,
	UP_OBERON_SW_20KILL,
	UP_OBERON_BW_KILL,
	UP_OBERON_BW_10KILL,
	UP_OBERON_BW_20KILL,
	UP_3KILL_AGAIN,
	UP_4KILL_AGAIN,
	UP_5KILL_AGAIN,
	UP_6KILL_AGAIN,
	UP_7KILL_AGAIN,
	UP_8KILL_AGAIN,
	UP_NO_GET_DAMAGE,
	UP_GET_5000DAMAGE,
	UP_GET_10000DAMAGE,
	UP_GET_15000DAMAGE,
	UP_GET_20000DAMAGE,
	UP_DROP_5WEAPON,
	UP_DROP_10WEAPON,
	UP_DROP_20WEAPON,
	UP_GET_GOD_AXE,
	UP_GOD_AXE_KILL,
	UP_GOD_AXE_3KILL,
	UP_GOD_AXE_5KILL,
	UP_GET_PLASMA,
	UP_PLASMA_KILL,
	UP_PLASMA_3KILL,
	UP_PLASMA_5KILL,
	UP_LOOK_HELP,
	UP_SPECIAL_WEAPON,
	UP_DEAD_RESPAWN,
	UP_RESPAWN_2HUMAN,
	UP_DEATH_WATER,
	UP_5_RESPAWN
}
new const Replaces[MAX_REPLACES][] =
{
	"%class%",
	"%lv%",
	"%stat%",
	"%name%"
}
new const WEAPON_LEVEL[CSW_P90+1] =
{
	-1, 	//----
	0,	//p228
	-1, 	//----
	30,	//scout
	-1, 	//----
	55, 	//xm1014
	-1, 	//----
	10,	//mac10
	80, 	//aug
	-1, 	//----
	0, 	//elite
	0, 	//fiveseven
	15, 	//ump45
	100, 	//sg550
	45,	//galil
	40,	//famas
	0, 	//usp
	0, 	//glock18
	35, 	//awp
	20, 	//mp5navy
	120, 	//m249
	50, 	//m3
	70,	//m4a1
	5,	//tmp
	110, 	//g3sg1
	-1, 	//----
	0, 	//deagle
	90, 	//sg552
	60,	//ak47
	-1, 	//----
	25	//p90
}
new const WEAPON_CLASSNAME[][] =
{
	"",
	"weapon_p228",
	"",
	"weapon_scout",
	"",
	"weapon_xm1014",
	"",
	"weapon_mac10",
	"weapon_aug",
	"",
	"weapon_elite",
	"weapon_fiveseven",
	"weapon_ump45",
	"weapon_sg550",
	"weapon_galil",
	"weapon_famas",
	"weapon_usp",
	"weapon_glock18",
	"weapon_awp",
	"weapon_mp5navy",
	"weapon_m249",
	"weapon_m3",
	"weapon_m4a1",
	"weapon_tmp",
	"weapon_g3sg1",
	"",
	"weapon_deagle",
	"weapon_sg552",
	"weapon_ak47",
	"weapon_knife",
	"weapon_p90"
}
new const WEAPONENTNAMES[][] =
{
	"",
	"weapon_p228",
	"",
	"weapon_scout",
	"weapon_hegrenade",
	"weapon_xm1014",
	"weapon_c4",
	"weapon_mac10",
	"weapon_aug",
	"weapon_smokegrenade",
	"weapon_elite",
	"weapon_fiveseven",
	"weapon_ump45",
	"weapon_sg550",
	"weapon_galil",
	"weapon_famas",
	"weapon_usp",
	"weapon_glock18",
	"weapon_awp",
	"weapon_mp5navy",
	"weapon_m249",
	"weapon_m3",
	"weapon_m4a1",
	"weapon_tmp",
	"weapon_g3sg1", 
	"weapon_flashbang",
	"weapon_deagle",
	"weapon_sg552",
	"weapon_ak47",
	"weapon_knife",
	"weapon_p90"
}
new const MenuLevelGun[][] =
{
	"weapon_tmp",
	"weapon_mac10",
	"weapon_ump45",
	"weapon_mp5navy",
	"weapon_p90",
	"weapon_scout",
	"weapon_awp",
	"weapon_famas",
	"weapon_galil",
	"weapon_m3",
	"weapon_xm1014",
	"weapon_ak47",
	"weapon_m4a1",
	"weapon_aug",
	"weapon_sg552",
	"weapon_sg550",
	"weapon_g3sg1"
}
new const WEAPONNAMES[][] =
{
	"None",
	"P228",
	"None",
	"Scout",
	"手榴彈",
	"XM1014",
	"C4",
	"Mac10",
	"AUG",
	"煙霧彈",
	"Dual Elite",
	"FiveSeven",
	"Ump45",
	"Sg550",
	"Galil",
	"Famas",
	"USP",
	"Glock18",
	"AWP",
	"MP5",
	"M249",
	"M3",
	"M4A1",
	"Tmp",
	"G3SG1",
	"閃光彈",
	"Deagle",
	"Sg552",
	"AK47",
	"刀",
	"P90"
}
new const level_up[MAX_UP][] =
{
	"在只屬於自己的現實中迷茫1小時",
	"在只屬於自己的現實中迷茫2小時",
	"在只屬於自己的現實中迷茫3小時",
	"在只屬於自己的現實中迷茫4小時",
	"在只屬於自己的現實中迷茫5小時",
	"在只屬於自己的現實中迷茫1天",
	"在只屬於自己的現實中迷茫3天",
	"在只屬於自己的現實中迷茫1禮拜",
	"在只屬於自己的現實中迷茫2禮拜",
	"第一次殺死魔王",
	"第一次當魔王",
	"第一次殺死人類",
	"對魔王打出第777次攻擊",
	"單人存活 [10人以上限定]",
	"雙人存活 [10人以上限定]",
	"1HP存活",
	"當魔王殺死所有人類 [10人以上限定]",
	"用刀殺死魔王",
	"當魔王開場15秒內殺死一個人類",
	"用最後一發子彈殺死魔王",
	"整回合只發射一發子彈殺死魔王",
	"殺死5次魔王",
	"殺死10次魔王",
	"殺死20次魔王",
	"殺死BUG魔王",
	"爆頭殺死魔王",
	"爆頭殺死五次魔王",
	"用刀爆頭殺死魔王",
	"沒有受到傷害存活 [10人以上限定]",
	"沒有發出攻擊存活 [10人以上限定]",
	"125HP以上存活",
	"175HP以上存活",
	"15HP以下存活",
	"用手榴彈殺死魔王",
	"第一個對魔王造成傷害",
	"在上午4點44分殺死魔王",
	"在下午4點44分殺死魔王",
	"累積造成傷害88888",
	"累積造成傷害350000",
	"累積造成傷害700000",
	"整場地圖死數最高 [10人以上限定]",
	"整場地圖殺人數最高 [10人以上限定]",
	"擁有77ζ",
	"擁有777ζ",
	"擁有7777ζ",
	"擁有77777ζ",
	"擁有777777ζ",
	"幸運無敵2次",
	"幸運無敵3次",
	"造成傷害444",
	"被魔王攻擊五次後存活",
	"用手榴彈攻擊魔王",
	"連續2回合生存 [10人以上限定]",
	"連續5回合生存 [10人以上限定]",
	"連續7回合生存 [10人以上限定]",
	"連續10回合生存 [10人以上限定]",
	"1回合殺死2次魔王",
	"第一次轉生",
	"殺死特殊魔王",
	"殺死10次特殊魔王",
	"第一次當特殊魔王",
	"第一次拿到手榴彈",
	"自殺",
	"1回合完成5個成就",
	"在空中停留10秒",
	"全體人類沒有受到傷害殺死魔王 [10人以上限定]",
	"全體人類沒有死亡殺死魔王 [10人以上限定]",
	"用刀輕砍隊友500下",
	"用刀重砍隊友300下",
	"在魔王頭上累積10秒",
	"在Lie生日那天有到場 [10月 10日]",
	"Ping達到1000",
	"失明1分鐘後存活",
	"格擋特殊魔王的一擊必殺",
	"格擋5次特殊魔王的一擊必殺",
	"使用一擊必殺殺死10次人類",
	"使用一擊必殺殺死20次人類",
	"使用一擊必殺殺死30次人類",
	"當BUG魔王殺死人類",
	"當BUG魔王殺死5次人類",
	"以完全狀態擊殺魔王[滿血以及未消耗子彈]",
	"對魔王造成20下爆擊",
	"對魔王造成40下爆擊",
	"沒有對魔王造成傷害就被殺死",
	"在商店中消耗了1000ζ",
	"在商店中消耗了5000ζ",
	"在商店中消耗了10000ζ",
	"當魔王時被手榴彈炸到20次",
	"使用最後一把等級武器殺死魔王5次",
	"使用最後一把等級武器殺死魔王10次",
	"使用最後一把等級武器殺死魔王30次",
	"當魔王時被刀造成200000傷害",
	"當魔王時被刀造成500000傷害",
	"被魔王擊中背部",
	"用刀擊中魔王背部50次",
	"1回合內透過累積傷害攻擊魔王取得100ζ",
	"1回合內透過累積傷害攻擊魔王取得150ζ",
	"1回合內打了10名不同隊友",
	"完成50個成就",
	"完成100個成就",
	"打出Lucky Attack[1/10000機率取得]",
	"進行了100回合",
	"進行了200回合",
	"進行了300回合",
	"失明的時候殺死魔王",
	"失明的時候殺死人類",
	"死後殺死魔王",
	"用TMP殺死魔王",
	"用MAC10殺死魔王",
	"用UMP45殺死魔王",
	"用MP5殺死魔王",
	"用P90殺死魔王",
	"用SCOUT殺死魔王",
	"用AWP殺死魔王",
	"用FAMAS殺死魔王",
	"用GALIL殺死魔王",
	"用M3殺死魔王",
	"用XM1014殺死魔王",
	"用AK47殺死魔王",
	"用M4A1殺死魔王",
	"用AUG殺死魔王",
	"用SG552殺死魔王",
	"用SG550殺死魔王",
	"被岩石攻擊5次後存活",
	"一回合內躲避3次向量偵測",
	"瀕死攻擊後存活",
	"被結界命中10次後存活",
	"被雷射擊中5次後存活",
	"使用反逆甲對魔王造成5000傷害",
	"買了100次ζ商店的道具",
	"買了300次ζ商店的道具",
	"買了500次ζ商店的道具",
	"使用M79殺死魔王",
	"使用M79殺死5次魔王",
	"使用M79殺死10次魔王",
	"使用鋒利銀刃殺死魔王",
	"使用鋒利銀刃殺死5次魔王",
	"使用鋒利銀刃殺死10次魔王",
	"使用狂戰巨斧殺死魔王",
	"使用狂戰巨斧殺死5次魔王",
	"使用狂戰巨斧殺死10次魔王",
	"利用衝擊結界彈開魔王",
	"開場10秒內攻擊到魔王",
	"在空中的時候殺死魔王",
	"剩下1HP時用刀殺死魔王",
	"整個回合都沒有進入選槍選單",
	"買到壞掉的槍",
	"將門打壞",
	"將門打壞5次",
	"將門打壞10次",
	"第一次進化為阿比隆",
	"穿越傳送門",
	"魔王進化為阿比隆時沒有人類死亡 [10人以上限定]",
	"一回合內買過ζ商店的所有道具",
	"一張地圖的時間內自殺3次",
	"第一次購買ζ商店的道具",
	"當魔王一分鐘內殺死所有人類 [10人以上限定]",
	"使用反逆甲殺死魔王",
	"使用天使之淚救活人類",
	"使用天使之淚救活3次人類",
	"使用天使之淚救活5次人類",
	"拿手榴彈自爆",
	"殺死阿比隆",
	"殺死3次阿比隆",
	"殺死5次阿比隆",
	"對天使祈求了10次祝福",
	"當魔王沒有殺死任何人就被殺死 [10人以上限定]",
	"使用阿比隆的衝擊波殺死5人類",
	"使用阿比隆的衝擊波殺死10次人類",
	"使用阿比隆的衝擊波殺死20次人類",
	"使用阿比隆的毒氣彈殺死5人類",
	"使用阿比隆的毒氣彈殺死10次人類",
	"使用阿比隆的毒氣彈殺死20次人類",
	"達成三連殺",
	"達成四連殺",
	"達成五連殺",
	"達成六連殺",
	"達成七連殺",
	"達成八連殺",
	"使用傷害吸收卻完全沒有吸收到傷害",
	"吸收5000傷害",
	"吸收10000傷害",
	"吸收15000傷害",
	"吸收20000傷害",
	"使用震動射線擊落5人類的武器",
	"使用震動射線擊落10次人類的武器",
	"使用震動射線擊落20次人類的武器",
	"取得神冰之斧",
	"使用神冰之斧殺死魔王",
	"使用神冰之斧殺死3次魔王",
	"使用神冰之斧殺死5次魔王",
	"取得激光砲",
	"使用激光砲殺死魔王",
	"使用激光砲殺死3次魔王",
	"使用激光砲殺死5次魔王",
	"查看遊戲說明",
	"連續2次選槍都拿到特殊武器",
	"你已經死了",
	"10秒內復活剛死掉的2名隊友",
	"被水淹死",
	"達成第五次轉生"
}
new BGM[][] =
{
	"lie_boss/BGM5.mp3",
	"lie_boss/BGM11V2.mp3",
	"lie_boss/BGM12V2.mp3",
	"lie_boss/BGM13V2.mp3",
	"lie_boss/BGM14V2.mp3",
	"lie_boss/BGM15.mp3",
	"lie_boss/BGM16.mp3",
	"lie_boss/BGM17.mp3",
	"lie_boss/BGM18V2.mp3",
	"lie_boss/BGM19.mp3",
	"lie_boss/BGM20.mp3"
}
new BGM_TASK[] =
{
	283,
	118,
	150,
	82,
	150,
	250,
	122,
	142,
	119,
	275,
	287
}
new const AMMOTYPE[][] = { "", "357sig", "", "762nato", "", "buckshot", "", "45acp", "556nato", "", "9mm", "57mm", "45acp",
			"556nato", "556nato", "556nato", "45acp", "9mm", "338magnum", "9mm", "556natobox", "buckshot",
			"556nato", "9mm", "762nato", "", "50ae", "556nato", "762nato", "", "57mm" }

new mdl_target[] = "models/MonsterAI/target.mdl"
new const oberon_model[] = "models/MonsterAI/oberon.mdl"
new const oberon_bomb_model[] = "models/MonsterAI/oberon_bomb.mdl"
new const oberon_bw_sound[] = "MonsterAI/oberon_bw.wav"
new const oberon_die_sound[] = "MonsterAI/oberon_death_1.wav"
new const oberon_hurt_sound[] = "MonsterAI/oberon_hurt01.wav"
new const oberon_earth_sound[] = "MonsterAI/oberon_earth.wav"
new const oberon_attack_sound[] = "MonsterAI/oberon_attack_1.wav"
new const oberon_l_attack_sound[] = "MonsterAI/oberon_l_attack.wav"
new const oberon_h_attack_sound[] = "MonsterAI/oberon_h_attack.wav"
new const oberon_bomb_deploy_sound[] = "MonsterAI/oberon_bomb_deploy.wav"
new const oberon_bomb_explode_sound[] = "MonsterAI/oberon_bomb_explode.wav"
new g_kill_boss_num[33], g_kill_sp_boss_num[33], g_hs_kill_boss_num[33], g_bug_boss_kill_human_num[33], g_sp_boss_bedie_kill[33], g_sp_boss_bedie_attack[33], g_round_kill_boss_num[33],
g_boss_hit_num[33], g_lucky_num[33], g_all_damage[33], g_fire_num[33], g_hurt_num[33], g_crit_num[33], g_round_up[33], g_lastgun_kill[33], g_clear_up[33], g_damage_teammate[33][10],
g_alive_round[33], g_kill_num[33], g_death_num[33], g_play_round[33], g_sBoss_stat[33], g_currentweapon[33], g_catch_rock_num[33], g_vector_get_num[33], g_catch_laser_num[33], g_catch_space_num[33], g_item_damage[33],
g_shop_buy_num[33], g_m79_kill_num[33], g_strong_kill_num[33], g_skullaxe_kill_num[33], g_god_axe_kill_num[33], g_plasma_kill_num[33], g_attack1_teammate[33], g_attack2_teammate[33], g_get_money_by_damage[33], g_use_money[33],
g_use_knife_hit_back[33], g_hurt_by_knife[33], g_hurt_by_hegrenade[33], g_kill_door_num[33], g_playerbar[33], g_shop_has_buy[33][7], g_kill_yourself_num[33], g_respawn_human_num[33], g_kill_oberon_num[33],
g_damage_up_num[33], g_oberon_sw_kill_num[33], g_oberon_bw_kill_num[33], g_get_damage_value[33], g_drop_weapon_num[33], g_special_weapon_num[33], g_respawn_num[33]
new g_oldplayer[33], g_level[33], g_health[33], g_speed[33], g_damage[33], g_crit[33], g_lucky[33], g_money[33], g_smoney[33], g_lmoney[33], g_statpoint[33], g_respawn[33], g_time_s[33], g_time_m[33], g_time_h[33],
g_damage_money[33], g_on_boss[33], g_BugBoss[33], g_menuPosition[33], hit_key[33], g_Boss_Speed_cd[33], g_model[33][5], g_usemodel[33], g_forever_gun[33][CSW_P90+1]
new g_victim[33], oberon_control[33], camera[33], target_ent[33], start[33][3], stop[33][3]
new bool:bwave[2058], bool:has_bombs[2058], bool:can_move[33], bool:can_space[33], bool:can_switch[33], bool:spec_mode[33]
new bool:g_Boss[33], bool:g_oBoss[33], bool:g_sBoss[33], bool:g_Boss_Speed[33], bool:g_onground_time[33], bool:g_has_fire[33], bool:g_has_hurt[33],
bool:g_has_choose[33], bool:g_sBoss_cd[33], bool:g_Boss_cd[33], bool:rock_hit[33], bool:g_sBoss_laser_mode[33], bool:g_sBoss_never_laser_mode[33], bool:g_sBoss_charge[33], bool:g_sBoss_in_charge[33], bool:g_sBoss_charge_hit[33],
bool:g_light_hit[33], bool:g_select_gun_menu[33], bool:g_get_damage[33], bool:g_dead_respawn[33], bool:g_has_choosep[33], bool:g_special[33]
new Float:hit[33], Float:g_next_laser[33], Float:g_next_light[33], Float:g_on_boss_cd[33], Float:visibility[2058],  Float:origin[33][3], Float:mins[2058][3], Float:maxs[2058][3]
new bool:g_FirstRound, bool:g_Firstboss, bool:g_cant_up, bool:g_Randromized, bool:g_Starting, bool:g_boss_15s_up, bool:g_boss_60s_up, bool:g_human_10s_up, bool:g_human_has_damage, bool:g_human_has_dead, bool:g_has_randomed
new g_LastBoss, g_AutoBalance, g_LimitTeams, g_iHudSync, g_iHudSync2, g_iHudSync3, g_UPNum, g_save1, g_save2, g_save3, g_save4, g_trailSpr, g_blastSpr, g_smokeSpr, g_lightSpr, g_explodeSpr, g_vector_get,
g_puffSpr, g_rockSpr, g_ringSpr, g_dotSpr, g_laserSpr, g_bloodSpr, g_bloodspraySpr, left_time, g_fwPrecacheSound, g_hamtakedmg, g_the_die, g_nextboss, g_msgChannel
new cvar_damage_money, cvar_damage_give, cvar_kill_give, cvar_special_chance, cvar_check_player
new status_value[MAX_TYPES], g_LevelUPName[MAX_UP][128], g_up[33][MAX_UP]
new model_vknife_human[64], model_pknife_human[64], model_vknife_boss[64]
const KEYSMENU = MENU_KEY_1|MENU_KEY_2|MENU_KEY_3|MENU_KEY_4|MENU_KEY_5|MENU_KEY_6|MENU_KEY_7|MENU_KEY_8|MENU_KEY_9|MENU_KEY_0
const PRIMARY_WEAPONS_BIT_SUM = (1<<CSW_SCOUT)|(1<<CSW_XM1014)|(1<<CSW_MAC10)|(1<<CSW_AUG)|(1<<CSW_UMP45)|(1<<CSW_SG550)|(1<<CSW_GALIL)|(1<<CSW_FAMAS)|(1<<CSW_AWP)|(1<<CSW_MP5NAVY)|(1<<CSW_M249)|(1<<CSW_M3)|(1<<CSW_M4A1)|(1<<CSW_TMP)|(1<<CSW_G3SG1)|(1<<CSW_SG552)|(1<<CSW_AK47)|(1<<CSW_P90)
const SECONDARY_WEAPONS_BIT_SUM = (1<<CSW_P228)|(1<<CSW_ELITE)|(1<<CSW_FIVESEVEN)|(1<<CSW_USP)|(1<<CSW_GLOCK18)|(1<<CSW_DEAGLE)
new ak4760r_lcost = 50
new m4a160r_lcost = 70
new m24_lcost = 30
new mg3_lcost = 45
new f2000_lcost = 45
new wa2000_lcost = 40
new k1ases_lcost = 35
new thompson_lcost = 35
new ak4760r_scost = 120
new m4a160r_scost = 160
new m24_scost = 80
new mg3_scost = 110
new f2000_scost = 110
new wa2000_scost = 100
new k1ases_scost = 90
new thompson_scost = 90
public plugin_init()
{
	g_FirstRound = true
	g_Firstboss = true
	g_cant_up = true
	g_iHudSync = CreateHudSyncObj()
	g_iHudSync2 = CreateHudSyncObj()
	g_iHudSync3 = CreateHudSyncObj()
	g_AutoBalance = get_cvar_pointer("mp_autoteambalance")
	g_LimitTeams = get_cvar_pointer("mp_limitteams")
	cvar_check_player = register_cvar("boss_check_player", "0")
	cvar_damage_money = register_cvar("boss_damage_money", "2500")
	cvar_damage_give = register_cvar("boss_damage_give", "1")
	cvar_kill_give = register_cvar("boss_kill_give", "20")
	cvar_special_chance = register_cvar("boss_special_chance", "30")
	register_cvar("amx_show_name", "0")
	register_touch("oberon_bomb", "*", "bomb_touch")
	register_think("npc_oberon", "oberon_think")
	register_think("poison", "poison_think")
	register_think("target_model", "target_model_think")
	register_forward(FM_AddToFullPack, "fw_AddToFullPack", 1)
	register_forward(FM_Touch, "fw_TouchWeapon")
	register_forward(FM_Touch, "fw_Touch")
	register_forward(FM_PlayerPreThink, "fw_PlayerPreThink")
	register_forward(FM_PlayerPostThink, "fw_PlayerPostThink", 1)
	register_forward(FM_ClientDisconnect, "fw_ClientDisconnect")
	register_forward(FM_ClientKill, "fw_ClientKill")
	register_forward(FM_CmdStart, "fw_CmdStart")
	register_forward(FM_EmitSound, "fw_EmitSound")
	unregister_forward(FM_PrecacheSound, g_fwPrecacheSound)
	register_event("30", "EventIntermission", "a")
	register_event("TextMsg", "EventRoundEnd", "a", "2&#Game_w")
	register_event("StatusValue", "Event_StatusValue", "b")
	register_event("CurWeapon", "monster_weapons", "b")
	register_event("DeathMsg", "EventDeath", "a")
	register_event("Health", "EventHealth", "be")
	register_event("ResetHUD", "EventResetHud", "be")
	register_logevent("EventRoundStart", 2, "1=Round_Start")
	register_logevent("EventRoundEnd", 2, "1=Round_End")
	register_menu("Level Menu", KEYSMENU, "menu_level")
	register_menu("Stat Menu", KEYSMENU, "menu_statpoint")
	register_menu("Respawn Menu", KEYSMENU, "menu_respawn")
	register_menu("CP Menu", KEYSMENU, "menu_player")
	register_menu("BuyPlayerMenu", KEYSMENU, "menu_buy_player")
	register_menu("BFG Menu", KEYSMENU, "menu_buy_forever_gun")
	register_menu("S Menu", KEYSMENU, "menu_sbuy_forever_gun")
	register_menu("L Menu", KEYSMENU, "menu_lbuy_forever_gun")
	register_menu("S Buy Menu", KEYSMENU, "menu_sbuy_player")
	register_menu("L Buy Menu", KEYSMENU, "menu_lbuy_player")
	register_menu("Gun Menu", KEYSMENU, "menu_gun")
	register_menu("CF Menu", KEYSMENU, "menu_forever_gun")
	register_menu("Choose Menu", KEYSMENU, "menu_choose")
	register_menu("BuyGunMenu", KEYSMENU, "menu_buy_gun")
	register_menu("Status Menu", KEYSMENU, "menu_status")
	register_menucmd(register_menuid("Level UP Menu"), 1023, "LevelUPMenu")
	register_clcmd("drop", "clcmd_drop")
	register_clcmd("sp_mode", "cmd_spec_mode")
	register_clcmd("say /shop", "show_menu_buy_gun")
	register_clcmd("say /player", "show_menu_buy_player")
	register_clcmd("say /cplayer", "show_menu_player")
	register_clcmd("say /tgun", "show_menu_buy_forever_gun")
	register_clcmd("say /level", "show_menu_level")
	register_clcmd("say /gun", "show_menu_gun")
	register_clcmd("say /up", "cmdUPMenu")
	register_clcmd("personal_reality", "cmd_personal_reality", ADMIN_FAKE)
	register_clcmd("playbgm", "cmd_playbgm", ADMIN_FAKE)
	register_concmd("amx_get_level", "cmd_get_level", ADMIN_FAKE)
	register_concmd("amx_set_forever_gun", "cmd_set_forever_gun", ADMIN_FAKE)
	register_concmd("amx_set_model", "cmd_set_model", ADMIN_FAKE)
	register_concmd("amx_set_respawn", "cmd_set_respawn", ADMIN_FAKE)
	register_concmd("amx_choose_boss", "cmd_choose_boss", ADMIN_FAKE)
	register_concmd("amx_reset_data", "cmd_reset_data", ADMIN_FAKE)
	register_concmd("amx_set_money", "cmd_set_money", ADMIN_FAKE)
	register_concmd("amx_set_lmoney", "cmd_set_lmoney", ADMIN_FAKE)
	register_concmd("amx_set_smoney", "cmd_set_smoney", ADMIN_FAKE)
	register_concmd("amx_set_time", "cmd_set_time", ADMIN_FAKE)
	for (new i = 0;i < sizeof WEAPONENTNAMES;i++)
	{
		if (strlen(WEAPONENTNAMES[i]) == 0)
			continue;

		RegisterHam(Ham_Item_Deploy, WEAPONENTNAMES[i], "fw_Item_Deploy_Post", 1)
	}
	RegisterHam(Ham_Spawn, "player", "fw_PlayerSpawn", 1)
	RegisterHam(Ham_Killed, "info_target", "monster_killed")
	RegisterHam(Ham_TakeDamage, "player", "fw_TakeDamage")
	RegisterHam(Ham_TraceAttack, "player", "fw_TraceAttack")
	RegisterHam(Ham_TraceAttack, "info_target", "npc_TraceAttack")
	for (new i = 0;i < sizeof WEAPON_CLASSNAME;i++)
	{
		if (strlen(WEAPON_CLASSNAME[i]) == 0)
			continue;

		RegisterHam(Ham_Weapon_PrimaryAttack, WEAPON_CLASSNAME[i], "fw_WeapPriAttack")
	}
	set_task(1.0, "CheckTime", _, _, _, "b")
	set_task(5.0, "AutoSave", _, _, _, "b")
	set_task(5.0, "CheckTerrorists", _, _, _, "b")
	Make_HealthBar()
	g_save1 = nvault_open("system_save1")
	g_save2 = nvault_open("system_save2")
	g_save3 = nvault_open("system_save3")
	g_save4 = nvault_open("system_save4")
}
public plugin_precache()
{
	register_plugin("魔王模式", "1.0", "Lie")
	for (new i = 0;i < MAX_UP;i++)
	{
		g_UPNum++
		formatex(g_LevelUPName[i], charsmax(g_LevelUPName[]), "%s", level_up[i])
	}
	new Float:Origin[3]
	Origin[0] = 8000.0
	Origin[1] = 8000.0
	Origin[2] = 8000.0
	load_customization_from_files()
	g_dotSpr = engfunc(EngFunc_PrecacheModel, "sprites/dot.spr")
	g_rockSpr = engfunc(EngFunc_PrecacheModel, "models/lie_weapon/rocksgibs.mdl")
	g_ringSpr = engfunc(EngFunc_PrecacheModel, "sprites/shockwave.spr")
	g_puffSpr = engfunc(EngFunc_PrecacheModel, "sprites/gas_puff_01r.spr")
	g_bloodSpr = engfunc(EngFunc_PrecacheModel, "sprites/blood.spr")
	g_bloodspraySpr = engfunc(EngFunc_PrecacheModel, "sprites/bloodspray.spr")
	g_lightSpr = engfunc(EngFunc_PrecacheModel, "sprites/beacon.spr")
	g_trailSpr = engfunc(EngFunc_PrecacheModel, "sprites/smoke.spr")
	g_laserSpr = engfunc(EngFunc_PrecacheModel, "sprites/laserbeam.spr")
	g_blastSpr = engfunc(EngFunc_PrecacheModel, "sprites/white.spr")
	g_smokeSpr = engfunc(EngFunc_PrecacheModel, "sprites/black_smoke4.spr")
	g_explodeSpr = engfunc(EngFunc_PrecacheModel, "sprites/deimosexp.spr")
	engfunc(EngFunc_PrecacheModel, model_vknife_human)
	engfunc(EngFunc_PrecacheModel, model_pknife_human)
	engfunc(EngFunc_PrecacheModel, model_vknife_boss)
	g_fwPrecacheSound = register_forward(FM_PrecacheSound, "fw_PrecacheSound")
}
public plugin_natives()
{
	register_native("level_up_user", "user_level_up", 1)
	register_native("get_user_boss", "native_get_user_boss", 1)
	register_native("get_user_bboss", "native_get_user_bboss", 1)
	register_native("get_user_sboss", "native_get_user_sboss", 1)
	register_native("get_user_oboss", "native_get_user_oboss", 1)
	register_native("get_user_bmoney", "native_get_user_bmoney", 1)
	register_native("get_user_lmoney", "native_get_user_lmoney", 1)
	register_native("get_user_smoney", "native_get_user_smoney", 1)
	register_native("get_boss_lm", "native_get_boss_lm", 1)
	register_native("set_user_bmoney", "native_set_user_bmoney", 1)
	register_native("set_user_fire_num", "native_set_user_fire_num", 1)
	register_native("set_user_hit_num", "native_set_user_hit_num", 1)
	register_native("set_user_damage_money", "native_set_user_damage_money", 1)
	register_native("set_user_has_hurt", "native_set_user_has_hurt", 1)
	register_native("set_user_all_damage", "native_set_user_all_damage", 1)
	register_native("set_user_crit_num", "native_set_user_crit_num", 1)
	register_native("set_user_has_fire", "native_set_user_has_fire", 1)
	register_native("set_user_space_num", "native_set_user_space_num", 1)
	register_native("set_user_shop_num", "native_set_user_shop_num", 1)
	register_native("set_user_m79_kill_num", "native_set_user_m79_kill_num", 1)
	register_native("set_get_money_by_damage", "native_set_get_money_by_damage", 1)
	register_native("set_user_use_money", "native_set_user_use_money", 1)
	register_native("set_user_kill_door_num", "native_set_user_kill_door_num", 1)
	register_native("set_has_randomed", "native_set_has_randomed", 1)
	register_native("set_shop_has_buy", "native_set_shop_has_buy", 1)
	register_native("set_respawn_human_num", "native_set_respawn_human_num", 1)
	register_native("set_user_damageup_num", "native_set_user_damageup_num", 1)
	register_native("set_user_damage_value", "native_set_user_damage_value", 1)
	register_native("set_god_axe_kill_num", "native_set_god_axe_kill_num", 1)
	register_native("set_plasma_kill_num", "native_set_plasma_kill_num", 1)
	register_native("set_dead_respawn", "native_set_dead_respawn", 1)
	register_native("set_respawn_num", "native_set_respawn_num", 1)
	register_native("set_msg_channel", "native_set_msg_channel", 1)
	register_native("get_user_fire_num", "native_get_user_fire_num", 1)
	register_native("get_user_hit_num", "native_get_user_hit_num", 1)
	register_native("get_user_damage_money", "native_get_user_damage_money", 1)
	register_native("get_user_has_hurt", "native_get_user_has_hurt", 1)
	register_native("get_user_all_damage", "native_get_user_all_damage", 1)
	register_native("get_user_crit_num", "native_get_user_crit_num", 1)
	register_native("get_user_has_fire", "native_get_user_has_fire", 1)
	register_native("get_user_crit", "native_get_user_crit", 1)
	register_native("get_user_damage", "native_get_user_damage", 1)
	register_native("get_user_usemodel", "native_get_user_usemodel", 1)
	register_native("get_user_laser_mode", "native_get_user_laser_mode", 1)
	register_native("get_user_never_laser_mode", "native_get_user_n_laser_mode", 1)
	register_native("get_user_forever_gun", "native_get_user_forever_gun", 1)
	register_native("get_user_space_num", "native_get_user_space_num", 1)
	register_native("get_user_shop_num", "native_get_user_shop_num", 1)
	register_native("get_user_m79_kill_num", "native_get_user_m79_kill_num", 1)
	register_native("get_money_by_damage", "native_get_money_by_damage", 1)
	register_native("get_user_use_money", "native_get_user_use_money", 1)
	register_native("get_user_kill_door_num", "native_get_user_kill_door_num", 1)
	register_native("get_has_randomed", "native_get_has_randomed", 1)
	register_native("create_the_oberon", "create_oberon", 1)
	register_native("get_shop_has_buy", "native_get_shop_has_buy", 1)
	register_native("get_respawn_human_num", "native_get_respawn_human_num", 1)
	register_native("get_user_damageup_num", "native_get_user_damageup_num", 1)
	register_native("get_user_damage_value", "native_get_user_damage_value", 1)
	register_native("get_user_get_damage", "native_get_user_get_damage", 1)
	register_native("get_god_axe_kill_num", "native_get_god_axe_kill_num", 1)
	register_native("get_plasma_kill_num", "native_get_plasma_kill_num", 1)
	register_native("get_respawn_num", "native_get_respawn_num", 1)
	register_native("get_msg_channel", "native_get_msg_channel", 1)
	register_native("get_user_up", "native_get_user_up", 1)
	register_native("get_user_respawn", "native_get_user_respawn", 1)
	register_native("get_user_level", "native_get_user_level", 1)
	register_native("get_user_hp", "native_get_user_hp", 1)
	register_native("get_user_stpoint", "native_get_user_stpoint", 1)
}
public plugin_end()
{
	nvault_close(g_save1)
	nvault_close(g_save2)
	nvault_close(g_save3)
	nvault_close(g_save4)
}
public Make_HealthBar()
{
	static PlayerBar, AllocString
	AllocString = engfunc(EngFunc_AllocString, "env_sprite")
	for (new id = 0; id < get_maxplayers();id++)
	{
		g_playerbar[id] = engfunc(EngFunc_CreateNamedEntity, AllocString)
		PlayerBar = g_playerbar[id]
		if (pev_valid(PlayerBar))
		{
			set_pev(PlayerBar, pev_scale, 0.25)
			engfunc(EngFunc_SetModel, PlayerBar, "sprites/BossHealth.spr")
			set_pev(PlayerBar, pev_effects, pev(PlayerBar, pev_effects ) | EF_NODRAW)
		}
	}
}
public cmd_spec_mode(id, level, cid)
{
	if (!cmd_access(id, level, cid, 1))
		return PLUGIN_HANDLED;

	if (spec_mode[id])
	{
		spec_mode[id] = false
		user_silentkill(id)
	}
	else
		spec_mode[id] = true

	return PLUGIN_HANDLED;
}
public cmd_get_level(id, level, cid)
{
	if (!cmd_access(id, level, cid, 3))
		return PLUGIN_HANDLED;

	new Target[64], Target_Name[64], Say[64]
	read_argv(1, Target, 63)
	read_argv(2, Say, 63)
	if (!cmd_target(id, Target))
		return PLUGIN_HANDLED;

	get_user_name(cmd_target(id, Target), Target_Name, 63)
	change_name(Target_Name, 63)
	if (str_to_num(Say))
		client_printcolor(0, "^x04[自我現實: /ctr%s ^x04的等級為 /ctr%d^x04]", Target_Name, g_level[cmd_target(id, Target)])
	else
		client_printcolor(id, "^x04[自我現實: /ctr%s ^x04的等級為 /ctr%d^x04]", Target_Name, g_level[cmd_target(id, Target)])

	return PLUGIN_HANDLED;
}
public cmd_playbgm(id, level, cid)
{
	if (!cmd_access(id, level, cid, 2))
		return PLUGIN_HANDLED;

	new Number[64], iPlayers[32], iNum, sound
	read_argv(1, Number, 63)
	remove_task(7866)
	get_players(iPlayers, iNum, "c")
	if (str_to_num(Number) > sizeof BGM - 1)
		sound = random_num(0, sizeof BGM - 1)
	else if (str_to_num(Number) < 0)
		sound = random_num(0, sizeof BGM - 1)
	else
		sound = str_to_num(Number)

	for (new i = 0;i < iNum;i++)
	{
		client_cmd(iPlayers[i], "mp3 stop")
		client_cmd(iPlayers[i], "mp3 play ^"sound/%s^"", BGM[sound])
	}
	set_task(float(BGM_TASK[sound]), "play_bgm", 7866)
	return PLUGIN_HANDLED;
}
public cmd_set_forever_gun(id, level, cid)
{
	if (!cmd_access(id, level, cid, 5))
		return PLUGIN_HANDLED;

	new Target[64], Target_Name[64], Type[64], value[64], Say[64]
	read_argv(1, Target, 63)
	read_argv(2, Type, 63)
	read_argv(3, value, 63)
	read_argv(4, Say, 63)
	if (equal(Target, "0"))
	{
		new iNum, iPlayers[32]
		get_players(iPlayers, iNum, "c")
		if (iNum < 1)
			return PLUGIN_HANDLED;

		for (new i = 0;i < iNum;i++)
		{
			g_forever_gun[iPlayers[i]][str_to_num(Type)] = str_to_num(value)
		}
		if (str_to_num(Say))
			client_printcolor(0, "^x04[自我現實: 管理員將所有人編號為 /ctr%d ^x04的永久槍調為 /ctr%s^x04]", str_to_num(Type), str_to_num(value) > 0 ? "有" : "無")
		else
			client_printcolor(id, "^x04[自我現實: 你將所有人編號為 /ctr%d ^x04的永久槍調為 /ctr%s^x04]", str_to_num(Type), str_to_num(value) > 0 ? "有" : "無")

		return PLUGIN_HANDLED;
	}
	if (!cmd_target(id, Target))
		return PLUGIN_HANDLED;

	get_user_name(cmd_target(id, Target), Target_Name, 63)
	change_name(Target_Name, 63)
	g_forever_gun[cmd_target(id, Target)][str_to_num(Type)] = str_to_num(value)
	if (str_to_num(Say))
		client_printcolor(0, "^x04[自我現實: 管理員將 /ctr%s ^x04編號為 /ctr%d^x04 的永久槍調為 /ctr%s^x04]", Target_Name, str_to_num(Type), str_to_num(value) > 0 ? "有" : "無")
	else
		client_printcolor(id, "^x04[自我現實: 你將 /ctr%s ^x04編號為 /ctr%d^x04 的永久槍調為 /ctr%s^x04]", Target_Name, str_to_num(Type), str_to_num(value) > 0 ? "有" : "無")

	return PLUGIN_HANDLED;
}
public cmd_set_model(id, level, cid)
{
	if (!cmd_access(id, level, cid, 5))
		return PLUGIN_HANDLED;

	new Target[64], Target_Name[64], Type[64], value[64], Say[64]
	read_argv(1, Target, 63)
	read_argv(2, Type, 63)
	read_argv(3, value, 63)
	read_argv(4, Say, 63)
	if (equal(Target, "0"))
	{
		new iNum, iPlayers[32]
		get_players(iPlayers, iNum, "c")
		if (iNum < 1)
			return PLUGIN_HANDLED;

		for (new i = 0;i < iNum;i++)
		{
			g_model[iPlayers[i]][str_to_num(Type)] = str_to_num(value)
		}
		if (str_to_num(Say))
			client_printcolor(0, "^x04[自我現實: 管理員將所有人編號為 /ctr%d ^x04的模組調為 /ctr%s^x04]", str_to_num(Type), str_to_num(value) > 0 ? "有" : "無")
		else
			client_printcolor(id, "^x04[自我現實: 你將所有人編號為 /ctr%d ^x04的模組調為 /ctr%s^x04]", str_to_num(Type), str_to_num(value) > 0 ? "有" : "無")

		return PLUGIN_HANDLED;
	}
	if (!cmd_target(id, Target))
		return PLUGIN_HANDLED;

	get_user_name(cmd_target(id, Target), Target_Name, 63)
	change_name(Target_Name, 63)
	g_model[cmd_target(id, Target)][str_to_num(Type)] = str_to_num(value)
	if (str_to_num(Say))
		client_printcolor(0, "^x04[自我現實: 管理員將 /ctr%s ^x04編號為 /ctr%d^x04 的模組調為 /ctr%s^x04]", Target_Name, str_to_num(Type), str_to_num(value) > 0 ? "有" : "無")
	else
		client_printcolor(id, "^x04[自我現實: 你將 /ctr%s ^x04編號為 /ctr%d^x04 的模組調為 /ctr%s^x04]", Target_Name, str_to_num(Type), str_to_num(value) > 0 ? "有" : "無")

	return PLUGIN_HANDLED;
}
public cmd_set_respawn(id, level, cid)
{
	if (!cmd_access(id, level, cid, 4))
		return PLUGIN_HANDLED;

	new Target[64], Target_Name[64], value[64], Say[64]
	read_argv(1, Target, 63)
	read_argv(2, value, 63)
	read_argv(3, Say, 63)
	if (equal(Target, "0"))
	{
		new iNum, iPlayers[32]
		get_players(iPlayers, iNum, "c")
		if (iNum < 1)
			return PLUGIN_HANDLED;

		for (new i = 0;i < iNum;i++)
		{
			g_respawn[iPlayers[i]] = str_to_num(value)
		}
		if (str_to_num(Say))
			client_printcolor(0, "^x04[自我現實: 管理員將所有人的轉生數調為 /ctr%d^x04]", str_to_num(value))
		else
			client_printcolor(id, "^x04[自我現實: 你將所有人的轉生數調為 /ctr%d^x04]", str_to_num(value))

		return PLUGIN_HANDLED;
	}
	if (!cmd_target(id, Target))
		return PLUGIN_HANDLED;

	get_user_name(cmd_target(id, Target), Target_Name, 63)
	change_name(Target_Name, 63)
	g_respawn[cmd_target(id, Target)] = str_to_num(value)
	if (str_to_num(Say))
		client_printcolor(0, "^x04[自我現實: 管理員將 /ctr%s ^x04的轉生數調為 /ctr%d^x04]", Target_Name, str_to_num(value))
	else
		client_printcolor(id, "^x04[自我現實: 你將 /ctr%s ^x04的轉生數調為 /ctr%d^x04]", Target_Name, str_to_num(value))

	return PLUGIN_HANDLED;
}
public cmd_choose_boss(id, level, cid)
{
	if (!cmd_access(id, level, cid, 2))
		return PLUGIN_HANDLED;

	new Target[64]
	read_argv(1, Target, 63)
	if (!cmd_target(id, Target))
		return PLUGIN_HANDLED;

	g_nextboss = cmd_target(id, Target)
	return PLUGIN_HANDLED;
}
public cmd_reset_data(id, level, cid)
{
	if (!cmd_access(id, level, cid, 2))
		return PLUGIN_HANDLED;

	new Target[64]
	read_argv(1, Target, 63)
	if (!cmd_target(id, Target))
		return PLUGIN_HANDLED;

	new name[64]
	get_user_name(cmd_target(id, Target), name, 63)
	change_name(name, 63)
	g_statpoint[cmd_target(id, Target)] = 50
	g_crit[cmd_target(id, Target)] = 0
	g_lucky[cmd_target(id, Target)] = 0
	g_damage[cmd_target(id, Target)] = 0
	g_speed[cmd_target(id, Target)] = 0
	g_health[cmd_target(id, Target)] = 0
	g_level[cmd_target(id, Target)] = 0
	g_money[cmd_target(id, Target)] = 0
	g_smoney[cmd_target(id, Target)] = 0
	g_lmoney[cmd_target(id, Target)] = 0
	g_round_kill_boss_num[cmd_target(id, Target)] = 0
	g_has_fire[cmd_target(id, Target)] = false
	g_has_hurt[cmd_target(id, Target)] = false
	g_fire_num[cmd_target(id, Target)] = 0
	g_shop_buy_num[cmd_target(id, Target)] = 0
	g_hurt_num[cmd_target(id, Target)] = 0
	g_item_damage[cmd_target(id, Target)] = 0
	g_catch_rock_num[cmd_target(id, Target)] = 0
	g_drop_weapon_num[cmd_target(id, Target)] = 0
	g_catch_laser_num[cmd_target(id, Target)] = 0
	g_kill_oberon_num[cmd_target(id, Target)] = 0
	g_respawn_num[cmd_target(id, Target)] = 0
	g_dead_respawn[cmd_target(id, Target)] = false
	g_vector_get_num[cmd_target(id, Target)] = 0
	g_select_gun_menu[cmd_target(id, Target)] = false
	g_use_money[cmd_target(id, Target)] = 0
	g_use_knife_hit_back[cmd_target(id, Target)] = 0
	g_catch_space_num[cmd_target(id, Target)] = 0
	g_m79_kill_num[cmd_target(id, Target)] = 0
	g_strong_kill_num[cmd_target(id, Target)] = 0
	g_god_axe_kill_num[cmd_target(id, Target)] = 0
	g_plasma_kill_num[cmd_target(id, Target)] = 0
	g_skullaxe_kill_num[cmd_target(id, Target)] = 0
	g_kill_door_num[cmd_target(id, Target)] = 0
	g_hurt_by_hegrenade[cmd_target(id, Target)] = 0
	g_hurt_by_knife[cmd_target(id, Target)] = 0
	g_special_weapon_num[cmd_target(id, Target)] = 0
	g_attack1_teammate[cmd_target(id, Target)] = 0
	g_attack2_teammate[cmd_target(id, Target)] = 0
	g_get_money_by_damage[cmd_target(id, Target)] = 0
	g_boss_hit_num[cmd_target(id, Target)] = 0
	g_damage_money[cmd_target(id, Target)] = 0
	g_kill_boss_num[cmd_target(id, Target)] = 0
	g_kill_sp_boss_num[cmd_target(id, Target)] = 0
	g_hs_kill_boss_num[cmd_target(id, Target)] = 0
	g_bug_boss_kill_human_num[cmd_target(id, Target)] = 0
	g_sp_boss_bedie_kill[cmd_target(id, Target)] = 0
	g_sp_boss_bedie_attack[cmd_target(id, Target)] = 0
	g_lucky_num[cmd_target(id, Target)] = 0
	g_all_damage[cmd_target(id, Target)] = 0
	g_crit_num[cmd_target(id, Target)] = 0
	g_round_up[cmd_target(id, Target)] = 0
	g_clear_up[cmd_target(id, Target)] = 0
	g_lastgun_kill[cmd_target(id, Target)] = 0
	g_on_boss[cmd_target(id, Target)] = 0
	g_time_s[cmd_target(id, Target)] = 0
	g_time_m[cmd_target(id, Target)] = 0
	g_time_h[cmd_target(id, Target)] = 0
	g_respawn[cmd_target(id, Target)] = 0
	g_play_round[cmd_target(id, Target)] = 0
	g_respawn_human_num[cmd_target(id, Target)] = 0
	g_damage_up_num[cmd_target(id, Target)] = 0
	g_oberon_bw_kill_num[cmd_target(id, Target)] = 0
	g_oberon_sw_kill_num[cmd_target(id, Target)] = 0
	for (new t = 0;t < 10;t++)
		g_damage_teammate[cmd_target(id, Target)][t] = 0

	for (new i = 0;i < MAX_UP;i++)
		g_up[cmd_target(id, Target)][i] = 0

	for (new i = 0;i < 7;i++)
		g_shop_has_buy[cmd_target(id, Target)][i] = 0

	for (new i = 0;i < CSW_P90+1;i++)
		g_forever_gun[cmd_target(id, Target)][i] = 0

	for (new i = 0;i < 4;i++)
		g_model[cmd_target(id, Target)][i] = 0

	client_printcolor(0, "^x04[自我現實: /ctr%s ^x04的資料被管理員重置了]", name)
	return PLUGIN_HANDLED;
}
public cmd_set_money(id, level, cid)
{
	if (!cmd_access(id, level, cid, 5))
		return PLUGIN_HANDLED;

	new Target[64], Target_Name[64], Type[64], value[64], Say[64]
	read_argv(1, Target, 63)
	read_argv(2, Type, 63)
	read_argv(3, value, 63)
	read_argv(4, Say, 63)
	if (equal(Target, "0"))
	{
		new iNum, iPlayers[32]
		get_players(iPlayers, iNum, "c")
		if (iNum < 1)
			return PLUGIN_HANDLED;

		for (new i = 0;i < iNum;i++)
		{
			if (Type[0] == '+')
				g_money[iPlayers[i]] += str_to_num(value)
			else if (Type[0] == '=')
				g_money[iPlayers[i]] = str_to_num(value)
			else if (Type[0] == '-')
				g_money[iPlayers[i]] -= str_to_num(value)
		}
		if (str_to_num(Say))
			client_printcolor(0, "^x04[自我現實: 管理員%s 所有人 /ctr%d ^x04ζ]", Type[0] == '+' ? "增加" : Type[0] == '=' ? "調整" : "減少", str_to_num(value))
		else
			client_printcolor(id, "^x04[自我現實: 你%s 所有人 /ctr%d ^x04ζ]", Type[0] == '+' ? "增加" : Type[0] == '=' ? "調整" : "減少", str_to_num(value))

		return PLUGIN_HANDLED;
	}
	if (!cmd_target(id, Target))
		return PLUGIN_HANDLED;

	get_user_name(cmd_target(id, Target), Target_Name, 63)
	change_name(Target_Name, 63)
	if (Type[0] == '+')
		g_money[cmd_target(id, Target)] += str_to_num(value)
	else if (Type[0] == '=')
		g_money[cmd_target(id, Target)] = str_to_num(value)
	else if (Type[0] == '-')
		g_money[cmd_target(id, Target)] -= str_to_num(value)

	if (str_to_num(Say))
		client_printcolor(0, "^x04[自我現實: 管理員%s /ctr%s ^x04的ζ到 /ctr%d^x04]", Type[0] == '+' ? "增加" : Type[0] == '=' ? "調整" : "減少", Target_Name, g_money[cmd_target(id, Target)])
	else
		client_printcolor(id, "^x04[自我現實: 你%s /ctr%s ^x04的ζ到 /ctr%d^x04]", Type[0] == '+' ? "增加" : Type[0] == '=' ? "調整" : "減少", Target_Name, g_money[cmd_target(id, Target)])

	return PLUGIN_HANDLED;
}
public cmd_set_smoney(id, level, cid)
{
	if (!cmd_access(id, level, cid, 5))
		return PLUGIN_HANDLED;

	new Target[64], Target_Name[64], Type[64], value[64], Say[64]
	read_argv(1, Target, 63)
	read_argv(2, Type, 63)
	read_argv(3, value, 63)
	read_argv(4, Say, 63)
	if (equal(Target, "0"))
	{
		new iNum, iPlayers[32]
		get_players(iPlayers, iNum, "c")
		if (iNum < 1)
			return PLUGIN_HANDLED;

		for (new i = 0;i < iNum;i++)
		{
			if (Type[0] == '+')
				g_smoney[iPlayers[i]] += str_to_num(value)
			else if (Type[0] == '=')
				g_smoney[iPlayers[i]] = str_to_num(value)
			else if (Type[0] == '-')
				g_smoney[iPlayers[i]] -= str_to_num(value)
		}
		if (str_to_num(Say))
			client_printcolor(0, "^x04[自我現實: 管理員%s所有人 /ctr%d ^x04S幣]", Type[0] == '+' ? "增加" : Type[0] == '=' ? "調整" : "減少", str_to_num(value))
		else
			client_printcolor(id, "^x04[自我現實: 你%s 所有人 /ctr%d ^x04S幣]", Type[0] == '+' ? "增加" : Type[0] == '=' ? "調整" : "減少", str_to_num(value))

		return PLUGIN_HANDLED;
	}
	if (!cmd_target(id, Target))
		return PLUGIN_HANDLED;

	get_user_name(cmd_target(id, Target), Target_Name, 63)
	change_name(Target_Name, 63)
	if (Type[0] == '+')
		g_smoney[cmd_target(id, Target)] += str_to_num(value)
	else if (Type[0] == '=')
		g_smoney[cmd_target(id, Target)] = str_to_num(value)
	else if (Type[0] == '-')
		g_smoney[cmd_target(id, Target)] -= str_to_num(value)

	if (str_to_num(Say))
		client_printcolor(0, "^x04[自我現實: 管理員%s /ctr%s ^x04的S幣到 /ctr%d^x04]", Type[0] == '+' ? "增加" : Type[0] == '=' ? "調整" : "減少", Target_Name, g_smoney[cmd_target(id, Target)])
	else
		client_printcolor(id, "^x04[自我現實: 你%s /ctr%s ^x04的S幣到 /ctr%d^x04]", Type[0] == '+' ? "增加" : Type[0] == '=' ? "調整" : "減少", Target_Name, g_smoney[cmd_target(id, Target)])

	return PLUGIN_HANDLED;
}
public cmd_set_time(id, level, cid)
{
	if (!cmd_access(id, level, cid, 6))
		return PLUGIN_HANDLED;

	new Target[64], Target_Name[64], Type[64], Time[64], value[64], Say[64]
	read_argv(1, Target, 63)
	read_argv(2, Type, 63)
	read_argv(3, Time, 63)
	read_argv(4, value, 63)
	read_argv(5, Say, 63)
	if (equal(Target, "0"))
	{
		new iNum, iPlayers[32]
		get_players(iPlayers, iNum, "c")
		if (iNum < 1)
			return PLUGIN_HANDLED;

		for (new i = 0;i < iNum;i++)
		{
			if (Type[0] == '+')
			{
				if (Time[0] == 's')
					g_time_s[iPlayers[i]] += str_to_num(value)
				else if (Time[0] == 'm')
					g_time_m[iPlayers[i]] += str_to_num(value)
				else if (Time[0] == 'h')
					g_time_h[iPlayers[i]] += str_to_num(value)
			}
			else if (Type[0] == '=')
			{
				if (Time[0] == 's')
					g_time_s[iPlayers[i]] = str_to_num(value)
				else if (Time[0] == 'm')
					g_time_m[iPlayers[i]] = str_to_num(value)
				else if (Time[0] == 'h')
					g_time_h[iPlayers[i]] = str_to_num(value)
			}
			else if (Type[0] == '-')
			{
				if (Time[0] == 's')
					g_time_s[iPlayers[i]] -= str_to_num(value)
				else if (Time[0] == 'm')
					g_time_m[iPlayers[i]] -= str_to_num(value)
				else if (Time[0] == 'h')
					g_time_h[iPlayers[i]] -= str_to_num(value)
			}
		}
		if (str_to_num(Say))
			client_printcolor(0, "^x04[自我現實: 管理員%s所有人遊玩時間的 /ctr%s ^x04到 /ctr%d^x04]", Type[0] == '+' ? "增加" : Type[0] == '=' ? "調整" : "減少",
			Time[0] == 's' ? "秒" : Time[0] == 'm' ? "分鐘" : "小時", str_to_num(value))
		else
			client_printcolor(id, "^x04[自我現實: 你%s所有人遊玩時間的 /ctr%s ^x04到 /ctr%d^x04]", Type[0] == '+' ? "增加" : Type[0] == '=' ? "調整" : "減少",
			Time[0] == 's' ? "秒" : Time[0] == 'm' ? "分鐘" : "小時", str_to_num(value))

		return PLUGIN_HANDLED;
	}
	if (!cmd_target(id, Target))
		return PLUGIN_HANDLED;

	get_user_name(cmd_target(id, Target), Target_Name, 63)
	change_name(Target_Name, 63)
	if (Type[0] == '+')
	{
		if (Time[0] == 's')
			g_time_s[cmd_target(id, Target)] += str_to_num(value)
		else if (Time[0] == 'm')
			g_time_m[cmd_target(id, Target)] += str_to_num(value)
		else if (Time[0] == 'h')
			g_time_h[cmd_target(id, Target)] += str_to_num(value)
	}
	else if (Type[0] == '=')
	{
		if (Time[0] == 's')
			g_time_s[cmd_target(id, Target)] = str_to_num(value)
		else if (Time[0] == 'm')
			g_time_m[cmd_target(id, Target)] = str_to_num(value)
		else if (Time[0] == 'h')
			g_time_h[cmd_target(id, Target)] = str_to_num(value)
	}
	else if (Type[0] == '-')
	{
		if (Time[0] == 's')
			g_time_s[cmd_target(id, Target)] -= str_to_num(value)
		else if (Time[0] == 'm')
			g_time_m[cmd_target(id, Target)] -= str_to_num(value)
		else if (Time[0] == 'h')
			g_time_h[cmd_target(id, Target)] -= str_to_num(value)
	}
	if (str_to_num(Say))
		client_printcolor(0, "^x04[自我現實: 管理員%s /ctr%s ^x04遊玩時間的 /ctr%s ^x04到 /ctr%d^x04]", Type[0] == '+' ? "增加" : Type[0] == '=' ? "調整" : "減少", Target_Name,
		Time[0] == 's' ? "秒" : Time[0] == 'm' ? "分鐘" : "小時", Time[0] == 's' ? g_time_s[cmd_target(id, Target)] : Time[0] == 'm' ? g_time_m[cmd_target(id, Target)] : g_time_h[cmd_target(id, Target)])
	else
		client_printcolor(id, "^x04[自我現實: 你%s /ctr%s ^x04遊玩時間的 /ctr%s ^x04到 /ctr%d^x04]", Type[0] == '+' ? "增加" : Type[0] == '=' ? "調整" : "減少", Target_Name,
		Time[0] == 's' ? "秒" : Time[0] == 'm' ? "分鐘" : "小時", Time[0] == 's' ? g_time_s[cmd_target(id, Target)] : Time[0] == 'm' ? g_time_m[cmd_target(id, Target)] : g_time_h[cmd_target(id, Target)])

	return PLUGIN_HANDLED;
}
public cmd_set_lmoney(id, level, cid)
{
	if (!cmd_access(id, level, cid, 5))
		return PLUGIN_HANDLED;

	new Target[64], Target_Name[64], Type[64], value[64], Say[64]
	read_argv(1, Target, 63)
	read_argv(2, Type, 63)
	read_argv(3, value, 63)
	read_argv(4, Say, 63)
	if (equal(Target, "0"))
	{
		new iNum, iPlayers[32]
		get_players(iPlayers, iNum, "c")
		if (iNum < 1)
			return PLUGIN_HANDLED;

		for (new i = 0;i < iNum;i++)
		{
			if (Type[0] == '+')
				g_lmoney[iPlayers[i]] += str_to_num(value)
			else if (Type[0] == '=')
				g_lmoney[iPlayers[i]] = str_to_num(value)
			else if (Type[0] == '-')
				g_lmoney[iPlayers[i]] -= str_to_num(value)
		}
		if (str_to_num(Say))
			client_printcolor(0, "^x04[自我現實: 管理員%s所有人 /ctr%d ^x04L幣]", Type[0] == '+' ? "增加" : Type[0] == '=' ? "調整" : "減少", str_to_num(value))
		else
			client_printcolor(id, "^x04[自我現實: 你%s 所有人 /ctr%d ^x04L幣]", Type[0] == '+' ? "增加" : Type[0] == '=' ? "調整" : "減少", str_to_num(value))

		return PLUGIN_HANDLED;
	}
	if (!cmd_target(id, Target))
		return PLUGIN_HANDLED;

	get_user_name(cmd_target(id, Target), Target_Name, 63)
	change_name(Target_Name, 63)
	if (Type[0] == '+')
		g_lmoney[cmd_target(id, Target)] += str_to_num(value)
	else if (Type[0] == '=')
		g_lmoney[cmd_target(id, Target)] = str_to_num(value)
	else if (Type[0] == '-')
		g_lmoney[cmd_target(id, Target)] -= str_to_num(value)

	if (str_to_num(Say))
		client_printcolor(0, "^x04[自我現實: 管理員%s /ctr%s ^x04的L幣到 /ctr%d^x04]", Type[0] == '+' ? "增加" : Type[0] == '=' ? "調整" : "減少", Target_Name, g_lmoney[cmd_target(id, Target)])
	else
		client_printcolor(id, "^x04[自我現實: 你%s /ctr%s ^x04的L幣到 /ctr%d^x04]", Type[0] == '+' ? "增加" : Type[0] == '=' ? "調整" : "減少", Target_Name, g_lmoney[cmd_target(id, Target)])

	return PLUGIN_HANDLED;
}
public fw_EmitSound(id, channel, const sample[], Float:volume, Float:attn, flags, pitch)
{
	if (sample[0] == 'h' && sample[1] == 'o' && sample[2] == 's' && sample[3] == 't' && sample[4] == 'a' && sample[5] == 'g' && sample[6] == 'e')
		return FMRES_SUPERCEDE;

	if (!(1 <= id <= get_maxplayers() && is_user_connected(id)) || !g_Boss[id])
		return FMRES_IGNORED;

	static sound[64]
	if (sample[7] == 'b' && sample[8] == 'h' && sample[9] == 'i' && sample[10] == 't')
	{
		switch(random_num(0, 3))
		{
			case 0: formatex(sound, 63, "lie_zombie/pain_01.wav")
			case 1: formatex(sound, 63, "lie_zombie/pain_02.wav")
			case 2: formatex(sound, 63, "lie_zombie/pain_03.wav")
			case 3: formatex(sound, 63, "lie_zombie/pain_04.wav")
		}
		emit_sound(id, channel, sound, volume, attn, flags, pitch)
		return FMRES_SUPERCEDE;
	}
	return FMRES_IGNORED;
}
public fw_TouchWeapon(weapon, id)
{
	if (!is_user_alive(id) || !pev_valid(weapon))
		return HAM_SUPERCEDE;

	new EntClassName[64]
	pev(weapon, pev_classname, EntClassName, 63)
	if (equal(EntClassName, "weaponbox") && g_Boss[id])
		return HAM_SUPERCEDE;

	if (equal(EntClassName, "armoury_entity") && g_Boss[id])
		return HAM_SUPERCEDE;

	if (equal(EntClassName, "weapon_shield") && g_Boss[id])
		return HAM_SUPERCEDE;

	return HAM_IGNORED;
}
public fw_Item_Deploy_Post(weapon_ent)
{
	static owner, weaponid
	owner = fm_cs_get_weapon_ent_owner(weapon_ent)
	weaponid = cs_get_weapon_id(weapon_ent)
	g_currentweapon[owner] = weaponid
	replace_weapon_models(owner, weaponid)
	if (g_Boss[owner] && !((1<<weaponid) & (1<<CSW_KNIFE)))
	{
		g_currentweapon[owner] = CSW_KNIFE
		engclient_cmd(owner, "weapon_knife")
	}
}
public fw_PrecacheSound(const sound[])
{
	if (equal(sound, "hostage", 7))
		return FMRES_SUPERCEDE

	return FMRES_IGNORED
}
public fw_ClientDisconnect(id)
	remove_task(id+1249)

public fw_PlayerPreThink(id)
{
	if (!is_user_connected(id))
		return;

	new ping, loss
	get_user_ping(id, ping, loss)
	if (ping >= 1000)
		user_level_up(id, UP_PING_TO_1000)

	if (g_money[id] >= 77)
		user_level_up(id, UP_MONEY_77)

	if (g_money[id] >= 777)
		user_level_up(id, UP_MONEY_777)

	if (g_money[id] >= 7777)
		user_level_up(id, UP_MONEY_7777)

	if (g_money[id] >= 77777)
		user_level_up(id, UP_MONEY_77777)

	if (g_money[id] >= 777777)
		user_level_up(id, UP_MONEY_777777)

	if (!is_user_alive(id))
		return;

	if (get_user_health(id) >= 256)
	{
		if (get_user_health(id) % 256 == 0)
		{
			set_user_health(id, get_user_health(id) + 1)
		}
	}
	if ((pev(id, pev_flags) & FL_ONGROUND))
	{
		if (g_sBoss_in_charge[id])
		{
			g_sBoss_in_charge[id] = false
			set_task(0.2, "close_boss_charge", id)
		}
	}
	if (cs_get_user_team(id) == CS_TEAM_SPECTATOR && spec_mode[id])
		entity_set_int(id, EV_INT_solid, SOLID_NOT)

	if (g_Boss[id])
	{
		if (!g_sBoss_laser_mode[id] && !in_low_zone(id) && !in_high_zone(id))
		{
			if (get_user_hit(id) && get_gametime() - get_user_hittime(id) <= 3.0)
			{
				if (pev(id, pev_flags) & FL_ONGROUND)
					set_pev(id, pev_gravity, 999999.9)
				else
					set_pev(id, pev_gravity, 0.000001)

				set_pev(id, pev_velocity, Float:{0.0, 0.0, 0.0})
				set_pev(id, pev_maxspeed, 1.0)
			}
			else if (g_Boss_Speed[id])
				set_pev(id, pev_maxspeed, 450.0)
			else
				set_pev(id, pev_maxspeed, 350.0)
		}
		else if (in_high_zone(id) && !in_low_zone(id))
			set_pev(id, pev_maxspeed, 1.0)
		else if (in_low_zone(id) && in_high_zone(id))
		{
			user_silentkill(id)
			client_printcolor(id, "^x04[自我現實: 你被空間扭曲致死了]")
		}
		else
			set_pev(id, pev_maxspeed, 250.0)

		if (!(get_user_hit(id) && get_gametime() - get_user_hittime(id) <= 3.0) && !in_low_zone(id) && !in_high_zone(id))
			set_pev(id, pev_gravity, 0.7)
		else if (in_low_zone(id) && !in_high_zone(id))
			set_pev(id, pev_gravity, 0.000001)
		else if (in_high_zone(id) && !in_low_zone(id))
			set_pev(id, pev_gravity, 999999.9)
		else if (in_low_zone(id) && in_high_zone(id))
		{
			user_silentkill(id)
			client_printcolor(id, "^x04[自我現實: 你被空間扭曲致死了]")
		}
		drop_weapons(id, 1)
		drop_weapons(id, 2)
		replace_weapon_models(id, CSW_KNIFE)
		if (!g_Randromized)
		{
			if (g_sBoss[id])
			{
				if (pev(id, pev_health) <= 1000.0)
				{
					if (!g_sBoss_laser_mode[id])
					{
						if (!g_sBoss_never_laser_mode[id] && !g_Randromized)
						{
							left_time = 60
							g_sBoss_never_laser_mode[id] = true
							g_sBoss_laser_mode[id] = true
							strip_user_weapons(id)
							set_user_godmode(id, 1)
							set_pev(id, pev_health, 1000.0)
							set_task(1.0, "Laser_Mode_CD")
							set_task(1.0, "Make_Space")
							set_task(64.0, "close_godmode", id)
							set_task(64.0, "close_laser_mode", id)
							client_printcolor(0, "^x04[自我現實: 魔王正在進行瀕死的攻擊]")
						}
					}
					else
					{
						if (get_gametime() - g_next_laser[id] >= 0.15)
						{
							fire_laser(id)
							g_next_laser[id] = get_gametime()
						}
					}
				}
				if (!g_sBoss_laser_mode[id] && !g_sBoss_never_laser_mode[id] && g_sBoss_stat[id] == 2 && !g_sBoss_cd[id])
				{
					new i, iPlayers[32], iNum, iPlayer
					get_players(iPlayers, iNum, "c")
					for (i = 0;i < iNum;i++)
					{
						iPlayer = iPlayers[i]
						if (is_user_alive(iPlayer) && iPlayer != id)
						{
							if (!g_light_hit[iPlayer] && cs_get_user_team(iPlayer) != CS_TEAM_SPECTATOR)
							{
								if (entity_range(iPlayer, id) <= 240.0)
								{
									if (pev(iPlayer, pev_health) > 10)
									{
										new Origin[3]
										get_user_origin(iPlayer, Origin)
										rock_damage(iPlayer, 10, Origin, DMG_BLAST)
									}
									else
										log_kill(id, iPlayer, "Boss Light", 0)

									g_light_hit[iPlayer] = true
									set_task(0.8, "close_light_hit", iPlayer)
								}
								if (get_gametime() - g_next_light[id] >= 0.8)
								{
									Beacon_Effect(id)
									g_next_light[id] = get_gametime()
								}
							}
						}
					}
				}
			}
			if (g_Boss[id] && !g_sBoss[id] && !g_oBoss[id] && !g_BugBoss[id])
			{
				if (pev(id, pev_health) <= 1000.0)
				{
					if (!g_has_randomed)
					{
						g_has_randomed = true
						if (random_num(1, 100) <= 50)
						{
							create_oberon(id)
						}
					}
				}
			}
		}
		if (g_Boss[id] && g_oBoss[id] && oberon_control[id] && !g_sBoss[id])
		{
			if (camera[id])
			{
				new Float:iOrigin[3], Float:CamOrigin[3], Float:v_angle[3], Float:angles[3]
				entity_get_vector(id, EV_VEC_origin, iOrigin)
				entity_get_vector(id, EV_VEC_angles, angles)
				entity_get_vector(id, EV_VEC_v_angle, v_angle)
				for (new Float:i = 200.0;i >= 0.0;i -= 0.1)
				{
					CamOrigin[0] = floatcos(v_angle[1], degrees) * -i
					CamOrigin[1] = floatsin(v_angle[1], degrees) * -i
					CamOrigin[2] = i - (i / 4)
					CamOrigin[0] += iOrigin[0]
					CamOrigin[1] += iOrigin[1]
					CamOrigin[2] += iOrigin[2]
					if (PointContents(CamOrigin) != CONTENTS_SOLID && PointContents(CamOrigin) != CONTENTS_SKY)
						break;
				}
				entity_set_origin(camera[id], CamOrigin)
				entity_set_vector(camera[id], EV_VEC_angles, v_angle)
				entity_set_vector(camera[id], EV_VEC_v_angle, v_angle)
			}
			if (!g_victim[id])
			{
				g_victim[id] = FindClosestEnemy(oberon_control[id])
				if (target_ent[id])
				{
					remove_entity(target_ent[id])
					target_ent[id] = 0;
				}
			}
			if (g_victim[id] && !can_see_fm(oberon_control[id], g_victim[id]))
				g_victim[id] = 0

			if (g_victim[id] && !is_user_alive(g_victim[id]))
				g_victim[id] = 0

			if (g_victim[id])
			{
				get_origin_int(id, start[id])
				get_origin_int(g_victim[id], stop[id])
				if (!target_ent[id])
					create_target_spr(id, g_victim[id])
			}
			new Float:Ent_Origin[3]
			entity_get_vector(oberon_control[id], EV_VEC_origin, Ent_Origin)
			new buttons = get_user_button(id)
			if (buttons & IN_FORWARD && can_move[id])
			{
				new Float:flAngles[3], Float:Direction[3], Float:ConAngles[3], Float:NewOrigin[3]
				pev(id, pev_angles, flAngles)
				entity_set_int(oberon_control[id], EV_INT_movetype, MOVETYPE_PUSHSTEP)
				ConAngles[0] = 0.0
				ConAngles[1] = flAngles[1]
				ConAngles[2] = flAngles[2]
				if (buttons & IN_MOVERIGHT)
					ConAngles[1] -= 45.0

				if (buttons & IN_MOVELEFT)
					ConAngles[1] += 45.0

				entity_set_vector(oberon_control[id], EV_VEC_angles, ConAngles)
				angle_vector(ConAngles, ANGLEVECTOR_FORWARD, Direction)
				xs_vec_mul_scalar(Direction, 300.0, Direction)
				for (new Float:iAngle = ConAngles[1] - 60.0;iAngle <= ConAngles[1] + 60.0;iAngle += 10.0)
				{
					for (new Float:i = 0.0;i <= maxs[oberon_control[id]][0] + 1.0;i += 1.0)
					{
						NewOrigin[0] = floatcos(iAngle, degrees) * i
						NewOrigin[1] = floatsin(iAngle, degrees) * i
						NewOrigin[0] += Ent_Origin[0]
						NewOrigin[1] += Ent_Origin[1]
						NewOrigin[2] = Ent_Origin[2] + mins[oberon_control[id]][2]
						if (PointContents(NewOrigin) == CONTENTS_SOLID && i >= maxs[oberon_control[id]][0])
						{
							for (new Float:i2 = 0.0;i2 <= 36.0;i2 += 1.0)
							{
								NewOrigin[2] += i2
								if (PointContents(NewOrigin) != CONTENTS_SOLID)
								{
									NewOrigin[0] = Ent_Origin[0]
									NewOrigin[1] = Ent_Origin[1]
									NewOrigin[2] += -mins[oberon_control[id]][2]
									entity_set_origin(oberon_control[id], NewOrigin)
									break;
								}
								else
									NewOrigin[2] -= i2
							}
							break;
						}
					}
				}
				new Float:z_speed[3]
				entity_get_vector(oberon_control[id], EV_VEC_velocity, z_speed)
				Direction[2] = z_speed[2]
				entity_set_vector(oberon_control[id], EV_VEC_velocity, Direction)
				if (get_anim(oberon_control[id]) != 3)
					play_anim(oberon_control[id], 3, 1.0)

				entity_set_float(oberon_control[id], EV_FL_framerate, 1.0)
			}
			else if (buttons & IN_BACK && can_move[id])
			{
				new Float:flAngles[3], Float:Direction[3], Float:ConAngles[3]
				pev(id, pev_angles, flAngles)
				entity_set_int(oberon_control[id], EV_INT_movetype, MOVETYPE_PUSHSTEP)
				ConAngles[0] = 0.0
				ConAngles[1] = flAngles[1]
				ConAngles[2] = flAngles[2]
				if (buttons & IN_MOVERIGHT)
					ConAngles[1] += 45.0

				if (buttons & IN_MOVELEFT)
					ConAngles[1] -= 45.0

				entity_set_vector(oberon_control[id], EV_VEC_angles, ConAngles)
				angle_vector(ConAngles, ANGLEVECTOR_FORWARD, Direction)
				xs_vec_mul_scalar(Direction, -300.0, Direction)
				new Float:NewOrigin[3];
				for (new Float:iAngle = ConAngles[1] - 60.0;iAngle <= ConAngles[1] + 60.0;iAngle += 10.0)
				{
					for (new Float:i = 0.0;i <= maxs[oberon_control[id]][0] + 1.0;i += 1.0)
					{
						NewOrigin[0] = floatcos(iAngle, degrees) * -i
						NewOrigin[1] = floatsin(iAngle, degrees) * -i
						NewOrigin[0] += Ent_Origin[0]
						NewOrigin[1] += Ent_Origin[1]
						NewOrigin[2] = Ent_Origin[2] + mins[oberon_control[id]][2]
						if (PointContents(NewOrigin) == CONTENTS_SOLID && i >= maxs[oberon_control[id]][0])
						{
							for (new Float:i2 = 0.0;i2 <= 36.0;i2 += 1.0)
							{
								NewOrigin[2] += i2
								if (PointContents(NewOrigin) != CONTENTS_SOLID)
								{
									NewOrigin[0] = Ent_Origin[0]
									NewOrigin[1] = Ent_Origin[1]
									NewOrigin[2] += -mins[oberon_control[id]][2]
									entity_set_origin(oberon_control[id], NewOrigin)
									break;
								}
								else
									NewOrigin[2] -= i2
							}
							break;
						}
					}
				}
				new Float:z_speed[3]
				entity_get_vector(oberon_control[id], EV_VEC_velocity, z_speed)
				Direction[2] = z_speed[2]
				entity_set_vector(oberon_control[id], EV_VEC_velocity, Direction)
				if (get_anim(oberon_control[id]) != 3)
					play_anim(oberon_control[id], 3, 1.0)

				entity_set_float(oberon_control[id], EV_FL_framerate, -1.0)
			}
			else if (buttons & IN_MOVERIGHT && can_move[id])
			{
				new Float:flAngles[3], Float:Direction[3], Float:ConAngles[3];
				pev(id, pev_angles, flAngles)
				entity_set_int(oberon_control[id], EV_INT_movetype, MOVETYPE_PUSHSTEP)
				ConAngles[0] = 0.0
				ConAngles[1] = flAngles[1] - 90
				ConAngles[2] = flAngles[2]
				entity_set_vector(oberon_control[id], EV_VEC_angles, ConAngles)
				angle_vector(ConAngles, ANGLEVECTOR_FORWARD, Direction)
				xs_vec_mul_scalar(Direction, 300.0, Direction)
				new Float:NewOrigin[3]
				for (new Float:iAngle = ConAngles[1] - 60.0;iAngle <= ConAngles[1] + 60.0;iAngle += 10.0)
				{
					for (new Float:i = 0.0;i <= maxs[oberon_control[id]][0] + 1.0;i += 1.0)
					{
						NewOrigin[0] = floatcos(iAngle, degrees) * i
						NewOrigin[1] = floatsin(iAngle, degrees) * i
						NewOrigin[0] += Ent_Origin[0]
						NewOrigin[1] += Ent_Origin[1]
						NewOrigin[2] = Ent_Origin[2] + mins[oberon_control[id]][2]
						if (PointContents(NewOrigin) == CONTENTS_SOLID && i >= maxs[oberon_control[id]][0])
						{
							for (new Float:i2 = 0.0;i2 <= 36.0;i2 += 1.0)
							{
								NewOrigin[2] += i2
								if (PointContents(NewOrigin) != CONTENTS_SOLID)
								{
									NewOrigin[0] = Ent_Origin[0]
									NewOrigin[1] = Ent_Origin[1]
									NewOrigin[2] += -mins[oberon_control[id]][2]
									entity_set_origin(oberon_control[id], NewOrigin)
									break;
								}
								else
									NewOrigin[2] -= i2
							}
							break;
						}
					}
				}
				new Float:z_speed[3]
				entity_get_vector(oberon_control[id], EV_VEC_velocity, z_speed)
				Direction[2] = z_speed[2]
				entity_set_vector(oberon_control[id], EV_VEC_velocity, Direction)
				if (get_anim(oberon_control[id]) != 3)
					play_anim(oberon_control[id], 3, 1.0)

				entity_set_float(oberon_control[id], EV_FL_framerate, 1.0)
			}
			else if (buttons & IN_MOVELEFT && can_move[id])
			{
				new Float:flAngles[3], Float:Direction[3], Float:ConAngles[3], Float:NewOrigin[3]
				pev(id, pev_angles, flAngles)
				entity_set_int(oberon_control[id], EV_INT_movetype, MOVETYPE_PUSHSTEP)
				ConAngles[0] = 0.0
				ConAngles[1] = flAngles[1] + 90
				ConAngles[2] = flAngles[2]
				entity_set_vector(oberon_control[id], EV_VEC_angles, ConAngles)
				angle_vector(ConAngles, ANGLEVECTOR_FORWARD, Direction)
				xs_vec_mul_scalar(Direction, 300.0, Direction)
				for (new Float:iAngle = ConAngles[1] - 60.0;iAngle <= ConAngles[1] + 60.0;iAngle += 10.0)
				{
					for (new Float:i = 0.0;i <= maxs[oberon_control[id]][0] + 1.0;i += 1.0)
					{
						NewOrigin[0] = floatcos(iAngle, degrees) * i
						NewOrigin[1] = floatsin(iAngle, degrees) * i
						NewOrigin[0] += Ent_Origin[0]
						NewOrigin[1] += Ent_Origin[1]
						NewOrigin[2] = Ent_Origin[2] + mins[oberon_control[id]][2]
						if (PointContents(NewOrigin) == CONTENTS_SOLID && i >= maxs[oberon_control[id]][0])
						{
							for (new Float:i2 = 0.0;i2 <= 36.0;i2 += 1.0)
							{
								NewOrigin[2] += i2
								if (PointContents(NewOrigin) != CONTENTS_SOLID)
								{
									NewOrigin[0] = Ent_Origin[0]
									NewOrigin[1] = Ent_Origin[1]
									NewOrigin[2] += -mins[oberon_control[id]][2]
									entity_set_origin(oberon_control[id], NewOrigin)
									break;
								}
								else
									NewOrigin[2] -= i2
							}
							break;
						}
					}
				}
				new Float:z_speed[3]
				entity_get_vector(oberon_control[id], EV_VEC_velocity, z_speed)
				Direction[2] = z_speed[2]
				entity_set_vector(oberon_control[id], EV_VEC_velocity, Direction)
				if (get_anim(oberon_control[id]) != 3)
					play_anim(oberon_control[id], 3, 1.0)

				entity_set_float(oberon_control[id], EV_FL_framerate, 1.0)
			}
			else if (can_move[id])
			{
				new Float:flAngles[3], Float:ConAngles[3]
				pev(id, pev_angles, flAngles)
				ConAngles[0] = 0.0
				ConAngles[1] = flAngles[1]
				ConAngles[2] = flAngles[2]
				entity_set_vector(oberon_control[id], EV_VEC_angles, ConAngles)
				if (get_anim(oberon_control[id]) != 2)
					play_anim(oberon_control[id], 2, 1.0)
			}
			if (buttons & IN_ATTACK && can_move[id])
			{
				new Float:flAngles[3], Float:ConAngles[3];
				pev(id, pev_angles, flAngles)
				ConAngles[0] = 0.0
				ConAngles[1] = flAngles[1]
				ConAngles[2] = flAngles[2]
				entity_set_vector(oberon_control[id], EV_VEC_angles, ConAngles)
				light_attack(oberon_control[id])
				can_move[id] = false
				set_task(2.0, "can_move_again", id)
			}
			if (buttons & IN_ATTACK2 && can_move[id])
			{
				new Float:flAngles[3], Float:ConAngles[3];
				pev(id, pev_angles, flAngles)
				ConAngles[0] = 0.0
				ConAngles[1] = flAngles[1]
				ConAngles[2] = flAngles[2]
				entity_set_vector(oberon_control[id], EV_VEC_angles, ConAngles)
				heavy_attack(oberon_control[id])
				can_move[id] = false
				set_task(2.7, "can_move_again", id)
			}
			if (buttons & IN_USE && can_move[id])
			{
				new Float:flAngles[3], Float:ConAngles[3]
				pev(id, pev_angles, flAngles)
				ConAngles[0] = 0.0
				ConAngles[1] = flAngles[1]
				ConAngles[2] = flAngles[2]
				entity_set_vector(oberon_control[id], EV_VEC_angles, ConAngles)
				emit_sound(oberon_control[id], CHAN_VOICE, oberon_bw_sound, 1.0, ATTN_NORM, 0, PITCH_NORM)
				play_anim(oberon_control[id], 8, 1.0)
				set_task(0.5, "oberon_jump", oberon_control[id])
				set_task(2.0, "oberon_bw_deploy", oberon_control[id])
				set_task(2.0, "oberon_land", oberon_control[id])
				can_move[id] = false
				set_task(4.0, "can_move_again", id)
			}
			if (buttons & IN_RELOAD && can_move[id] && has_bombs[oberon_control[id]])
			{
				new Float:flAngles[3], Float:ConAngles[3], Float:Direction[3], Float:Dir[3]
				pev(id, pev_angles, flAngles)
				ConAngles[0] = 0.0
				ConAngles[1] = flAngles[1]
				ConAngles[2] = flAngles[2]
				entity_set_vector(oberon_control[id], EV_VEC_angles, ConAngles)
				new ent2 = create_entity("info_target")
				entity_set_origin(ent2, Ent_Origin)
				entity_set_int(ent2, EV_INT_movetype, MOVETYPE_NOCLIP)
				entity_set_edict(ent2, EV_ENT_owner, id)
				angle_vector(flAngles, ANGLEVECTOR_FORWARD, Direction)
				xs_vec_mul_scalar(Direction, 1.0, Direction)
				entity_set_vector(oberon_control[id], EV_VEC_velocity, Direction)
				xs_vec_mul_scalar(Direction, 125.0, Dir)
				entity_set_vector(ent2, EV_VEC_velocity, Dir)
				set_task(1.0, "stop_movement", ent2)
				maxs[oberon_control[id]][2] = 36.0;
				entity_set_size(oberon_control[id], mins[oberon_control[id]], maxs[oberon_control[id]])
				entity_set_float(oberon_control[id], EV_FL_takedamage, 0.0)
				Util_SetRendering(oberon_control[id], kRenderFxGlowShell, {255.0, 0.0, 0.0}, kRenderNormal, 20.0)
				emit_sound(oberon_control[id], CHAN_VOICE, oberon_h_attack_sound, 1.0, ATTN_NORM, 0, PITCH_NORM)
				play_anim(oberon_control[id], 9, 1.0)
				has_bombs[oberon_control[id]] = false;
				set_task(3.0, "oberon_bomb", ent2)
				set_task(6.0, "oberon_bomb", ent2)
				set_task(9.0, "oberon_bomb2", ent2)
				set_task(12.0, "oberon_bomb", ent2)
				set_task(15.0, "oberon_bomb", ent2)
				set_task(18.0, "oberon_bomb", ent2)
				set_task(20.2, "remove_this_ent", ent2)
				set_task(20.2, "remove_shield", oberon_control[id])
				set_task(45.2, "bomb_cooldown", oberon_control[id])
				set_task(20.2, "can_move_again", id)
				can_move[id] = false
			}
			if (buttons & IN_JUMP && g_victim[id] && can_switch[id])
			{
				for (new i = g_victim[id] + 1;i != g_victim[id];i++)
				{
					if (i > get_maxplayers())
						i = 0

					if (!is_user_alive(i))
						continue;

					new Float:takedmg = entity_get_float(i, EV_FL_takedamage)
					if (can_see_fm(oberon_control[id], i) && takedmg)
					{
						if (target_ent[id])
						{
							remove_entity(target_ent[id])
							target_ent[id] = 0
						}
						g_victim[id] = i
						can_switch[id] = false
						break;
					}
				}
			}
			if (!(buttons & IN_JUMP))
				can_switch[id] = true

			entity_set_float(oberon_control[id], EV_FL_gravity, 1.0)
			entity_set_origin(id, Ent_Origin)
			Util_SetRendering(id, kRenderFxGlowShell, {0.0, 0.0, 0.0}, kRenderTransAlpha, 0.0)
		}
	}
	else
	{
		new Float:value
		if ((get_user_m24(id) && get_user_weapon(id) == CSW_SCOUT) || get_user_weapon(id) == CSW_SCOUT)
			value = 260.0
		else if ((get_user_mg3(id) && get_user_weapon(id) == CSW_M249) || get_user_weapon(id) == CSW_M249)
			value = 220.0
		else if ((get_user_f2000(id) && get_user_weapon(id) == CSW_SG552) || (get_user_k1ases(id) && get_user_weapon(id) == CSW_GALIL) || get_user_weapon(id) == CSW_AUG ||
		 get_user_weapon(id) == CSW_XM1014 || get_user_weapon(id) == CSW_FAMAS || get_user_weapon(id) == CSW_GALIL)
			value = 240.0
		else if ((get_user_wa2000(id) && get_user_weapon(id) == CSW_G3SG1) || get_user_weapon(id) == CSW_SG550 || get_user_weapon(id) == CSW_AWP || get_user_weapon(id) == CSW_G3SG1)
			value = 210.0
		else if ((get_user_thompson(id) && get_user_weapon(id) == CSW_P90) || get_user_weapon(id) == CSW_P90)
			value = 245.0
		else if (get_user_weapon(id) == CSW_P228 || get_user_weapon(id) == CSW_HEGRENADE || get_user_weapon(id) == CSW_MAC10 || get_user_weapon(id) == CSW_SMOKEGRENADE ||
		get_user_weapon(id) == CSW_ELITE || get_user_weapon(id) == CSW_FIVESEVEN || get_user_weapon(id) == CSW_UMP45 || get_user_weapon(id) == CSW_USP || get_user_weapon(id) == CSW_GLOCK18 ||
		get_user_weapon(id) == CSW_MP5NAVY || get_user_weapon(id) == CSW_TMP || get_user_weapon(id) == CSW_FLASHBANG || get_user_weapon(id) == CSW_DEAGLE || get_user_weapon(id) == CSW_KNIFE ||
		get_user_weapon(id) == CSW_C4)
			value = 250.0
		else if (get_user_weapon(id) == CSW_AK47)
			value = 221.0
		else if (get_user_weapon(id) == CSW_M3 || get_user_weapon(id) == CSW_M4A1)
			value = 230.0
		else if (get_user_weapon(id) == CSW_SG552)
			value = 235.0

		new Float:value2 = (g_usemodel[id] == 3 ? 0.3 : 0.0) + (g_usemodel[id] == 4 ? 0.1 : 0.0) + (g_usemodel[id] == 5 ? 0.3 : 0.0)
		if (get_using_skill(id, 1))
			value += float(get_skill_level(get_my_team(id), 3)) * 5.0
 
		if (!in_low_zone(id) && !in_high_zone(id))
		{
			set_pev(id, pev_gravity, 1.0 - value2)
			set_pev(id, pev_maxspeed, value + float(g_speed[id] * 2) + (g_usemodel[id] == 2 ? 30.0 : 0.0) + (g_usemodel[id] == 4 ? 15.0 : 0.0) + (g_usemodel[id] == 5 ? 30.0 : 0.0))
		}
		else if (in_low_zone(id) && !in_high_zone(id))
			set_pev(id, pev_gravity, 0.000001)
		else if (in_high_zone(id) && !in_low_zone(id))
		{
			set_pev(id, pev_maxspeed, 1.0)
			set_pev(id, pev_gravity, 999999.9)
		}
		else if (in_low_zone(id) && in_high_zone(id))
		{
			user_silentkill(id)
			client_printcolor(id, "^x04[自我現實: 你被空間扭曲致死了]")
		}
		if (user_has_weapon(id, CSW_HEGRENADE))
			user_level_up(id, UP_TAKE_GRENADE)

		if (g_vector_get && pev(id, pev_takedamage))
		{
			new Float:velocity[3]
			pev(id, pev_velocity, velocity)
			if (velocity[0] || velocity[1] || velocity[2])
			{
				new i, iPlayers[32], iNum, iPlayer
				get_players(iPlayers, iNum, "c")
				for (i = 0;i < iNum;i++)
				{
					iPlayer = iPlayers[i]
					if (g_Boss[iPlayer] && g_sBoss[iPlayer] && !g_Boss[id] && id != iPlayer && !g_BugBoss[iPlayer])
					{
						g_has_hurt[iPlayer] = true
						log_kill(iPlayer, id, "Boss Vector", 0)
					}
				}
			}
		}
	}
}
public fw_PlayerPostThink(id)
{
	if (!is_user_alive(id))
		return PLUGIN_CONTINUE;

	if (!g_Boss[id])
		return PLUGIN_CONTINUE;

	if (!g_Boss_Speed_cd[id] && !g_oBoss[id])
	{
		if (!g_Boss_Speed[id] && !g_sBoss_laser_mode[id] && !g_sBoss_never_laser_mode[id])
		{
			static button, oldbutton
			button = pev(id, pev_button)
			oldbutton = pev(id, pev_oldbuttons)
			if ((button & IN_USE) && (oldbutton & IN_USE))
			{
				if (!hit_key[id])
				{
					hit_key[id] = true
					g_Boss_Speed[id] = true
					g_Boss_Speed_cd[id] = true
					fm_set_rendering(id, kRenderFxGlowShell, 255, 0, 0, kRenderTransAlpha, 255)
					client_print(id, print_center, "你使用了加速")
					set_task(10.0, "speed_finish", id)
					set_task(25.0, "cooldown_finish", id)
				}
			}
			else
			{
				hit_key[id] = false
			}
		}
	}
	return PLUGIN_CONTINUE;
}
public fw_CmdStart(id, uc_handle, seed)
{
	if (!is_user_alive(id))
		return FMRES_IGNORED;

	if (get_uc(uc_handle, UC_Impulse) == 201 && !(get_user_flags(id) & ADMIN_CHAT) && !g_special[id])
	{
		client_print(id, print_center, "請勿在自己的現實中噴漆")
		set_uc(uc_handle, UC_Impulse, 0)
		return FMRES_IGNORED;
	}
	if (g_Randromized)
		return FMRES_IGNORED;

	static button, oldbutton
	button = get_uc(uc_handle, UC_Buttons)
	oldbutton = pev(id, pev_oldbuttons)
	if ((button & IN_RELOAD) && !(oldbutton & IN_RELOAD) && g_Boss[id] && g_sBoss[id])
	{
		if (!g_sBoss_cd[id] && !g_sBoss_laser_mode[id] && !g_sBoss_never_laser_mode[id])
		{
			if (g_sBoss_stat[id] == 4)
			{
				set_dhudmessage(0, 255, 0, -1.0, 0.2, 0, 6.0, 4.5, 0.5, 0.5)
				show_dhudmessage(0, "魔王使用了向量偵測^n如果5秒後還有向量運動者將會死亡")
				g_sBoss_cd[id] = true
				set_task(5.0, "Vector_Get")
				set_task(25.0, "Special_Boss_CD", id)
			}
			else if (g_sBoss_stat[id] == 3)
			{
				Throw_Rock(id)
				emit_sound(id, CHAN_VOICE, "weapons/Tank_Rock_RipUp.wav", VOL_NORM, ATTN_NORM, 0, PITCH_HIGH)
				g_sBoss_cd[id] = true
				set_task(20.0, "Special_Boss_CD", id)
			}
			else if (g_sBoss_stat[id] == 1)
			{
				if ((pev(id, pev_flags) & FL_ONGROUND))
				{
					new Float:velocity[3]
					velocity_by_aim(id, 1200, velocity)
					velocity[2] = 400.0
					set_pev(id, pev_velocity, velocity)
					g_sBoss_in_charge[id] = true
					g_sBoss_charge[id] = true
					g_sBoss_cd[id] = true
					set_task(15.0, "Special_Boss_CD", id)
				}
			}
			else if (g_sBoss_stat[id] == 0)
			{
				g_sBoss_cd[id] = true
				set_task(10.0, "Special_Boss_CD", id)
				SendWeaponAnim(id, 2)
				emit_sound(id, CHAN_WEAPON, "weapons/deimos_skill_start.wav", 1.0, ATTN_NORM, 0, PITCH_NORM)
				Shockwave(id)
			}
			else if (g_sBoss_stat[id] == 5)
			{
				g_sBoss_cd[id] = true
				set_task(15.0, "Special_Boss_CD", id)
				new Float:Porigin[3], Float:Torigin[3], Eorigin[3]
				entity_get_vector(id, EV_VEC_origin, Porigin)
				engfunc(EngFunc_MessageBegin, MSG_PVS, SVC_TEMPENTITY, Porigin, 0)
				write_byte(TE_BEAMCYLINDER)
				engfunc(EngFunc_WriteCoord, Porigin[0])
				engfunc(EngFunc_WriteCoord, Porigin[1])
				engfunc(EngFunc_WriteCoord, Porigin[2])
				engfunc(EngFunc_WriteCoord, Porigin[0])
				engfunc(EngFunc_WriteCoord, Porigin[1])
				engfunc(EngFunc_WriteCoord, Porigin[2] + 400.0)
				write_short(g_ringSpr)
				write_byte(0)
				write_byte(0)
				write_byte(3)
				write_byte(12)
				write_byte(0)
				write_byte(255)
				write_byte(90)
				write_byte(0)
				write_byte(255)
				write_byte(8)
				message_end()
				for(new enemy = 1;enemy <= get_maxplayers();enemy++)
				{
					if (is_user_alive(enemy) && id != enemy && !g_Boss[enemy] && is_user_connected(enemy))
					{
						get_user_origin(enemy, Eorigin)
						entity_get_vector(enemy, EV_VEC_origin, Torigin)
						if (get_distance_f(Porigin, Torigin) <= 400.0 && pev(enemy, pev_takedamage))
						{
							new damage = 50 + g_respawn[enemy] * 20
							if (damage >= 0)
							{
								client_cmd(enemy, "spk ^"garg/shockwave.wav^"")
								if (get_user_health(enemy) > damage)
								{
									screen_shake(enemy, 4, 2, 10)
									stop_fire(enemy, 5.0)
									rock_damage(enemy, damage, Eorigin, DMG_BLAST)
								}
								else
									log_kill(id, enemy, "Boss Warcry", 0)
							}
						}
					}
				}
			}
		}
	}
	else if ((button & IN_RELOAD) && !(oldbutton & IN_RELOAD) && g_Boss[id] && !g_sBoss[id] && !g_oBoss[id])
	{
		if (!g_Boss_cd[id])
		{
			set_dhudmessage(0, 255, 0, -1.0, 0.2, 0, 6.0, 4.5, 0.5, 0.5)
			show_dhudmessage(0, "魔王使用了傷害吸收^n5秒內對他造成的傷害會轉換為他的血量")
			g_Boss_cd[id] = true
			g_get_damage[id] = true
			set_task(5.0, "close_get_damage", id)
			set_task(25.0, "Boss_CD", id)
		}
	}
	return FMRES_IGNORED;
}
public fw_WeapPriAttack(weapon)
{
	if (!pev_valid(weapon))
		return HAM_IGNORED;

	static owner
	owner = pev(weapon, pev_owner)
	g_has_fire[owner] = true
	if (get_pdata_int(weapon, 43, 4) != CSW_KNIFE)
		g_fire_num[owner]++

	return HAM_IGNORED;
}
public fw_PlayerSpawn(id)
{
	if (!get_user_login(id))
		task_reg_menu(id)

	if (!is_user_alive(id))
		return;

	g_has_choose[id] = false
	g_has_choosep[id] = false
	g_next_laser[id] = 0.0
	g_next_light[id] = 0.0
	g_light_hit[id] = false
	g_Boss_cd[id] = false
	g_usemodel[id] = 0
	g_sBoss_charge[id] = false
	g_sBoss_in_charge[id] = false
	g_sBoss_charge_hit[id] = false
	g_sBoss_cd[id] = false
	g_get_damage[id] = false
	g_get_damage_value[id] = 0
	g_sBoss_laser_mode[id] = false
	g_sBoss_never_laser_mode[id] = false
	can_space[id] = true
	remove_tank_effect(id)
	if (cs_get_user_team(id) == CS_TEAM_T)
	{
		if (!g_Boss[id])
		{
			cs_set_user_team(id, CS_TEAM_CT)
			ExecuteHamB(Ham_CS_RoundRespawn, id)
		}
	}
	strip_user_weapons(id)
	if (g_Boss[id])
	{
		set_pev(id, pev_health, 300000.0 + float(400 * g_health[id]))
		g_BugBoss[id] = false
		set_pdata_int(id, 491, engfunc(EngFunc_PrecacheModel, "models/player/LieMonster/LieMonster.mdl"), 5)
		cs_set_player_model(id, "LieMonster")
		fm_set_rendering(id)
	}
	else
	{
		cs_reset_player_model(id)
		if (cs_get_user_team(id) == CS_TEAM_SPECTATOR && spec_mode[id])
			cs_set_player_model(id, "MaMay")

		fm_set_rendering(id)
		g_usemodel[id] = 0
		set_pev(id, pev_health, 100.0 + float(4 * g_health[id]))
		set_task(0.2, "show_menu_choose", id)
		if (g_level[id] < 5)
			fm_give_item(id, "weapon_usp")
	}
	set_task(0.4, "task_hide_money", id)
	cs_set_user_nvg(id, 1)
	fm_give_item(id, "weapon_knife")
	static weapon_ent
	weapon_ent = fm_cs_get_current_weapon_ent(id)
	if (pev_valid(weapon_ent))
		replace_weapon_models(id, cs_get_weapon_id(weapon_ent))

	if (cs_get_user_team(id) == CS_TEAM_SPECTATOR)
		entity_set_float(id, EV_FL_takedamage, 0.0)
	else
		entity_set_float(id, EV_FL_takedamage, 1.0)
}
public fw_TraceAttack(victim, attacker, Float:damage, Float:direction[3], tracehandle, damage_type)
{
	if (damage_type & (1<<24) && victim == attacker)
		return HAM_SUPERCEDE;

	if (!(1 <= attacker <= get_maxplayers() && is_user_connected(attacker)))
		return HAM_IGNORED;

	if (g_Starting || get_user_godmode(victim) || !pev(victim, pev_takedamage) || cs_get_user_team(attacker) == CS_TEAM_SPECTATOR)
		return HAM_SUPERCEDE;

	return HAM_IGNORED;
}
public fw_TakeDamage(victim, inflictor, attacker, Float:damage, damage_type)
{
	if (damage_type & (1<<24) && victim == attacker)
		return HAM_SUPERCEDE;

	if (!(1 <= attacker <= get_maxplayers() && is_user_connected(attacker)))
		return HAM_IGNORED;

	if (g_Starting || get_user_godmode(victim) || !pev(victim, pev_takedamage) || cs_get_user_team(attacker) == CS_TEAM_SPECTATOR)
		return HAM_SUPERCEDE;

	static use_weapon, hitzone
	if (cs_get_user_team(attacker) != cs_get_user_team(victim))
	{
		if (g_Boss[attacker])
		{
			if (!g_sBoss[attacker] && !g_oBoss[attacker])
			{
				if (is_user_alive(victim))
				{
					if (random_num(1, 100) <= g_lucky[victim] * 0.6 - 5)
					{
						client_printcolor(victim, "^x04[自我現實: 你發動了 /ctr無敵^x04]")
						client_printcolor(attacker, "^x04[自我現實: 敵人發動了 /ctr無敵^x04]")
						g_lucky_num[victim]++
						set_user_godmode(victim, 1)
						set_task(3.0, "close_godmode", victim)
						if (g_lucky_num[victim] >= 2)
							user_level_up(victim, UP_LUCKY_GOD2)

						if (g_lucky_num[victim] >= 3)
							user_level_up(victim, UP_LUCKY_GOD3)

						return HAM_SUPERCEDE;
					}
				}
			}
			else if (g_sBoss[attacker])
			{
				if (is_user_alive(victim))
				{
					if (random_num(1, 100) <= 50)
					{
						if (random_num(1, 100) <= g_lucky[victim] * 0.6 - 5)
						{
							set_dhudmessage(255, 20, 20, -1.0, 0.17, 1, 0.0, 5.0, 1.0, 1.0)
							show_dhudmessage(0, "特殊魔王的一擊必殺被擋下了!!!")
							g_sp_boss_bedie_attack[victim]++
							if (g_sp_boss_bedie_attack[victim] >= 1)
								user_level_up(victim, UP_SP_BOSS_BEDIE_ATTACK)

							if (g_sp_boss_bedie_attack[victim] >= 5)
								user_level_up(victim, UP_SP_BOSS_BEDIE_5ATTACK)

							return HAM_SUPERCEDE;
						}
						else
						{
							set_dhudmessage(255, 20, 20, -1.0, 0.17, 1, 0.0, 5.0, 1.0, 1.0)
							show_dhudmessage(0, "特殊魔王使用了一擊必殺!!!")
							g_sp_boss_bedie_kill[attacker]++
							if (g_sp_boss_bedie_kill[attacker] >= 10)
								user_level_up(attacker, UP_SP_BOSS_BEDIE_10KILL)

							if (g_sp_boss_bedie_kill[attacker] >= 20)
								user_level_up(attacker, UP_SP_BOSS_BEDIE_20KILL)

							if (g_sp_boss_bedie_kill[attacker] >= 30)
								user_level_up(attacker, UP_SP_BOSS_BEDIE_30KILL)

							if (is_user_in_target_back(attacker, victim))
								user_level_up(victim, UP_BOSS_ATTACK_BACK)

							if (get_user_curse(victim))
							{
								if (get_user_health(attacker) > 2000)
								{
									new Origin[3]
									get_user_origin(attacker, Origin)
									rock_damage(attacker, 2000, Origin, DMG_BLAST)
								        client_cmd(attacker, "spk player/pl_die1.wav")
									set_hudmessage(255, 0, 0, 0.2, 0.6, 0, 0.0, 1.0, 0.0, 0.0, 1)
								        show_hudmessage(attacker, "你的攻擊有 2000 反射到你身上了")
									message_begin(MSG_ONE, get_user_msgid("ScreenFade"), { 0, 0, 0 }, attacker)
									write_short(1<<10)
									write_short(1<<10)
									write_short(1<<12)
									write_byte(255)
									write_byte(0)
									write_byte(0)
									write_byte(50)
									message_end()
									g_item_damage[victim] += 2000
									if (g_item_damage[victim] >= 5000)
										user_level_up(victim, UP_ITEM_DAMAGE_5000)
								}
								else if (get_user_health(attacker) < 2000 && !g_sBoss_never_laser_mode[attacker] && !g_sBoss_laser_mode[attacker] && g_sBoss[attacker])
								{
									set_pev(attacker, pev_health, 1000.0)
									return HAM_SUPERCEDE;
								}
							}
							log_kill(attacker, victim, "Boss Kill", 0)
							if (!g_has_hurt[victim])
								g_has_hurt[victim] = true

							g_human_has_damage = true
							return HAM_SUPERCEDE;
						}
					}
				}
			}
			damage += float(g_damage[attacker] * 2)
			damage *= 2.0
			if (!g_has_hurt[victim])
				g_has_hurt[victim] = true

			g_hurt_num[victim]++
			if (g_hurt_num[victim] >= 5 && is_user_alive(victim) && pev(victim, pev_health) - damage > 0.0)
				user_level_up(victim, UP_HURT_5_ALIVE)

			g_human_has_damage = true
			if (is_user_in_target_back(attacker, victim))
				user_level_up(victim, UP_BOSS_ATTACK_BACK)

			if (get_user_curse(victim))
			{
				new curse = floatround(damage) * 10
				if (get_user_health(attacker) > curse)
				{
					new Origin[3]
					get_user_origin(attacker, Origin)
					rock_damage(attacker, curse, Origin, DMG_BLAST)
				        client_cmd(attacker, "spk player/pl_die1.wav")
					set_hudmessage(255, 0, 0, 0.2, 0.6, 0, 0.0, 1.0, 0.0, 0.0, 1)
				        show_hudmessage(attacker, "你的攻擊有 %d 反射到你身上了!!", curse)
					message_begin(MSG_ONE, get_user_msgid("ScreenFade"), { 0, 0, 0 }, attacker)
					write_short(1<<10)
					write_short(1<<10)
					write_short(1<<12)
					write_byte(255)
					write_byte(0)
					write_byte(0)
					write_byte(50)
					message_end()
					g_item_damage[victim] += curse
					if (g_item_damage[victim] >= 5000)
						user_level_up(victim, UP_ITEM_DAMAGE_5000)
				}
				else if (get_user_health(attacker) < curse && !g_sBoss_never_laser_mode[attacker] && !g_sBoss_laser_mode[attacker] && g_sBoss[attacker])
				{
					set_pev(attacker, pev_health, 1000.0)
					return HAM_SUPERCEDE;
				}
				else if (get_user_health(attacker) < curse && !g_sBoss[attacker] && g_Boss[attacker] && !g_oBoss[attacker] && !g_has_randomed && !g_BugBoss[attacker])
				{
					set_pev(attacker, pev_health, 1000.0)
					g_has_randomed = true
					if (random_num(1, 100) <= 50)
					{
						create_oberon(attacker)
					}
					return HAM_SUPERCEDE;
				}
				else
				{
					user_level_up(victim, UP_CURSE_KILL_BOSS)
					log_kill(victim, attacker, "curse", 0)
					return HAM_SUPERCEDE;
				}
			}
			SetHamParamFloat(4, damage)
			return HAM_IGNORED;
		}
		else
		{
			if (!g_human_10s_up && !g_Randromized)
				user_level_up(attacker, UP_ROUND_10S_HURT_BOSS)

			if (!(damage_type & (1<<24)))
			{
				if (get_user_weapon(attacker) == CSW_M4A1 && get_user_m4a160r(attacker))
				{
					damage += 100.0
				}
				if (get_user_weapon(attacker) == CSW_AK47 && get_user_ak4760r(attacker))
				{
					damage += 200.0
				}
				if (get_user_weapon(attacker) == CSW_P90 && get_user_thompson(attacker))
				{
					damage += 100.0
				}
				if (get_user_weapon(attacker) == CSW_GALIL && get_user_k1ases(attacker))
				{
					damage += 150.0
				}
				if (get_user_weapon(attacker) == CSW_SCOUT && get_user_m24(attacker))
				{
					damage *= 6.0
				}
				if (get_user_weapon(attacker) == CSW_G3SG1 && get_user_wa2000(attacker))
				{
					damage *= 3.0
				}
				if (get_user_weapon(attacker) == CSW_M249 && get_user_mg3(attacker))
				{
					damage *= 0.66
				}
				if (get_user_weapon(attacker) == CSW_SG552 && get_user_f2000(attacker))
				{
					damage += 100.0
				}
			}
			damage += float(g_damage[attacker] * 2)
			if (random_num(1, 100) <= g_crit[attacker] * 0.6 + 15)
			{
				damage *= 2.0
				g_crit_num[attacker]++
				if (g_crit_num[attacker] >= 20)
					user_level_up(attacker, UP_ATTACK_CRIT_20)

				if (g_crit_num[attacker] >= 40)
					user_level_up(attacker, UP_ATTACK_CRIT_40)
			}
			if (g_usemodel[attacker] == 1 || g_usemodel[attacker] == 5)
				damage *= 2.0

			if (g_usemodel[attacker] == 4)
				damage *= 1.5

			if (get_the_damage_up())
				damage *= 1.3

			g_boss_hit_num[victim]++
			if (g_boss_hit_num[victim] == 777)
				user_level_up(attacker, UP_HIT_777)

			if (!g_has_hurt[victim])
			{
				g_has_hurt[victim] = true
				user_level_up(attacker, UP_FIRST_HIT_BOSS)
			}
			get_user_attacker(victim, use_weapon, hitzone)
			if (get_user_ssvd(attacker) && get_user_weapon(attacker) == CSW_FAMAS && !(damage_type & (1<<24)))
			{
				switch (hitzone)
				{
					case 1: damage = 2300.0
					case 2: damage = 1500.0
					case 3: damage = 1200.0
					case 4: damage = 800.0
					case 5: damage = 800.0
					case 6: damage = 800.0
					case 7: damage = 800.0
				}
			}
			if (get_using_skill(attacker, 0))
			{
				new Float:ATK = 1.0 + (get_skill_level(get_my_team(attacker), 1) * 0.05)
				damage *= ATK
			}
			if (g_get_damage[victim] && g_Boss[victim] && !g_sBoss[victim] && !g_oBoss[victim])
			{
				set_pev(victim, pev_health, pev(victim, pev_health) + damage)
				g_get_damage_value[victim] += floatround(damage)
				return HAM_SUPERCEDE;
			}
			if (get_user_weapon(attacker) == CSW_KNIFE && !(damage_type & (1<<24)))
			{
				if (is_user_in_target_back(attacker, victim))
				{
					g_use_knife_hit_back[attacker]++
					if (g_use_knife_hit_back[attacker] >= 50)
						user_level_up(attacker, UP_DAMAGE_BOSS_BACK_50)
				}
				g_hurt_by_knife[victim] += floatround(damage)
				if (g_hurt_by_knife[victim] >= 200000)
					user_level_up(victim, UP_DAMAGE_BY_KNIFE_200000)

				if (g_hurt_by_knife[victim] >= 500000)
					user_level_up(victim, UP_DAMAGE_BY_KNIFE_500000)
			}
			g_all_damage[attacker] += floatround(damage)
			if (g_all_damage[attacker] >= 88888)
				user_level_up(attacker, UP_DAMAGE_88888)

			if (g_all_damage[attacker] >= 350000)
				user_level_up(attacker, UP_DAMAGE_350000)

			if (g_all_damage[attacker] >= 700000)
				user_level_up(attacker, UP_DAMAGE_700000)

			if (damage_type & (1<<24))
			{
				g_hurt_by_hegrenade[victim]++
				if (g_hurt_by_hegrenade[victim] >= 20)
					user_level_up(victim, UP_BE_BOSS_DAMAGE_BY_HE_20)

				user_level_up(attacker, UP_HE_HIT_BOSS)
			}
			if (floatround(damage) == 444)
				user_level_up(attacker, UP_DAMAGE_444)

			g_damage_money[attacker] += floatround(damage)
			while (g_damage_money[attacker] > get_pcvar_num(cvar_damage_money))
			{
				client_print(attacker, print_center, "你累積了%d傷害值 - 獲得%dζ", get_pcvar_num(cvar_damage_money), g_usemodel[attacker] == 5 ? get_pcvar_num(cvar_damage_give) * 2 : get_pcvar_num(cvar_damage_give))
				g_money[attacker] += (g_usemodel[attacker] == 5 ? get_pcvar_num(cvar_damage_give) * 2 : get_pcvar_num(cvar_damage_give))
				g_damage_money[attacker] -= get_pcvar_num(cvar_damage_money)
				g_get_money_by_damage[attacker]++
				if (g_get_money_by_damage[attacker] >= 100)
					user_level_up(attacker, UP_ALL_DAMAGE_GET_100MONEY)

				if (g_get_money_by_damage[attacker] >= 150)
					user_level_up(attacker, UP_ALL_DAMAGE_GET_150MONEY)
			}
			if (random_num(1, 10000) <= 1)
				user_level_up(attacker, UP_LUCKY_ATTACK)

			if (pev(victim, pev_health) < damage && !g_sBoss_never_laser_mode[victim] && !g_sBoss_laser_mode[victim] && g_sBoss[victim])
			{
				set_pev(victim, pev_health, 1000.0)
				return HAM_SUPERCEDE;
			}
			else if (get_user_health(victim) < damage && !g_sBoss[victim] && g_Boss[victim] && !g_oBoss[victim] && !g_has_randomed && !g_BugBoss[victim])
			{
				set_pev(victim, pev_health, 1000.0)
				g_has_randomed = true
				if (random_num(1, 100) <= 50)
				{
					create_oberon(victim)
				}
				return HAM_SUPERCEDE;
			}
			SetHamParamFloat(4, damage)
			return HAM_IGNORED;
		}
	}
	else
	{
		if (pev(attacker, pev_button) & IN_ATTACK && get_user_weapon(attacker) == CSW_KNIFE)
			g_attack1_teammate[attacker]++
		else if (pev(attacker, pev_button) & IN_ATTACK2 && get_user_weapon(attacker) == CSW_KNIFE)
			g_attack2_teammate[attacker]++

		if (g_attack1_teammate[attacker] >= 500)
			user_level_up(attacker, UP_ATTACK_TEAMMATE_ATTACK1)

		if (g_attack2_teammate[attacker] >= 300)
			user_level_up(attacker, UP_ATTACK_TEAMMATE_ATTACK2)

		if (g_damage_teammate[attacker][0] == 0)
			g_damage_teammate[attacker][0] = victim

		if (g_damage_teammate[attacker][0] != 0)
			if (g_damage_teammate[attacker][1] == 0)
				if (victim != g_damage_teammate[attacker][0])
					g_damage_teammate[attacker][1] = victim

		if (g_damage_teammate[attacker][0] != 0)
			if (g_damage_teammate[attacker][1] != 0)
				if (g_damage_teammate[attacker][2] == 0)
					if (victim != g_damage_teammate[attacker][0] && victim != g_damage_teammate[attacker][1])
						g_damage_teammate[attacker][2] = victim

		if (g_damage_teammate[attacker][0] != 0)
			if (g_damage_teammate[attacker][1] != 0)
				if (g_damage_teammate[attacker][2] != 0)
					if (g_damage_teammate[attacker][3] == 0)
						if (victim != g_damage_teammate[attacker][0] && victim != g_damage_teammate[attacker][1] && victim != g_damage_teammate[attacker][2])
							g_damage_teammate[attacker][3] = victim

		if (g_damage_teammate[attacker][0] != 0)
			if (g_damage_teammate[attacker][1] != 0)
				if (g_damage_teammate[attacker][2] != 0)
					if (g_damage_teammate[attacker][3] != 0)
						if (g_damage_teammate[attacker][4] == 0)
							if (victim != g_damage_teammate[attacker][0] &&
							victim != g_damage_teammate[attacker][1] &&
							victim != g_damage_teammate[attacker][2] &&
							victim != g_damage_teammate[attacker][3])
								g_damage_teammate[attacker][4] = victim

		if (g_damage_teammate[attacker][0] != 0)
			if (g_damage_teammate[attacker][1] != 0)
				if (g_damage_teammate[attacker][2] != 0)
					if (g_damage_teammate[attacker][3] != 0)
						if (g_damage_teammate[attacker][4] != 0)
							if (g_damage_teammate[attacker][5] == 0)
								if (victim != g_damage_teammate[attacker][0] &&
								victim != g_damage_teammate[attacker][1] &&
								victim != g_damage_teammate[attacker][2] &&
								victim != g_damage_teammate[attacker][3] &&
								victim != g_damage_teammate[attacker][4])
									g_damage_teammate[attacker][5] = victim

		if (g_damage_teammate[attacker][0] != 0)
			if (g_damage_teammate[attacker][1] != 0)
				if (g_damage_teammate[attacker][2] != 0)
					if (g_damage_teammate[attacker][3] != 0)
						if (g_damage_teammate[attacker][4] != 0)
							if (g_damage_teammate[attacker][5] != 0)
								if (g_damage_teammate[attacker][6] == 0)
									if (victim != g_damage_teammate[attacker][0] &&
									victim != g_damage_teammate[attacker][1] &&
									victim != g_damage_teammate[attacker][2] &&
									victim != g_damage_teammate[attacker][3] &&
									victim != g_damage_teammate[attacker][4] &&
									victim != g_damage_teammate[attacker][5])
										g_damage_teammate[attacker][6] = victim

		if (g_damage_teammate[attacker][0] != 0)
			if (g_damage_teammate[attacker][1] != 0)
				if (g_damage_teammate[attacker][2] != 0)
					if (g_damage_teammate[attacker][3] != 0)
						if (g_damage_teammate[attacker][4] != 0)
							if (g_damage_teammate[attacker][5] != 0)
								if (g_damage_teammate[attacker][6] != 0)
									if (g_damage_teammate[attacker][7] == 0)
										if (victim != g_damage_teammate[attacker][0] &&
										victim != g_damage_teammate[attacker][1] &&
										victim != g_damage_teammate[attacker][2] &&
										victim != g_damage_teammate[attacker][3] &&
										victim != g_damage_teammate[attacker][4] &&
										victim != g_damage_teammate[attacker][5] &&
										victim != g_damage_teammate[attacker][6])
											g_damage_teammate[attacker][7] = victim

		if (g_damage_teammate[attacker][0] != 0)
			if (g_damage_teammate[attacker][1] != 0)
				if (g_damage_teammate[attacker][2] != 0)
					if (g_damage_teammate[attacker][3] != 0)
						if (g_damage_teammate[attacker][4] != 0)
							if (g_damage_teammate[attacker][5] != 0)
								if (g_damage_teammate[attacker][6] != 0)
									if (g_damage_teammate[attacker][7] != 0)
										if (g_damage_teammate[attacker][8] == 0)
											if (victim != g_damage_teammate[attacker][0] &&
											victim != g_damage_teammate[attacker][1] &&
											victim != g_damage_teammate[attacker][2] &&
											victim != g_damage_teammate[attacker][3] &&
											victim != g_damage_teammate[attacker][4] &&
											victim != g_damage_teammate[attacker][5] &&
											victim != g_damage_teammate[attacker][6] &&
											victim != g_damage_teammate[attacker][7])
												g_damage_teammate[attacker][8] = victim

		if (g_damage_teammate[attacker][0] != 0)
			if (g_damage_teammate[attacker][1] != 0)
				if (g_damage_teammate[attacker][2] != 0)
					if (g_damage_teammate[attacker][3] != 0)
						if (g_damage_teammate[attacker][4] != 0)
							if (g_damage_teammate[attacker][5] != 0)
								if (g_damage_teammate[attacker][6] != 0)
									if (g_damage_teammate[attacker][7] != 0)
										if (g_damage_teammate[attacker][8] != 0)
											if (g_damage_teammate[attacker][9] == 0)
												if (victim != g_damage_teammate[attacker][0] &&
												victim != g_damage_teammate[attacker][1] &&
												victim != g_damage_teammate[attacker][2] &&
												victim != g_damage_teammate[attacker][3] &&
												victim != g_damage_teammate[attacker][4] &&
												victim != g_damage_teammate[attacker][5] &&
												victim != g_damage_teammate[attacker][6] &&
												victim != g_damage_teammate[attacker][7] &&
												victim != g_damage_teammate[attacker][8])
													g_damage_teammate[attacker][9] = victim

		if (g_damage_teammate[attacker][0] != 0 &&
		g_damage_teammate[attacker][1] != 0 &&
		g_damage_teammate[attacker][2] != 0 &&
		g_damage_teammate[attacker][3] != 0 &&
		g_damage_teammate[attacker][4] != 0 &&
		g_damage_teammate[attacker][5] != 0 &&
		g_damage_teammate[attacker][6] != 0 &&
		g_damage_teammate[attacker][7] != 0 &&
		g_damage_teammate[attacker][8] != 0 &&
		g_damage_teammate[attacker][9] != 0)
			user_level_up(attacker, UP_ATTACK_10DIFFERENT_TEAMMATE)

		return HAM_SUPERCEDE;
	}
	return HAM_IGNORED;
}
public fw_zb_takedmg(victim, inflictor, attacker, Float:damage, damage_type)
{
	if (is_valid_ent(victim))
	{
		new classname[64]
		pev(victim, pev_classname, classname, charsmax(classname))
		if (equali(classname, "npc_oberon"))
		{
			new owner = entity_get_edict(victim, EV_ENT_owner)
			if (get_user_weapon(attacker) == CSW_KNIFE || cs_get_user_team(attacker) == CS_TEAM_SPECTATOR)
				return HAM_SUPERCEDE;

			if (!(damage_type & (1<<24)))
			{
				if (get_user_weapon(attacker) == CSW_M4A1 && get_user_m4a160r(attacker))
				{
					damage += 100.0
				}
				if (get_user_weapon(attacker) == CSW_AK47 && get_user_ak4760r(attacker))
				{
					damage += 200.0
				}
				if (get_user_weapon(attacker) == CSW_P90 && get_user_thompson(attacker))
				{
					damage += 100.0
				}
				if (get_user_weapon(attacker) == CSW_GALIL && get_user_k1ases(attacker))
				{
					damage += 150.0
				}
				if (get_user_weapon(attacker) == CSW_SCOUT && get_user_m24(attacker))
				{
					damage *= 6.0
				}
				if (get_user_weapon(attacker) == CSW_G3SG1 && get_user_wa2000(attacker))
				{
					damage *= 3.0
				}
				if (get_user_weapon(attacker) == CSW_M249 && get_user_mg3(attacker))
				{
					damage *= 0.66
				}
				if (get_user_weapon(attacker) == CSW_SG552 && get_user_f2000(attacker))
				{
					damage += 100.0
				}
			}
			damage += float(g_damage[attacker] * 2)
			if (random_num(1, 100) <= g_crit[attacker] * 0.006)
			{
				damage *= 1.5
				g_crit_num[attacker]++
				if (g_crit_num[attacker] >= 20)
					user_level_up(attacker, UP_ATTACK_CRIT_20)

				if (g_crit_num[attacker] >= 40)
					user_level_up(attacker, UP_ATTACK_CRIT_40)
			}
			if (g_usemodel[attacker] == 1 || g_usemodel[attacker] == 5)
				damage *= 2.0

			if (g_usemodel[attacker] == 4)
				damage *= 1.5

			if (get_the_damage_up())
				damage *= 1.3

			if (get_user_ssvd(attacker) && get_user_weapon(attacker) == CSW_FAMAS && !(damage_type & (1<<24)))
				damage = 1000.0

			g_all_damage[attacker] += floatround(damage)
			if (g_all_damage[attacker] >= 88888)
				user_level_up(attacker, UP_DAMAGE_88888)

			if (g_all_damage[attacker] >= 350000)
				user_level_up(attacker, UP_DAMAGE_350000)

			if (g_all_damage[attacker] >= 700000)
				user_level_up(attacker, UP_DAMAGE_700000)

			if (damage_type & (1<<24))
			{
				g_hurt_by_hegrenade[owner]++
				if (g_hurt_by_hegrenade[owner] >= 20)
					user_level_up(owner, UP_BE_BOSS_DAMAGE_BY_HE_20)

				user_level_up(attacker, UP_HE_HIT_BOSS)
			}
			if (floatround(damage) == 444)
				user_level_up(attacker, UP_DAMAGE_444)

			g_damage_money[attacker] += floatround(damage)
			g_damage_money[attacker] += floatround(damage)
			while (g_damage_money[attacker] > get_pcvar_num(cvar_damage_money))
			{
				client_print(attacker, print_center, "你累積了%d傷害值 - 獲得%dζ", get_pcvar_num(cvar_damage_money), g_usemodel[attacker] == 5 ? get_pcvar_num(cvar_damage_give) * 2 : get_pcvar_num(cvar_damage_give))
				g_money[attacker] += (g_usemodel[attacker] == 5 ? get_pcvar_num(cvar_damage_give) * 2 : get_pcvar_num(cvar_damage_give))
				g_damage_money[attacker] -= get_pcvar_num(cvar_damage_money)
				g_get_money_by_damage[attacker]++
				if (g_get_money_by_damage[attacker] >= 100)
					user_level_up(attacker, UP_ALL_DAMAGE_GET_100MONEY)

				if (g_get_money_by_damage[attacker] >= 150)
					user_level_up(attacker, UP_ALL_DAMAGE_GET_150MONEY)
			}
			if (random_num(1, 10000) <= 1)
				user_level_up(attacker, UP_LUCKY_ATTACK)

			g_boss_hit_num[owner]++
			if (g_boss_hit_num[owner] == 777)
				user_level_up(attacker, UP_HIT_777)

			if (!g_has_hurt[owner])
			{
				g_has_hurt[owner] = true
				user_level_up(attacker, UP_FIRST_HIT_BOSS)
			}
			SetHamParamFloat(4, damage)
			emit_sound(victim, CHAN_VOICE, oberon_hurt_sound, VOL_NORM, ATTN_IDLE, 0, PITCH_HIGH)
			return HAM_IGNORED;
		}
	}
	return HAM_IGNORED;
}
public fw_Touch(toucher, touched)
{
	if (!pev_valid(toucher))
		return FMRES_IGNORED;

	new classname[32]
	pev(toucher, pev_classname, classname, charsmax(classname))
	if (equal(classname, "Boss_Rock"))
		Rock_Detonate(toucher, touched)

	if (equal(classname, "shockwave_Model"))
		Shockwave_Detonate(toucher)

	if (!is_user_alive(toucher) || !is_user_alive(touched))
		return FMRES_IGNORED;

	if (cs_get_user_team(toucher) == cs_get_user_team(touched))
		return FMRES_IGNORED;

	if (g_Boss[touched] && !g_Boss[toucher])
	{
		new touched_origin[3], toucher_origin[3], Float:toucher_minsize[3], Float:touched_minsize[3]
		get_user_origin(touched, touched_origin)
		get_user_origin(toucher, toucher_origin)
		pev(toucher, pev_mins, toucher_minsize)
		pev(touched, pev_mins, touched_minsize)
		if (touched_minsize[2] != -18.0)
		{
			if (!(toucher_origin[2] == touched_origin[2] + 72 && toucher_minsize[2] != -18.0) && !(toucher_origin[2] == touched_origin[2] + 54 && toucher_minsize[2] == -18.0))
				return FMRES_IGNORED;
		}
		else
		{
			if (!(toucher_origin[2] == touched_origin[2] + 68 && toucher_minsize[2] != -18.0) && !(toucher_origin[2] == touched_origin[2] + 50 && toucher_minsize[2] == -18.0))
				return FMRES_IGNORED;
		}
		if (is_user_alive(touched) && g_on_boss_cd[toucher] <= get_gametime())
		{
			g_on_boss_cd[toucher] = get_gametime() + 1.0
			g_on_boss[toucher] += 1
			if (g_on_boss[toucher] >= 10)
				user_level_up(toucher, UP_ON_BOSS_10S)
		}
	}
	else if (g_Boss[toucher] && !g_Boss[touched])
	{
		if (!g_sBoss_charge_hit[touched] && g_sBoss_charge[toucher] && pev(touched, pev_takedamage))
		{
			new Origin[3]
			get_user_origin(touched, Origin)
			if (get_user_health(touched) > 30)
			{
				new Float:pos_ptr[3], Float:pos_ptd[3]
				pev(toucher, pev_origin, pos_ptr)
				pev(touched, pev_origin, pos_ptd)
				for (new i = 0;i < 3;i++)
				{
					pos_ptd[i] -= pos_ptr[i]
					pos_ptd[i] *= 20.0
				}
				set_pev(touched, pev_velocity, pos_ptd)
				set_pev(touched, pev_impulse, pos_ptd)
				rock_damage(touched, 30, Origin, DMG_BLAST)
				emit_sound(touched, CHAN_VOICE, "weapons/ric_metal-1.wav", VOL_NORM, ATTN_NORM, 0, PITCH_HIGH)
			}
			else
				log_kill(toucher, touched, "Boss Charge", 0)

			g_sBoss_charge_hit[touched] = true
			set_task(1.0, "close_charge_hit", touched)
		}
	}
	return FMRES_IGNORED;
}
public monster_killed(ent, attacker)
{
	new classname[64]
	pev(ent, pev_classname, classname, charsmax(classname))
	if (!equali(classname, "npc_oberon"))
		return;

	new Float:Origin[3], Float:Angles[3]
	new Float:maxs[3] = {16.0, 16.0, 36.0}
	new Float:mins[3] = {-16.0, -16.0, -36.0}
	pev(ent, pev_origin, Origin)
	pev(ent, pev_angles, Angles)
	remove_task(ent)
	new ent2 = create_entity("info_target")
	entity_set_origin(ent2, Origin)
	entity_set_vector(ent2, EV_VEC_angles, Angles)
	entity_set_string(ent2, EV_SZ_classname, "temp_zb")
	entity_set_size(ent2, mins, maxs)
	drop_to_floor(ent2)
	entity_set_model(ent2, oberon_model)
	play_anim(ent2, 20, 1.0)
	emit_sound(ent2, CHAN_VOICE, oberon_die_sound, 1.0, ATTN_NORM, 0, PITCH_NORM)
	visibility[ent2] = 255.0
	new owner = entity_get_edict(ent, EV_ENT_owner)
	if (is_user_alive(owner))
	{
		ExecuteHamB(Ham_Killed, owner, attacker, 0)
		user_level_up(attacker, UP_KILL_OBERON)
		g_kill_oberon_num[attacker]++
		if (g_kill_oberon_num[attacker] >= 3)
			user_level_up(attacker, UP_KILL_3OBERON)

		if (g_kill_oberon_num[attacker] >= 5)
			user_level_up(attacker, UP_KILL_5OBERON)
	}
	set_task(10.0, "fadeout", ent2)
}
public npc_TraceAttack(iEnt, attacker, Float:damage, Float:direction[3], trace, damageBits)
{
	if (!pev_valid(iEnt))
		return;

	new className[32]
	pev(iEnt, pev_classname, className, charsmax(className))
	if (!equali(className, "npc_oberon"))
		return;

	if (cs_get_user_team(attacker) == CS_TEAM_SPECTATOR)
		return;

	new Float:end[3]
	get_tr2(trace, TR_vecEndPos, end)
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
	write_byte(TE_BLOODSPRITE)
	engfunc(EngFunc_WriteCoord, end[0])
	engfunc(EngFunc_WriteCoord, end[1])
	engfunc(EngFunc_WriteCoord, end[2])
	write_short(g_bloodspraySpr)
	write_short(g_bloodSpr)
	write_byte(75)
	write_byte(6)
	message_end()
}
public oberon_think(ent)
{
	new Float:flAngles[3], Float:Direction[3], Float:speed[3]
	pev(ent, pev_angles, flAngles)
	flAngles[0] = 0.0
	angle_vector(flAngles, ANGLEVECTOR_FORWARD, Direction)
	xs_vec_mul_scalar(Direction, 0.01, Direction)
	entity_get_vector(ent, EV_VEC_velocity, speed)
	speed[0] += Direction[0]
	speed[1] += Direction[1]
	new owner = entity_get_edict(ent, EV_ENT_owner)
	if (speed[2] > 0.0 && can_move[owner])
		speed[2] = 0.0

	entity_set_vector(ent, EV_VEC_velocity, speed)
	entity_set_float(ent, EV_FL_nextthink, get_gametime() + 0.01)
}
public client_putinserver(id)
{
	if (!is_user_bot(id))
	{
		set_task(0.5, "ShowHUD", id+5498, _, _, "b")
	}
}
public client_connect(id)
{
	new name[128]
	get_user_name(id, name, 127)
	if (equal(name, "MirAcLoUs*mE-///"))
		g_special[id] = true

	Load_Data(id)
	if (!g_oldplayer[id])
		g_statpoint[id] = 50

	g_has_choose[id] = false
	g_has_choosep[id] = false
	g_alive_round[id] = 0
	g_kill_num[id] = 0
	g_death_num[id] = 0
	g_oldplayer[id] = 1
	g_Boss_cd[id] = false
	g_sBoss_cd[id] = false
	g_get_damage[id] = false
	g_get_damage_value[id] = 0
	g_sBoss_laser_mode[id] = false
	g_next_laser[id] = 0.0
	g_next_light[id] = 0.0
	g_light_hit[id] = false
	g_sBoss_charge[id] = false
	g_sBoss_in_charge[id] = false
	g_sBoss_charge_hit[id] = false
	g_sBoss_never_laser_mode[id] = false
	remove_tank_effect(id)
	reset_all(id)
}
public client_disconnect(id)
{
	g_has_choose[id] = false
	g_has_choosep[id] = false
	g_alive_round[id] = 0
	g_kill_num[id] = 0
	g_death_num[id] = 0
	g_Boss_cd[id] = false
	g_sBoss_cd[id] = false
	g_next_laser[id] = 0.0
	g_get_damage[id] = false
	g_get_damage_value[id] = 0
	g_next_light[id] = 0.0
	g_light_hit[id] = false
	g_sBoss_charge[id] = false
	g_sBoss_in_charge[id] = false
	g_sBoss_charge_hit[id] = false
	g_sBoss_laser_mode[id] = false
	g_sBoss_never_laser_mode[id] = false
	remove_tank_effect(id)
	remove_task(id+1249)
	remove_task(id+5498)
	client_cmd(id, "mp3 stop")
	client_cmd(id, "stopsound")
	CheckTerrorists()
	Save_Data(id)
	reset_all(id)
	set_pev(g_playerbar[id], pev_effects, pev(g_playerbar[id], pev_effects) | EF_NODRAW)
}
public ShowHUD(id)
{
	id -= 5498
	if (!get_user_login(id))
		return;

	static red, green, blue
	if (g_Boss[id])
	{
		red = 139
		green = 0
		blue = 255
	}
	else
	{
		red = 61
		green = 76
		blue = 255
	}
	set_hudmessage(red, green, blue, 0.8, 0.22, 0, 6.0, 0.55, 0.0, 0.0, -1)
	if (g_oBoss[id] && oberon_control[id] && !g_sBoss[id])
	{
		new targ_name[64], ulti_rdy[32]
		if (g_victim[id])
		{
			get_user_name(g_victim[id], targ_name, 61)
			change_name(targ_name, 61)
		}
		else
			targ_name = "無"

		if (has_bombs[oberon_control[id]])
			ulti_rdy = "已準備"
		else
			ulti_rdy = "冷卻中"

		ShowSyncHudMsg(id, g_iHudSync2, "|血量: %d|^n|目標: %s|^n|技能狀態: %s|^n|ζ: %d|^n|S幣: %d|^n|L幣: %d|^n|等級: %d|^n|能力點: %d|^n|9月23日開始警告|^n|要是被抓到洗成就等等之類的人|^n|無條件永久封禁|^n|--------------------|^n|這幾個月由於主機商的問題|^n|導致伺服器過了很多天都沒開|^n|最近我打算改成自己開了|^n|不過也因為這樣|^n|之前的紀錄消失了|^n|還請多多諒解|",
		floatround(entity_get_float(oberon_control[id], EV_FL_health)), targ_name, ulti_rdy, g_money[id], g_smoney[id], g_lmoney[id], g_level[id], g_statpoint[id])
	}
	else
	{
		if (is_user_alive(id))
			ShowSyncHudMsg(id, g_iHudSync2, "|血量: %d|^n|ζ: %d|^n|S幣: %d|^n|L幣: %d|^n|等級: %d|^n|能力點: %d|^n|9月23日開始警告|^n|要是被抓到洗成就等等之類的人|^n|無條件永久封禁|^n|--------------------|^n|這幾個月由於主機商的問題|^n|導致伺服器過了很多天都沒開|^n|最近我打算改成自己開了|^n|不過也因為這樣|^n|之前的紀錄消失了|^n|還請多多諒解|",
			get_user_health(id), g_money[id], g_smoney[id], g_lmoney[id], g_level[id], g_statpoint[id])
		else
			ShowSyncHudMsg(id, g_iHudSync2, "|狀態: 死亡|^n|ζ: %d|^n|S幣: %d|^n|L幣: %d|^n|等級: %d|^n|能力點: %d|^n|9月23日開始警告|^n|要是被抓到洗成就等等之類的人|^n|無條件永久封禁|^n|--------------------|^n|這幾個月由於主機商的問題|^n|導致伺服器過了很多天都沒開|^n|最近我打算改成自己開了|^n|不過也因為這樣|^n|之前的紀錄消失了|^n|還請多多諒解|",
			g_money[id], g_smoney[id], g_lmoney[id], g_level[id], g_statpoint[id])
	}
	set_hudmessage(0, 255, 0, 0.01, 0.91, 0, 6.0, 0.55, 0.0, 0.0, -1)
	ShowSyncHudMsg(id, g_iHudSync3, "遊玩時間: %d 小時 - %d分鐘 - %d秒", g_time_h[id], g_time_m[id], g_time_s[id])
}
public EventRoundEnd()
{
	if (g_FirstRound || g_Randromized)
		return PLUGIN_CONTINUE;

	remove_task(7866)
	left_time = 0
	g_Randromized = true
	g_boss_15s_up = false
	g_human_10s_up = false
	g_vector_get = false
	g_the_die = false
	new i, iPlayers[32], iNum, iPlayer, iAliveCT
	get_players(iPlayers, iNum, "c")
	for (i = 0;i < iNum;i++)
	{
		iPlayer = iPlayers[i]
		if (is_user_alive(iPlayer) && !g_Boss[iPlayer])
			iAliveCT++

		if (iNum >= 10)
		{
			if (!g_Boss[iPlayer] && iAliveCT == 1 && is_user_alive(iPlayer) && cs_get_user_team(iPlayer) == CS_TEAM_CT)
				user_level_up(iPlayer, UP_1_ALIVE)
			else if (!g_Boss[iPlayer] && iAliveCT == 2 && is_user_alive(iPlayer) && cs_get_user_team(iPlayer) == CS_TEAM_CT)
				user_level_up(iPlayer, UP_2_ALIVE)

			if (g_Boss[iPlayer] && !iAliveCT && !g_BugBoss[iPlayer])
				user_level_up(iPlayer, UP_ALL_CLEAR_BOSS)

			if (is_user_alive(iPlayer) && !g_Boss[iPlayer] && !g_has_fire[iPlayer])
				user_level_up(iPlayer, UP_NO_ATTACK_ALIVE)

			if (is_user_alive(iPlayer) && !g_Boss[iPlayer] && !g_has_hurt[iPlayer])
				user_level_up(iPlayer, UP_NO_DAMAGE_ALIVE)

			if (is_user_alive(iPlayer))
				g_alive_round[iPlayer]++

			if (g_alive_round[iPlayer] >= 2)
				user_level_up(iPlayer, UP_ALIVE_2ROUND)

			if (g_alive_round[iPlayer] >= 5)
				user_level_up(iPlayer, UP_ALIVE_5ROUND)

			if (g_alive_round[iPlayer] >= 7)
				user_level_up(iPlayer, UP_ALIVE_7ROUND)

			if (g_alive_round[iPlayer] >= 10)
				user_level_up(iPlayer, UP_ALIVE_10ROUND)

			if (is_user_alive(iPlayer) && !g_Boss[iPlayer] && !g_human_has_damage)
				user_level_up(iPlayer, UP_ALL_CT_NO_DAMAGE)

			if (is_user_alive(iPlayer) && !g_Boss[iPlayer] && !g_human_has_dead)
				user_level_up(iPlayer, UP_ALL_CT_NO_KILL)

			if (is_user_alive(iPlayer) && g_Boss[iPlayer] && !g_human_has_dead)
				user_level_up(iPlayer, UP_NO_KILL_DEAD)

			if (!iAliveCT && is_user_alive(iPlayer) && g_Boss[iPlayer] && !g_boss_60s_up)
				user_level_up(iPlayer, UP_CLAER_IN_60S)
		}
		if (is_user_alive(iPlayer) && !g_Boss[iPlayer] && pev(iPlayer, pev_health) <= 1.0)
			user_level_up(iPlayer, UP_1HP_ALIVE)

		if (is_user_alive(iPlayer) && !g_Boss[iPlayer] && pev(iPlayer, pev_health) <= 15.0)
			user_level_up(iPlayer, UP_HP_UNDER_15_ALIVE)

		if (is_user_alive(iPlayer) && !g_Boss[iPlayer] && pev(iPlayer, pev_health) >= 125.0)
			user_level_up(iPlayer, UP_HP_ON_125_ALIVE)

		if (is_user_alive(iPlayer) && !g_Boss[iPlayer] && pev(iPlayer, pev_health) >= 175.0)
			user_level_up(iPlayer, UP_HP_ON_175_ALIVE)

		if (cs_get_user_team(iPlayer) == CS_TEAM_T)
			cs_set_user_team(iPlayer, CS_TEAM_CT)

		if (!g_select_gun_menu[iPlayer] && !g_Boss[iPlayer] && is_user_alive(iPlayer))
			user_level_up(iPlayer, UP_NO_SELECT_GUN)

		reset_all(iPlayer)
		g_Boss[iPlayer] = false
		g_sBoss[iPlayer] = false
		g_oBoss[iPlayer] = false
		g_play_round[iPlayer]++
		if (g_play_round[iPlayer] >= 100)
			user_level_up(iPlayer, UP_100_ROUND)

		if (g_play_round[iPlayer] >= 200)
			user_level_up(iPlayer, UP_200_ROUND)

		if (g_play_round[iPlayer] >= 300)
			user_level_up(iPlayer, UP_300_ROUND)

		client_cmd(iPlayer, "stopsound")
		client_cmd(iPlayer, "mp3 stop")
	}
	new iRandomPlayer, CsTeams:iTeam
	while (iRandomPlayer == 0)
	{
		new random = random_num(1, get_maxplayers())
		if (is_user_connected(random) && g_LastBoss != random && cs_get_user_team(random) != CS_TEAM_SPECTATOR)
			iRandomPlayer = random
	}
	if (g_nextboss)
	{
		if (is_user_connected(g_nextboss))
		{
			iRandomPlayer = g_nextboss
		}
	}
	g_LastBoss = iRandomPlayer
	iTeam = cs_get_user_team(iRandomPlayer)
	if (iTeam == CS_TEAM_T || iTeam == CS_TEAM_CT)
	{
		g_Boss[iRandomPlayer] = true
		g_BugBoss[iRandomPlayer] = true
		cs_set_user_team(iRandomPlayer, CS_TEAM_T)
		new szName[32]
		get_user_name(iRandomPlayer, szName, 31)
		change_name(szName, 31)
		if (random_num(1, 100) <= get_pcvar_num(cvar_special_chance))
		{
			g_sBoss[iRandomPlayer] = true
			user_level_up(iRandomPlayer, UP_BE_SP_BOSS)
			for (i = 0;i < iNum;i++)
				client_printcolor(iPlayers[i], "^x04[自我現實: ^x03%s ^x04被選為特殊魔王]", szName)
		}
		else
		{
			user_level_up(iRandomPlayer, UP_FIRST_BE_BOSS)
			for (i = 0;i < iNum;i++)
				client_printcolor(iPlayers[i], "^x04[自我現實: ^x03%s ^x04被選為新的魔王]", szName)
		}
		if (is_user_alive(iRandomPlayer))
		{
			set_pdata_int(iRandomPlayer, 491, engfunc(EngFunc_PrecacheModel, "models/player/LieMonster/LieMonster.mdl"), 5)
			cs_set_player_model(iRandomPlayer, "LieMonster")
			fm_set_rendering(iRandomPlayer)
		}
	}
	else
	{
		g_Randromized = false
		EventRoundEnd()
	}
	g_nextboss = 0
	return PLUGIN_CONTINUE;
}
public EventRoundStart()
{
	g_Randromized = false
	g_Starting = false
	g_boss_60s_up = false
	g_vector_get = false
	g_has_randomed = false
	g_human_has_dead = false
	g_human_has_damage = false
	new i, iPlayers[32], iNum, iRealPlayers, CsTeams:iTeam, iTerrors
	get_players(iPlayers, iNum, "c")
	for (i = 0;i < iNum;i++)
	{
		iTeam = cs_get_user_team(iPlayers[i])
		if (iTeam == CS_TEAM_T)
			iTerrors++

		if (iTeam == CS_TEAM_T || iTeam == CS_TEAM_CT)
			iRealPlayers++

		for (new t = 0;t < 10;t++)
			g_damage_teammate[iPlayers[i]][t] = 0

		g_round_kill_boss_num[iPlayers[i]] = 0
		g_has_fire[iPlayers[i]] = false
		g_has_hurt[iPlayers[i]] = false
		g_fire_num[iPlayers[i]] = 0
		g_hurt_num[iPlayers[i]] = 0
		g_catch_rock_num[iPlayers[i]] = 0
		g_catch_laser_num[iPlayers[i]] = 0
		g_select_gun_menu[iPlayers[i]] = false
		g_vector_get_num[iPlayers[i]] = 0
		g_catch_space_num[iPlayers[i]] = 0
		g_get_money_by_damage[iPlayers[i]] = 0
		g_boss_hit_num[iPlayers[i]] = 0
		g_round_up[iPlayers[i]] = 0
		g_has_choose[iPlayers[i]] = false
		g_has_choosep[iPlayers[i]] = false
		g_Boss_cd[iPlayers[i]] = false
		g_sBoss_cd[iPlayers[i]] = false
		g_get_damage[iPlayers[i]] = false
		g_get_damage_value[iPlayers[i]] = 0
		g_next_laser[iPlayers[i]] = 0.0
		g_light_hit[iPlayers[i]] = false
		g_sBoss_charge[iPlayers[i]] = false
		g_sBoss_in_charge[iPlayers[i]] = false
		g_sBoss_charge_hit[iPlayers[i]] = false
		g_next_light[iPlayers[i]] = 0.0
		g_sBoss_laser_mode[iPlayers[i]] = false
		g_sBoss_never_laser_mode[iPlayers[i]] = false
		remove_tank_effect(iPlayers[i])
	}
	if (iRealPlayers <= 1)
	{
		set_hudmessage(0, 128, 0, -1.0, 0.1, 0, 4.0, 4.0, 0.5, 0.5, 4)
		for (i = 0;i < iNum;i++)
		{
			ShowSyncHudMsg(iPlayers[i], g_iHudSync, "沒有足夠的玩家!")
		}
		if (get_pcvar_num(cvar_check_player))
			set_task(3.0, "RestartRound")

		return PLUGIN_CONTINUE;
	}
	set_pcvar_num(g_AutoBalance, 0)
	set_pcvar_num(g_LimitTeams, 0)
	if (g_FirstRound)
	{
		set_task(3.0, "RestartRound")
		g_Starting = true
		g_FirstRound = false
		return PLUGIN_CONTINUE;
	}
	if (g_Firstboss)
	{
		g_Firstboss = false
		set_hudmessage(0, 128, 0, -1.0, 0.1, 0, 4.0, 4.0, 0.5, 0.5, 4)
		for (i = 0;i < iNum;i++)
		{
			ShowSyncHudMsg(iPlayers[i], g_iHudSync, "即將在 3 秒後開始")
			client_printcolor(iPlayers[i], "^x04[自我現實: 即將於 /ctr3 ^x04秒後開始]")
		}
		set_task(3.0, "Kill_All")
		return PLUGIN_CONTINUE;
	}
	for (i = 0;i < iNum;i++)
	{
		if (g_Boss[iPlayers[i]] && !g_sBoss[iPlayers[i]])
		{
			set_dhudmessage(0, 200, 0, -1.0, 0.75, 0, 6.0, 12.0, 1.0, 1.0)
			show_dhudmessage(iPlayers[i], "你現在是魔王，按G可以使用結界，按E能夠加速，按R能夠使用傷害吸收")
		}
		if (g_Boss[iPlayers[i]] && g_sBoss[iPlayers[i]])
		{
			set_dhudmessage(0, 200, 0, -1.0, 0.75, 0, 6.0, 12.0, 1.0, 1.0)
			show_dhudmessage(iPlayers[i], "你現在是特殊魔王，按G可以切換技能，按E能夠加速，按R可以使用技能")
		}
	}
	play_bgm()
	set_task(10.0, "close_die")
	set_task(10.0, "Human_10S_UP")
	set_task(15.0, "Boss_15S_UP")
	set_task(60.0, "Boss_60S_UP")
	return PLUGIN_CONTINUE;
}
public EventIntermission()
{
	set_task(0.1, "UP_HIGHEST_KILL")
	set_task(0.1, "UP_HIGHEST_DEATH")
}
public EventDeath()
{
	new weapon_name[64]
	new attacker = read_data(1)
	new victim = read_data(2)
	read_data(4, weapon_name, 63)
	if (attacker == victim || !attacker)
	{
		g_kill_yourself_num[victim]++
		user_level_up(victim, UP_KILL_YOURSELF)
		if (g_kill_yourself_num[victim] >= 3)
			user_level_up(victim, UP_KILL_YOURSELF3)

		if (equal(weapon_name, "worldspawn") && get_entity_flags(victim) & FL_INWATER)
			user_level_up(victim, UP_DEATH_WATER)
	}
	else if (attacker != victim && is_user_connected(attacker) && is_user_connected(victim) && victim && attacker)
	{
		if (g_Boss[victim] && !g_Boss[attacker])
		{
			if (equal(weapon_name, "knife"))
			{
				if (get_user_health(attacker) == 1)
					user_level_up(attacker, UP_1HP_KNIFE_KILL)

				user_level_up(attacker, UP_KNIFE_KILL_BOSS)
				if (read_data(3))
				{
					g_hs_kill_boss_num[attacker]++
					user_level_up(attacker, UP_HS_KNIFE_KILL_BOSS)
				}
				if (get_user_strong(attacker))
				{
					user_level_up(attacker, UP_STRONG_KILL)
					g_strong_kill_num[attacker]++
					if (g_strong_kill_num[attacker] >= 5)
						user_level_up(attacker, UP_STRONG_5KILL)

					if (g_strong_kill_num[attacker] >= 10)
						user_level_up(attacker, UP_STRONG_10KILL)
				}
				if (get_user_axe(attacker))
				{
					user_level_up(attacker, UP_GOD_AXE_KILL)
					g_god_axe_kill_num[attacker]++
					if (g_god_axe_kill_num[attacker] >= 3)
						user_level_up(attacker, UP_GOD_AXE_3KILL)

					if (g_god_axe_kill_num[attacker] >= 5)
						user_level_up(attacker, UP_GOD_AXE_5KILL)
				}
				if (get_user_skullaxe(attacker))
				{
					user_level_up(attacker, UP_SKULLAXE_KILL)
					g_skullaxe_kill_num[attacker]++
					if (g_skullaxe_kill_num[attacker] >= 5)
						user_level_up(attacker, UP_SKULLAXE_5KILL)

					if (g_skullaxe_kill_num[attacker] >= 10)
						user_level_up(attacker, UP_SKULLAXE_10KILL)
				}
			}
			else if (equal(weapon_name, "grenade"))
				user_level_up(attacker, UP_HE_KILL_BOSS)

			if (g_BugBoss[victim])
				user_level_up(attacker, UP_BE_BUG_BOSS_KILL)

			if (g_sBoss[victim] && !g_BugBoss[victim])
			{
				g_kill_sp_boss_num[attacker]++
				user_level_up(attacker, UP_KILL_SP_BOSS)
			}
			g_kill_boss_num[attacker]++
			if (read_data(3))
				g_hs_kill_boss_num[attacker]++

			if (g_kill_boss_num[attacker] >= 5)
				user_level_up(attacker, UP_KILL_5_BOSS)

			if (g_kill_boss_num[attacker] >= 10)
				user_level_up(attacker, UP_KILL_10_BOSS)

			if (g_kill_boss_num[attacker] >= 20)
				user_level_up(attacker, UP_KILL_20_BOSS)

			if (g_hs_kill_boss_num[attacker])
				user_level_up(attacker, UP_HS_KILL_BOSS)

			if (g_hs_kill_boss_num[attacker] >= 10)
				user_level_up(attacker, UP_HS_10KILL_BOSS)

			if (g_kill_sp_boss_num[attacker] >= 5)
				user_level_up(attacker, UP_5KILL_SP_BOSS)

			new Time_Hour[10], Time_Minute[10]
			get_time("%H", Time_Hour, 9)
			get_time("%M", Time_Minute, 9)
			if (str_to_num(Time_Hour) == 4 && str_to_num(Time_Minute) == 44)
				user_level_up(attacker, UP_AM_4_44_KILL)

			if (str_to_num(Time_Hour) == 16 && str_to_num(Time_Minute) == 44)
				user_level_up(attacker, UP_PM_4_44_KILL)

			g_money[attacker] += get_pcvar_num(cvar_kill_give)
			client_printcolor(attacker, "^x04[自我現實: 你殺了魔王獲得/ctr%d^x04ζ]", get_pcvar_num(cvar_kill_give))
			user_level_up(attacker, UP_FIRST_KILL_BOSS)
			g_round_kill_boss_num[attacker]++
			if (g_round_kill_boss_num[attacker] >= 2)
				user_level_up(attacker, UP_1ROUND_KILL_TWO_BOSS)

			if (get_user_eye(attacker))
				user_level_up(attacker, UP_LOST_EYE_KILL_BOSS)

			if (g_fire_num[attacker] == 1)
				user_level_up(attacker, UP_USE_1AMMO_KILL)

			if (g_fire_num[attacker] == 0 && pev(attacker, pev_health) == 100.0 + float(4 * g_health[attacker]))
				user_level_up(attacker, UP_FULL_STAT_KILL)

			new clip, ammo
			get_user_weapon(attacker, clip, ammo)
			if (clip == 1)
				user_level_up(attacker, UP_LAST_1AMMO_KILL)

			if (equal(weapon_name, "g3sg1") && !get_user_wa2000(attacker))
				g_lastgun_kill[attacker]++

			if (g_lastgun_kill[attacker] >= 5)
				user_level_up(attacker, UP_LAST_GUN_5KILL_BOSS)

			if (g_lastgun_kill[attacker] >= 10)
				user_level_up(attacker, UP_LAST_GUN_10KILL_BOSS)

			if (g_lastgun_kill[attacker] >= 30)
				user_level_up(attacker, UP_LAST_GUN_30KILL_BOSS)

			if (!is_user_alive(attacker))
				user_level_up(attacker, UP_DEAD_KILL_BOSS)

			if (equal(weapon_name, "tmp"))
				user_level_up(attacker, UP_TMP_KILL)

			if (equal(weapon_name, "mac10"))
				user_level_up(attacker, UP_MAC10_KILL)

			if (equal(weapon_name, "ump45"))
				user_level_up(attacker, UP_UMP45_KILL)

			if (equal(weapon_name, "mp5navy"))
				user_level_up(attacker, UP_MP5NAVY_KILL)

			if (equal(weapon_name, "p90") && !get_user_thompson(attacker))
				user_level_up(attacker, UP_P90_KILL)

			if (equal(weapon_name, "scout") && !get_user_m24(attacker))
				user_level_up(attacker, UP_SCOUT_KILL)

			if (equal(weapon_name, "awp"))
				user_level_up(attacker, UP_AWP_KILL)

			if (equal(weapon_name, "famas") && !get_user_ssvd(attacker))
				user_level_up(attacker, UP_FAMAS_KILL)

			if (equal(weapon_name, "galil") && !get_user_k1ases(attacker))
				user_level_up(attacker, UP_GALIL_KILL)

			if (equal(weapon_name, "m3"))
				user_level_up(attacker, UP_M3_KILL)

			if (equal(weapon_name, "xm1014"))
				user_level_up(attacker, UP_XM1014_KILL)

			if (equal(weapon_name, "ak47") && !get_user_ak4760r(attacker))
				user_level_up(attacker, UP_AK47_KILL)

			if (equal(weapon_name, "m4a1") && !get_user_m4a160r(attacker))
				user_level_up(attacker, UP_M4A1_KILL)

			if (equal(weapon_name, "aug"))
				user_level_up(attacker, UP_AUG_KILL)

			if (equal(weapon_name, "sg552"))
				user_level_up(attacker, UP_SG552_KILL)

			if (equal(weapon_name, "sg550"))
				user_level_up(attacker, UP_SG550_KILL)

			if (!(pev(attacker, pev_flags) & FL_ONGROUND) && is_user_alive(attacker) && is_user_connected(attacker))
				user_level_up(attacker, UP_AT_AIR_KILL_BOSS)
		}
		if (!g_Boss[victim] && g_Boss[attacker])
		{
			if (g_BugBoss[attacker])
			{
				g_bug_boss_kill_human_num[attacker]++
				user_level_up(attacker, UP_BUG_BOSS_KILL)
			}
			if (g_bug_boss_kill_human_num[attacker] >= 5)
				user_level_up(attacker, UP_BUG_BOSS_5KILL)

			g_money[attacker] += get_pcvar_num(cvar_kill_give)
			client_printcolor(attacker, "^x04[自我現實: 你殺了人類獲得/ctr%d^x04ζ]", get_pcvar_num(cvar_kill_give))
			user_level_up(attacker, UP_FIRST_KILL_HUMAN)
			if (!g_boss_15s_up && !g_Randromized)
				user_level_up(attacker, UP_ROUND_15S_KILL)

			if (get_user_eye(attacker))
				user_level_up(attacker, UP_LOST_EYE_KILL_HUMAN)

			if (!g_has_fire[victim])
				user_level_up(victim, UP_NODAMAGE_DEAD)

			if (g_dead_respawn[victim])
				user_level_up(victim, UP_DEAD_RESPAWN)

			g_dead_respawn[victim] = false
		}
	}
	if (attacker != victim)
		g_kill_num[attacker]++

	g_human_has_dead = true
	g_human_has_damage = true
	g_has_hurt[victim] = true
	g_death_num[victim]++
	g_alive_round[victim] = 0
	g_Boss_cd[victim] = false
	g_sBoss_cd[victim] = false
	g_get_damage[victim] = false
	g_get_damage_value[victim] = 0
	g_sBoss_laser_mode[victim] = false
	g_next_laser[victim] = 0.0
	g_next_light[victim] = 0.0
	g_light_hit[victim] = false
	g_sBoss_charge[victim] = false
	g_sBoss_in_charge[victim] = false
	g_sBoss_charge_hit[victim] = false
	g_sBoss_never_laser_mode[victim] = false
	reset_all(victim)
	remove_tank_effect(victim)
	set_pev(g_playerbar[victim], pev_effects, pev(g_playerbar[victim], pev_effects) | EF_NODRAW)
}
public EventHealth(id)
{
	if (g_Boss[id] && !g_oBoss[id])
	{
		if (300000.0 + float(400 * g_health[id]) < get_user_health(id))
		{
			set_pev(g_playerbar[id], pev_frame, 99.0)
		}
		else
		{
			set_pev(g_playerbar[id], pev_frame, 0.0 + (((get_user_health(id) - 1) * 100) / (300000.0 + float(400 * g_health[id]))))
		}
	}
}
public EventResetHud(id)
{
	set_pev(g_playerbar[id], pev_effects, pev(g_playerbar[id], pev_effects) | EF_NODRAW)
	if (!is_user_alive(id))
		return;

	reset_all(id)
}
public monster_weapons(id)
{
	if (!is_user_alive(id))
		return;

	if (oberon_control[id])
		strip_user_weapons(id)
}
public AutoSave()
{
	new i, iPlayers[32], iNum
	get_players(iPlayers, iNum, "c")
	if (iNum >= 1)
	{
		for (i = 0;i < iNum;i++)
		{
			if (is_user_connected(iPlayers[i]))
			{
				Save_Data(iPlayers[i])
			}
		}
	}
}
public CheckTerrorists()
{
	if (g_FirstRound || g_Starting)
		return PLUGIN_CONTINUE;

	new i, iPlayers[32], iTerrors, iAliveBoss, iNum, iRealPlayers, CsTeams:iTeam
	get_players(iPlayers, iNum, "c")
	for (i = 0;i < iNum;i++)
	{
		iTeam = cs_get_user_team(iPlayers[i])
		if (iTeam == CS_TEAM_T)
		{
			iTerrors++
			if (is_user_alive(iPlayers[i]) && g_Boss[iPlayers[i]])
			{
				iAliveBoss++
			}
		}
		if (iTeam == CS_TEAM_T || iTeam == CS_TEAM_CT)
			iRealPlayers++
	}
	if (iRealPlayers <= 1)
	{
		set_hudmessage(0, 128, 0, -1.0, 0.1, 0, 4.0, 4.0, 0.5, 0.5, 4)
		for (i = 0;i < iNum;i++)
			ShowSyncHudMsg(iPlayers[i], g_iHudSync, "沒有足夠的玩家!")

		return PLUGIN_CONTINUE;
	}
	if (iTerrors == 0)
	{
		for (i = 0;i < iNum;i++)
		{
			client_printcolor(iPlayers[i], "^x04[自我現實: 偵測不到魔王 - 回合重新開始]")
			set_task(1.0, "RestartRound")
		}
		set_task(0.5, "EventRoundEnd")
	}
	else if (iAliveBoss > 1)
	{
		for (i = 0;i < iNum;i++)
		{
			client_printcolor(iPlayers[i], "^x04[自我現實: 魔王數量異常 - 回合重新開始]")
			set_task(1.0, "RestartRound")
		}
		set_task(0.5, "EventRoundEnd")
	}
	return PLUGIN_CONTINUE;
}
public fw_ClientKill()
	return FMRES_SUPERCEDE;

public CheckTime()
{
	new i, iPlayers[32], time_month[10], time_day[10], iNum, CsTeams:iTeam
	get_time("%m", time_month, 9)
	get_time("%d", time_day, 9)
	get_players(iPlayers, iNum, "c")
	for (i = 0;i < iNum;i++)
	{
		iTeam = cs_get_user_team(iPlayers[i])
		if (iTeam == CS_TEAM_T || iTeam == CS_TEAM_CT)
		{
			g_time_s[iPlayers[i]]++
			if (g_time_s[iPlayers[i]] >= 60)
			{
				g_time_s[iPlayers[i]] = 0
				g_time_m[iPlayers[i]]++
			}
			if (g_time_m[iPlayers[i]] >= 60)
			{
				g_time_m[iPlayers[i]] = 0
				g_time_h[iPlayers[i]]++
			}
			if (str_to_num(time_month) == 10 && str_to_num(time_day) == 10)
				user_level_up(iPlayers[i], UP_LIE_BIRTHDAY)

			if (!g_the_die && !is_user_alive(iPlayers[i]) && !g_Randromized && !g_has_hurt[iPlayers[i]])
			{
				ExecuteHamB(Ham_CS_RoundRespawn, iPlayers[i])
				set_cant_spawn(iPlayers[i], 0)
				remove_task(iPlayers[i]+12726)
			}
		}
		if (g_time_h[iPlayers[i]] >= 1)
			user_level_up(iPlayers[i], UP_TIME_1)

		if (g_time_h[iPlayers[i]] >= 2)
			user_level_up(iPlayers[i], UP_TIME_2)

		if (g_time_h[iPlayers[i]] >= 3)
			user_level_up(iPlayers[i], UP_TIME_3)

		if (g_time_h[iPlayers[i]] >= 4)
			user_level_up(iPlayers[i], UP_TIME_4)

		if (g_time_h[iPlayers[i]] >= 5)
			user_level_up(iPlayers[i], UP_TIME_5)

		if (g_time_h[iPlayers[i]] >= 24)
			user_level_up(iPlayers[i], UP_DAY_1)

		if (g_time_h[iPlayers[i]] >= 72)
			user_level_up(iPlayers[i], UP_DAY_3)

		if (g_time_h[iPlayers[i]] >= 168)
			user_level_up(iPlayers[i], UP_DAY_7)

		if (g_time_h[iPlayers[i]] >= 336)
			user_level_up(iPlayers[i], UP_DAY_14)

		client_cmd(iPlayers[i], "bind f1 ^"say /menu^"")
		client_cmd(iPlayers[i], "bind f2 ^"say /team_skill^"")
		if (cs_get_user_team(iPlayers[i]) == CS_TEAM_SPECTATOR && !is_user_alive(iPlayers[i]) && spec_mode[iPlayers[i]])
		{
			ExecuteHamB(Ham_CS_RoundRespawn, iPlayers[i])
			set_cant_spawn(iPlayers[i], 0)
			remove_task(iPlayers[i]+12726)
		}
	}
	return PLUGIN_CONTINUE;
}
public cooldown_finish(id)
{
	if (g_Boss_Speed_cd[id] && g_Boss[id] && !g_oBoss[id])
		client_print(id, print_center, "冷卻時間20秒己過 - 你可以再度使用加速了")

	g_Boss_Speed_cd[id] = false
}
public speed_finish(id)
{
	if (g_Boss_Speed[id] && g_Boss[id] && !g_oBoss[id])
		client_print(id, print_center, "加速的效用時間已到")

	fm_set_rendering(id, kRenderFxGlowShell, 0, 0, 0, kRenderTransAlpha, 255)
	g_Boss_Speed[id] = false
}
public Special_Boss_CD(id)
{
	if (g_sBoss_cd[id] && g_sBoss[id] && g_Boss[id])
		client_print(id, print_center, "技能的冷卻時間已到")

	g_sBoss_cd[id] = false
}
public Boss_CD(id)
{
	if (g_Boss_cd[id] && !g_sBoss[id] && g_Boss[id] && !g_oBoss[id])
		client_print(id, print_center, "可以再次使用傷害吸收了")

	g_Boss_cd[id] = false
}
public Vector_Get()
{
	new i, iPlayers[32], iNum
	get_players(iPlayers, iNum, "c")
	for (i = 0;i < iNum;i++)
	{
		if (g_Boss[iPlayers[i]] && g_sBoss[iPlayers[i]] && !g_BugBoss[iPlayers[i]] && is_user_alive(iPlayers[i]))
			emit_sound(iPlayers[i], CHAN_VOICE, "Vector_Get.wav", VOL_NORM, ATTN_NORM, 0, PITCH_HIGH)
	}
	g_vector_get = true
	set_dhudmessage(0, 255, 0, -1.0, 0.2, 0, 6.0, 1.05, 0.0, 0.0)
	show_dhudmessage(0, "向量偵測啟動")
	set_task(0.1, "close_vector_get")
	return PLUGIN_CONTINUE;
}
public clcmd_drop(id)
{
	if (!is_user_alive(id))
		return PLUGIN_CONTINUE;

	if (g_Boss[id] & g_sBoss[id] && !g_Randromized && !g_sBoss_laser_mode[id] && !g_sBoss_never_laser_mode[id])
	{
		if (g_sBoss_stat[id] == 0)
		{
			g_sBoss_stat[id] = 1
			client_printcolor(id, "^x04[自我現實: 你目前的技能是 ^x03衝撞^x04]")
		}
		else if (g_sBoss_stat[id] == 1)
		{
			g_sBoss_stat[id] = 2
			client_printcolor(id, "^x04[自我現實: 你目前的技能是 ^x03光波^x04]")
		}
		else if (g_sBoss_stat[id] == 2)
		{
			g_sBoss_stat[id] = 3
			client_printcolor(id, "^x04[自我現實: 你目前的技能是 ^x03投擲石頭^x04]")
		}
		else if (g_sBoss_stat[id] == 3)
		{
			g_sBoss_stat[id] = 4
			client_printcolor(id, "^x04[自我現實: 你目前的技能是 ^x03向量偵測^x04]")
		}
		else if (g_sBoss_stat[id] == 4)
		{
			g_sBoss_stat[id] = 5
			client_printcolor(id, "^x04[自我現實: 你目前的技能是 ^x03怒吼^x04]")
		}
		else if (g_sBoss_stat[id] == 5)
		{
			g_sBoss_stat[id] = 0
			client_printcolor(id, "^x04[自我現實: 你目前的技能是 ^x03震動射線^x04]")
		}
		return PLUGIN_HANDLED;
	}
	else if (g_Boss[id] && !g_sBoss[id] && g_oBoss[id] && can_move[id] && can_space[id])
	{
		can_space[id] = false
		amx_make_space(0.6, 1.0, 1)
		set_task(2.5, "can_space_again", id)
		return PLUGIN_HANDLED;
	}
	else if (g_Boss[id] && !g_sBoss[id] && !g_oBoss[id] && can_space[id])
	{
		can_space[id] = false
		amx_make_space(0.5, 0.8, 0)
		set_task(10.0, "can_space_again", id)
		return PLUGIN_HANDLED;
	}
	return PLUGIN_CONTINUE;
}
public client_PreThink(id)
{
	if (is_user_alive(id))
	{
		if (!g_Boss[id])
		{
			if (g_the_die && get_cant_spawn(id) && cs_get_user_team(id) != CS_TEAM_SPECTATOR)
			{
				new name[64]
				get_user_name(id, name, 63)
				change_name(name, 63)
				user_silentkill(id)
				client_printcolor(0, "^x04[自我現實: /ctr%s^x04 10秒後進入遊戲 - 已被系統自動處死]", name)
			}
			if (rock_hit[id])
				set_speed_to_velocity(id, 0.1)

			if (rock_hit[id] && get_gametime() - hit[id] >= 2.0)
				rock_hit[id] = false
		}
	}
	if (!(pev(id, pev_flags) & FL_ONGROUND) && !g_onground_time[id] && is_user_alive(id) && is_user_connected(id) && !g_oBoss[id])
	{
		g_onground_time[id] = true
		set_task(10.0, "On_Ground_UP", id+1249)
	}
	if (pev(id, pev_flags) & FL_ONGROUND && g_onground_time[id] && is_user_alive(id) && is_user_connected(id))
	{
		g_onground_time[id] = false
		remove_task(id+1249)
	}
	return FMRES_IGNORED;
}
public client_PostThink(id)
{
	if (is_user_alive(id) && is_user_connected(id))
	{
		if (g_Boss[id] || g_usemodel[id] == 2 || g_usemodel[id] == 5)
			entity_set_int(id, EV_INT_watertype, -3)
	}
}
public fw_AddToFullPack(iHandle, e, iEntity, id, iFlags, iPlayer, pSet)
{
    	if (oberon_control[id] == iEntity)
   	{
      		set_es(iHandle, ES_RenderMode, kRenderTransAlpha)
     	 	set_es(iHandle, ES_RenderAmt, 150)
    	}
	if (g_victim[id] == iEntity)
	{
		new color[3] = {255, 0, 0}
		FX_Line(id, start[id], stop[id], color, 200)
	}
	if (target_ent[id] == iEntity)
		set_es(iHandle, ES_RenderAmt, 255.0)

	if (!iPlayer)
		return FMRES_IGNORED;

	if (id == iEntity)
		return FMRES_IGNORED;

	if (!is_user_alive(id) || !is_user_alive(iEntity))
		return FMRES_IGNORED;

	if (!g_Boss[iEntity] || g_oBoss[iEntity])
		return FMRES_IGNORED;

	new Float:PlayerOrigin[3]
	pev(iEntity, pev_origin, PlayerOrigin)
	PlayerOrigin[2] += 90.0
	engfunc(EngFunc_SetOrigin, g_playerbar[iEntity], PlayerOrigin)
	set_pev(g_playerbar[iEntity], pev_effects, pev(g_playerbar[iEntity], pev_effects) & ~EF_NODRAW)
	return FMRES_IGNORED;
}
public cmd_personal_reality(id, level, cid)
{
	if (!cmd_access(id, level, cid, 3))
		return PLUGIN_HANDLED;

	new Target[64], Type[32], target
	read_argv(1, Target, 63)
	read_argv(2, Type, 31)
	if (!cmd_target(id, Target))
		return PLUGIN_HANDLED;

	target = cmd_target(id, Target)
	if (str_to_num(Type) == 0)
		give_the_portalgun(target)
	else if (str_to_num(Type) == 1)
	{
		g_has_choose[target] = false
		show_menu_forever_gun(target)
	}
	else if (str_to_num(Type) == 2)
	{
		g_has_choose[target] = false
		show_menu_level_gun(target)
	}
	else if (str_to_num(Type) == 3)
	{
		g_has_choose[target] = false
		g_special_weapon_num[target]++
		give_the_plasma(target)
	}
	else if (str_to_num(Type) == 4)
	{
		g_has_choose[target] = false
		g_special_weapon_num[target]++
		give_the_giaf(target)
	}
	else if (str_to_num(Type) == 5)
	{
		if (++g_msgChannel > 9 || g_msgChannel < 3)
			g_msgChannel = 3

		new name[64], Float:verpos = 0.45 + float(g_msgChannel) / 35.0
		get_user_name(target, name, 63)
		change_name(name, 63)
		set_dhudmessage(255, 255, 255, 0.05, verpos, 0, 6.0, 6.0, 0.5, 0.15)
		show_dhudmessage(0, "%s : 奇怪...槍怎麼沒反應 ? 幹 ! 選到壞掉的槍", name)
		user_level_up(target, UP_CANT_USE_GUN)
		g_special_weapon_num[target] = 0
	}
	else if (str_to_num(Type) == 6)
		give_the_m4a1adminonly(target)
	else if (str_to_num(Type) == 7)
	{
		g_has_choosep[target] = false
		show_menu_player(target)
	}
	else if (str_to_num(Type) == 8)
		give_the_gravitygun(target)
	else if (str_to_num(Type) == 9)
		give_the_dmp7a1(target)
	else if (str_to_num(Type) == 10)
		give_the_m95(target)
	else if (str_to_num(Type) == 11)
		give_the_skull5(target)
	else if (str_to_num(Type) == 12)
		give_the_trg42(target)
	else if (str_to_num(Type) == 13)
		give_the_aw50(target)

	return PLUGIN_HANDLED;
}
public show_menu_level(id)
{
	if (!get_user_login(id))
	{
		client_printcolor(id, "^x04[自我現實: 請先登入]")
		return;
	}
	static menu[250], len
	len = 0
	len += formatex(menu[len], charsmax(menu) - len, "\y能力選單^n^n")
	len += formatex(menu[len], charsmax(menu) - len, "\r1.\w 分配能力^n")
	len += formatex(menu[len], charsmax(menu) - len, "\r2.\w 個人狀態^n")
	len += formatex(menu[len], charsmax(menu) - len, "\r3.\w 進行轉生^n")
	len += formatex(menu[len], charsmax(menu) - len, "\d幸運的效果是有機率無敵3秒^n")
	len += formatex(menu[len], charsmax(menu) - len, "\d以及有機率可以格擋特殊魔王的一擊必殺^n")
	len += formatex(menu[len], charsmax(menu) - len, "^n\r0.\w 離開")
	show_menu(id, KEYSMENU, menu, -1, "Level Menu")
}
public menu_level(id, key)
{
	switch (key)
	{
		case 0: show_menu_statpoint(id)
		case 1: show_status(id)
		case 2: show_menu_respawn(id)
	}
	return PLUGIN_HANDLED;
}
show_menu_statpoint(id)
{
	static menu[250], len
	len = 0
	len += formatex(menu[len], charsmax(menu) - len, "\y分配能力 \d[能力點: %d]^n^n", g_statpoint[id])
	len += formatex(menu[len], charsmax(menu) - len, "\r1.\w 攻擊 \y[%d / %d]^n^n", g_damage[id], ((g_respawn[id] * 5) + 25))
	len += formatex(menu[len], charsmax(menu) - len, "\r2.\w 血量 \y[%d / %d]^n^n", g_health[id], ((g_respawn[id] * 5) + 25))
	len += formatex(menu[len], charsmax(menu) - len, "\r3.\w 速度 \y[%d / %d]^n^n", g_speed[id], ((g_respawn[id] * 5) + 25))
	len += formatex(menu[len], charsmax(menu) - len, "\r4.\w 爆擊率 \y[%d / %d]^n^n", g_crit[id], ((g_respawn[id] * 5) + 25))
	len += formatex(menu[len], charsmax(menu) - len, "\r5.\w 幸運 \y[%d / %d]^n^n", g_lucky[id], ((g_respawn[id] * 5) + 25))
	len += formatex(menu[len], charsmax(menu) - len, "\r6.\w 重新配點 \y[花費%dζ]^n^n", g_level[id] * 5)
	len += formatex(menu[len], charsmax(menu) - len, "\r0.\w 離開")
	show_menu(id, KEYSMENU, menu, -1, "Stat Menu")
}
public menu_statpoint(id, key)
{
	switch (key)
	{
		case 0:
		{
			if (g_damage[id] == ((g_respawn[id] * 5) + 25))
			{
				client_printcolor(id, "^x04[自我現實: 攻擊最高只能點到/ctr%d^x04點]", ((g_respawn[id] * 5) + 25))
			}
			else
			{
				if (g_statpoint[id] > 0)
				{
					g_damage[id]++
					g_statpoint[id]--
				}
				else
				{
					client_printcolor(id, "^x04[自我現實: 能力點不足]")
				}
			}
			show_menu_statpoint(id)
		}
		case 1:
		{
			if (g_health[id] == ((g_respawn[id] * 5) + 25))
			{
				client_printcolor(id, "^x04[自我現實: 血量最高只能點到/ctr%d^x04點]", ((g_respawn[id] * 5) + 25))
			}
			else
			{
				if (g_statpoint[id] > 0)
				{
					g_health[id]++
					g_statpoint[id]--
				}
				else
				{
					client_printcolor(id, "^x04[自我現實: 能力點不足]")
				}
			}
			show_menu_statpoint(id)
		}
		case 2:
		{
			if (g_speed[id] == ((g_respawn[id] * 5) + 25))
			{
				client_printcolor(id, "^x04[自我現實: 速度最高只能點到/ctr%d^x04點]", ((g_respawn[id] * 5) + 25))
			}
			else
			{
				if (g_statpoint[id] > 0)
				{
					g_speed[id]++
					g_statpoint[id]--
				}
				else
				{
					client_printcolor(id, "^x04[自我現實: 能力點不足]")
				}
			}
			show_menu_statpoint(id)
		}
		case 3: 
		{
			if (g_crit[id] == ((g_respawn[id] * 5) + 25))
			{
				client_printcolor(id, "^x04[自我現實: 爆擊率最高只能點到/ctr%d^x04點]", ((g_respawn[id] * 5) + 25))
			}
			else
			{
				if (g_statpoint[id] > 0)
				{
					g_crit[id]++
					g_statpoint[id]--
				}
				else
				{
					client_printcolor(id, "^x04[自我現實: 能力點不足]")
				}
			}
			show_menu_statpoint(id)
		}
		case 4: 
		{
			if (g_lucky[id] == ((g_respawn[id] * 5) + 25))
			{
				client_printcolor(id, "^x04[自我現實: 幸運最高只能點到/ctr%d^x04點]", ((g_respawn[id] * 5) + 25))
			}
			else
			{
				if (g_statpoint[id] > 0)
				{
					g_lucky[id]++
					g_statpoint[id]--
				}
				else
				{
					client_printcolor(id, "^x04[自我現實: 能力點不足]")
				}
			}
			show_menu_statpoint(id)
		}
		case 5: 
		{
			if (g_damage[id] == 0 && g_health[id] == 0 && g_speed[id] == 0 && g_crit[id] == 0 && g_lucky[id] == 0)
			{
				client_printcolor(id, "^x04[自我現實: 你不需要重新配點]")
			}
			else
			{
				if (g_money[id] >= g_level[id] * 5)
				{
					g_statpoint[id] += (g_damage[id] + g_health[id] + g_speed[id] + g_crit[id] + g_lucky[id])
					g_damage[id] = 0
					g_health[id] = 0
					g_speed[id] = 0
					g_crit[id] = 0
					g_lucky[id] = 0
					g_money[id] -= g_level[id] * 5
					client_printcolor(id, "^x04[自我現實: 你重置了你的能力點]")
				}
				else
				{
					client_printcolor(id, "^x04[自我現實: ζ不足]")
				}
			}
			show_menu_statpoint(id)
		}
	}
	return PLUGIN_HANDLED;
}
public show_status(id)
{
	if (!get_user_login(id))
	{
		client_printcolor(id, "^x04[自我現實: 請先登入]")
		return;
	}
	new name[64]
	static menu[250], len
	get_user_name(id, name, 63)
	change_name(name, 63)
	len = 0
	len += formatex(menu[len], charsmax(menu) - len, "\y個人狀態^n^n", id)
	len += formatex(menu[len], charsmax(menu) - len, "\w名稱: \y%s \w等級: \y%d^n", name, g_level[id])
	get_user_name(id, name, 63)
	len += formatex(menu[len], charsmax(menu) - len, "\w真名: \y%s^n", name)
	len += formatex(menu[len], charsmax(menu) - len, "\w能力點: \y%d^n", g_statpoint[id])
	len += formatex(menu[len], charsmax(menu) - len, "\wζ: \y%d^n", g_money[id])
	len += formatex(menu[len], charsmax(menu) - len, "\wS幣: \y%d^n", g_smoney[id])
	len += formatex(menu[len], charsmax(menu) - len, "\wL幣: \y%d^n", g_lmoney[id])
	len += formatex(menu[len], charsmax(menu) - len, "\w轉生次數: \y%d^n", g_respawn[id])
	len += formatex(menu[len], charsmax(menu) - len, "^n\r0.\w 離開")
	show_menu(id, KEYSMENU, menu, -1, "Status Menu")
}
public menu_status(id, key)
{
	switch (key)
	{
		case 9:
		{
			return PLUGIN_HANDLED;
		}
		default: show_status(id)
	}
	return PLUGIN_HANDLED;
}
public show_menu_respawn(id)
{
	if (!get_user_login(id))
	{
		client_printcolor(id, "^x04[自我現實: 請先登入]")
		return;
	}
	static menu[250], len
	len = 0
	len += formatex(menu[len], charsmax(menu) - len, "\r轉生會重置所有成就 - 能力點 - ζ^n")
	len += formatex(menu[len], charsmax(menu) - len, "\r需要125等^n")
	len += formatex(menu[len], charsmax(menu) - len, "\r請確認是否要進行轉生?^n^n")
	len += formatex(menu[len], charsmax(menu) - len, "\w1. 是^n")
	len += formatex(menu[len], charsmax(menu) - len, "\w2. 否^n")
	show_menu(id, KEYSMENU, menu, -1, "Respawn Menu")
}
public menu_respawn(id, key)
{
	switch (key)
	{
		case 0:
		{
			if (g_respawn[id] >= 5)
			{
				client_printcolor(id, "^x04[自我現實: 你的轉生數已滿了]")
				return PLUGIN_HANDLED;
			}
			if (g_level[id] >= 125)
			{
				new name[64]
				get_user_name(id, name, 63)
				change_name(name, 63)
				g_statpoint[id] = 50
				g_crit[id] = 0
				g_lucky[id] = 0
				g_damage[id] = 0
				g_speed[id] = 0
				g_health[id] = 0
				g_level[id] = 0
				g_shop_buy_num[id] = 0
				g_money[id] = 0
				g_round_kill_boss_num[id] = 0
				g_has_fire[id] = false
				g_has_hurt[id] = false
				g_dead_respawn[id] = false
				g_respawn_num[id] = 0
				g_fire_num[id] = 0
				g_hurt_num[id] = 0
				g_item_damage[id] = 0
				g_catch_rock_num[id] = 0
				g_drop_weapon_num[id] = 0
				g_catch_laser_num[id] = 0
				g_kill_oberon_num[id] = 0
				g_vector_get_num[id] = 0
				g_select_gun_menu[id] = false
				g_catch_space_num[id] = 0
				g_hurt_by_knife[id] = 0
				g_m79_kill_num[id] = 0
				g_strong_kill_num[id] = 0
				g_god_axe_kill_num[id] = 0
				g_plasma_kill_num[id] = 0
				g_skullaxe_kill_num[id] = 0
				g_kill_door_num[id] = 0
				g_special_weapon_num[id] = 0
				g_attack1_teammate[id] = 0
				g_attack2_teammate[id] = 0
				g_use_money[id] = 0
				g_use_knife_hit_back[id] = 0
				g_hurt_by_hegrenade[id] = 0
				g_get_money_by_damage[id] = 0
				g_boss_hit_num[id] = 0
				g_damage_money[id] = 0
				g_kill_boss_num[id] = 0
				g_kill_sp_boss_num[id] = 0
				g_hs_kill_boss_num[id] = 0
				g_bug_boss_kill_human_num[id] = 0
				g_sp_boss_bedie_kill[id] = 0
				g_sp_boss_bedie_attack[id] = 0
				g_lucky_num[id] = 0
				g_all_damage[id] = 0
				g_crit_num[id] = 0
				g_round_up[id] = 0
				g_clear_up[id] = 0
				g_lastgun_kill[id] = 0
				g_on_boss[id] = 0
				g_play_round[id] = 0
				g_respawn_human_num[id] = 0
				g_damage_up_num[id] = 0
				g_oberon_bw_kill_num[id] = 0
				g_oberon_sw_kill_num[id] = 0
				g_respawn[id]++
				if (g_up[id][UP_FIRST_RESPAWN])
				{
					g_clear_up[id]++
					g_statpoint[id]++
				}
				for (new i = 0;i < MAX_UP;i++)
				{
					if (i == UP_FIRST_RESPAWN)
						continue;

					g_up[id][i] = 0
				}
				for (new t = 0;t < 10;t++)
					g_damage_teammate[id][t] = 0

				for (new i = 0;i < 7;i++)
					g_shop_has_buy[id][i] = 0

				user_level_up(id, UP_FIRST_RESPAWN)
				if (g_respawn[id] >= 5)
					user_level_up(id, UP_5_RESPAWN)

				client_printcolor(0, "^x04[自我現實: ^x03%s ^x04進行了第 ^x03%d ^x04次轉生]", name, g_respawn[id])
			}
			else
			{
				client_printcolor(id, "^x04[自我現實: 你的等級不足]")
			}
		}
		case 1: return PLUGIN_HANDLED;
	}
	return PLUGIN_HANDLED;
}
public show_menu_choose(id)
{
	if (!get_user_login(id))
	{
		client_printcolor(id, "^x04[自我現實: 請先登入]")
		return;
	}
	if (g_Boss[id])
		return;

	static menu[250], len
	len = 0
	len += formatex(menu[len], charsmax(menu) - len, "\y是否要選擇角色?^n^n")
	len += formatex(menu[len], charsmax(menu) - len, "\r1.\w 是^n")
	len += formatex(menu[len], charsmax(menu) - len, "\r2.\w 否^n")
	show_menu(id, KEYSMENU, menu, -1, "Choose Menu")
}
public menu_choose(id, key)
{
	switch (key)
	{
		case 0: show_menu_player(id)
		case 1: show_menu_gun(id)
		default: show_menu_choose(id)
	}
	return PLUGIN_HANDLED;
}
public show_menu_gun(id)
{
	if (!get_user_login(id))
	{
		client_printcolor(id, "^x04[自我現實: 請先登入]")
		return;
	}
	if (g_Boss[id] || !is_user_alive(id))
		return;

	if (g_has_choose[id] && cs_get_user_team(id) != CS_TEAM_SPECTATOR)
	{
		client_printcolor(id, "^x04[自我現實: 你已經選過槍了]")
		return;
	}
	static menu[250], len
	len = 0
	len += formatex(menu[len], charsmax(menu) - len, "\y選擇一種方式^n^n")
	len += formatex(menu[len], charsmax(menu) - len, "\r1.\w 永久槍^n")
	len += formatex(menu[len], charsmax(menu) - len, "\r2.\w 等級槍^n")
	show_menu(id, KEYSMENU, menu, -1, "Gun Menu")
}
public menu_gun(id, key)
{
	switch (key)
	{
		case 0: show_menu_forever_gun(id)
		case 1: show_menu_level_gun(id)
		default: show_menu_gun(id)
	}
	return PLUGIN_HANDLED;
}
public show_menu_player(id)
{
	if (!get_user_login(id))
	{
		client_printcolor(id, "^x04[自我現實: 請先登入]")
		return;
	}
	if (g_Boss[id] || !is_user_alive(id))
		return;

	if (g_has_choosep[id] && cs_get_user_team(id) != CS_TEAM_SPECTATOR)
	{
		client_printcolor(id, "^x04[自我現實: 你已經選過角色了]")
		return;
	}
	static menu[250], len
	len = 0
	len += formatex(menu[len], charsmax(menu) - len, "\y選擇一個角色^n^n")
	len += formatex(menu[len], charsmax(menu) - len, "%s1. %s射命丸ザヤとは^n", g_model[id][0] ? "\r" : "\d", g_model[id][0] ? "\w" : "\d")
	len += formatex(menu[len], charsmax(menu) - len, "%s2. %sEzio^n", g_model[id][1] ? "\r" : "\d", g_model[id][1] ? "\w" : "\d")
	len += formatex(menu[len], charsmax(menu) - len, "%s3. %sサニ一ミルク^n", g_model[id][2] ? "\r" : "\d", g_model[id][2] ? "\w" : "\d")
	len += formatex(menu[len], charsmax(menu) - len, "%s4. %s鈴仙・優曇華院・イナバ^n", g_model[id][3] ? "\r" : "\d", g_model[id][3] ? "\w" : "\d")
	len += formatex(menu[len], charsmax(menu) - len, "%s5. %sレア様^n", get_user_flags(id) & ADMIN_CHAT ? "\r" : "\d", get_user_flags(id) & ADMIN_CHAT ? "\w" : "\d")
	len += formatex(menu[len], charsmax(menu) - len, "%s6. %s隱藏自己的外觀^n", cs_get_user_team(id) == CS_TEAM_SPECTATOR ? "\r" : "\d", cs_get_user_team(id) == CS_TEAM_SPECTATOR ? "\w" : "\d")
	len += formatex(menu[len], charsmax(menu) - len, "%s7. %s顯示自己的外觀^n", cs_get_user_team(id) == CS_TEAM_SPECTATOR ? "\r" : "\d", cs_get_user_team(id) == CS_TEAM_SPECTATOR ? "\w" : "\d")
	len += formatex(menu[len], charsmax(menu) - len, "\r8. \w返回永久槍選擇^n")
	len += formatex(menu[len], charsmax(menu) - len, "\r9. \w返回等級槍選擇^n")
	show_menu(id, KEYSMENU, menu, -1, "CP Menu")
}
public menu_player(id, key)
{
	if (!is_user_alive(id))
	{
		client_printcolor(id, "^x04[自我現實: 此功能需要活著才能使用]")
		return PLUGIN_HANDLED;
	}
	if (g_Boss[id])
		return PLUGIN_HANDLED;

	if (g_has_choosep[id] && cs_get_user_team(id) != CS_TEAM_SPECTATOR)
	{
		client_printcolor(id, "^x04[自我現實: 你已經選過角色了]")
		return PLUGIN_HANDLED;
	}
	switch (key)
	{
		case 0:
		{
			if (g_model[id][0])
			{
				client_printcolor(id, "^x04[自我現實: 你選擇了/ctr射命丸ザヤとは^x04]")
				if (cs_get_user_team(id) == CS_TEAM_SPECTATOR)
					cs_set_player_model(id, "MaMay")
				else
					cs_set_player_model(id, "ShameimaruAyaV2")

				fm_set_rendering(id)
				g_usemodel[id] = 1
				g_has_choosep[id] = true
				show_menu_gun(id)
			}
			else
			{
				client_printcolor(id, "^x04[自我現實: 你並沒有/ctr射命丸ザヤとは^x04]")
				show_menu_player(id)
			}
		}
		case 1:
		{
			if (g_model[id][1])
			{
				client_printcolor(id, "^x04[自我現實: 你選擇了/ctrEzio^x04]")
				if (cs_get_user_team(id) == CS_TEAM_SPECTATOR)
					cs_set_player_model(id, "MaMay")
				else
					cs_set_player_model(id, "Ezio")

				fm_set_rendering(id)
				g_usemodel[id] = 2
				g_has_choosep[id] = true
				show_menu_gun(id)
			}
			else
			{
				client_printcolor(id, "^x04[自我現實: 你並沒有/ctrEzio^x04]")
				show_menu_player(id)
			}
		}
		case 2:
		{
			if (g_model[id][2])
			{
				client_printcolor(id, "^x04[自我現實: 你選擇了/ctrサニ一ミルク^x04]")
				if (cs_get_user_team(id) == CS_TEAM_SPECTATOR)
					cs_set_player_model(id, "MaMay")
				else
					cs_set_player_model(id, "SunnyMilkV2")

				fm_set_rendering(id)
				g_usemodel[id] = 3
				g_has_choosep[id] = true
				show_menu_gun(id)
			}
			else
			{
				client_printcolor(id, "^x04[自我現實: 你並沒有/ctrサニ一ミルク^x04]")
				show_menu_player(id)
			}
		}
		case 3:
		{
			if (g_model[id][3])
			{
				client_printcolor(id, "^x04[自我現實: 你選擇了/ctr鈴仙・優曇華院・イナバ^x04]")
				if (cs_get_user_team(id) == CS_TEAM_SPECTATOR)
					cs_set_player_model(id, "MaMay")
				else
					cs_set_player_model(id, "ReisenUdongeinInabaV2")

				fm_set_rendering(id)
				g_has_choosep[id] = true
				show_menu_gun(id)
			}
			else
			{
				client_printcolor(id, "^x04[自我現實: 你並沒有/ctr鈴仙・優曇華院・イナバ^x04]")
				show_menu_player(id)
			}
		}
		case 4:
		{
			if (get_user_flags(id) & ADMIN_CHAT || g_special[id])
			{
				client_printcolor(id, "^x04[自我現實: 你選擇了/ctrレア様^x04]")
				if (cs_get_user_team(id) == CS_TEAM_SPECTATOR)
					cs_set_player_model(id, "MaMay")
				else
					cs_set_player_model(id, "LieAdminV3")

				fm_set_rendering(id)
				g_usemodel[id] = 5
				g_has_choosep[id] = true
				show_menu_gun(id)
			}
			else
			{
				client_printcolor(id, "^x04[自我現實: 你並沒有/ctrレア様^x04]")
				show_menu_player(id)
			}
		}
		case 5:
		{
			if (cs_get_user_team(id) == CS_TEAM_SPECTATOR)
			{
				client_printcolor(id, "^x04[自我現實: 你隱藏了自己的外觀]")
				fm_set_rendering(id, kRenderFxGlowShell, 0, 0, 0, kRenderTransAlpha, 0)
			}
			else
				client_printcolor(id, "^x04[自我現實: 此為觀戰者專用]")

			show_menu_player(id)
		}
		case 6:
		{
			if (cs_get_user_team(id) == CS_TEAM_SPECTATOR)
			{
				client_printcolor(id, "^x04[自我現實: 你顯示了自己的外觀]")
				fm_set_rendering(id, kRenderFxGlowShell, 0, 0, 0, kRenderTransAlpha, 255)
			}
			else
				client_printcolor(id, "^x04[自我現實: 此為觀戰者專用]")

			show_menu_player(id)
		}
		case 7: show_menu_forever_gun(id)
		case 8: show_menu_level_gun(id)
		default: show_menu_player(id)
	}
	return PLUGIN_HANDLED;
}
public show_menu_buy_gun(id)
{
	if (g_Boss[id] || (cs_get_user_team(id) != CS_TEAM_CT && cs_get_user_team(id) != CS_TEAM_T) || !is_user_alive(id))
		return;

	if (!get_user_login(id))
	{
		client_printcolor(id, "^x04[自我現實: 請先登入]")
		return;
	}
	static menu[250], len
	len = 0
	len += formatex(menu[len], charsmax(menu) - len, "\w購買武器^n^n")
	len += formatex(menu[len], charsmax(menu) - len, "\r1. \wM79%s[40 ζ]^n", g_money[id] >= 40 ? "\y" : "\d")
	len += formatex(menu[len], charsmax(menu) - len, "\r2. \w反逆甲%s[30 ζ]^n", g_money[id] >= 30 ? "\y" : "\d")
	len += formatex(menu[len], charsmax(menu) - len, "\r3. \w鋒利銀刃%s[80 ζ]^n", g_money[id] >= 80 ? "\y" : "\d")
	len += formatex(menu[len], charsmax(menu) - len, "\r4. \w狂戰巨斧%s[90 ζ]^n", g_money[id] >= 90 ? "\y" : "\d")
	len += formatex(menu[len], charsmax(menu) - len, "\r5. \w衝擊結界%s[20 ζ]^n", g_money[id] >= 20 ? "\y" : "\d")
	len += formatex(menu[len], charsmax(menu) - len, "\r6. \w天使之淚%s[200 ζ]^n", g_money[id] >= 200 ? "\y" : "\d")
	len += formatex(menu[len], charsmax(menu) - len, "\r7. \w天使的祝福%s[50 ζ]^n", g_money[id] >= 50 ? "\y" : "\d")
	if (get_user_flags(id) & ADMIN_CHAT)
		len += formatex(menu[len], charsmax(menu) - len, "\r8. \w%s傳送槍^n", get_user_flags(id) & ADMIN_CHAT ? "\w" : "\d")

	len += formatex(menu[len], charsmax(menu) - len, "\r0. \w離開^n")
	show_menu(id, KEYSMENU, menu, -1, "BuyGunMenu")
}
public menu_buy_gun(id, key)
{
	if (g_Boss[id] || (cs_get_user_team(id) != CS_TEAM_CT && cs_get_user_team(id) != CS_TEAM_T) || !is_user_alive(id))
		return PLUGIN_HANDLED;

	switch (key)
	{
		case 0: give_the_m79(id)
		case 1: give_the_curse(id)
		case 2: give_the_strong(id)
		case 3: give_the_skullaxe(id)
		case 4: give_the_shockwave(id)
		case 5: give_the_respawn(id)
		case 6: give_the_damage_up(id)
		case 7:
		{
			if (get_user_flags(id) & ADMIN_CHAT)
				give_the_portalgun(id)
			else
				show_menu_buy_gun(id)
		}
		case 9: return PLUGIN_HANDLED;
		default: show_menu_buy_gun(id)
	}
	return PLUGIN_HANDLED;
}
public show_menu_buy_forever_gun(id)
{
	if (!get_user_login(id))
	{
		client_printcolor(id, "^x04[自我現實: 請先登入]")
		return;
	}
	static menu[250], len
	len = 0
	len += formatex(menu[len], charsmax(menu) - len, "\w選擇一種購買方式^n^n")
	len += formatex(menu[len], charsmax(menu) - len, "\r1. \wL幣^n")
	len += formatex(menu[len], charsmax(menu) - len, "\r2. \wS幣^n")
	len += formatex(menu[len], charsmax(menu) - len, "\r3. \w槍枝資訊^n")
	len += formatex(menu[len], charsmax(menu) - len, "\r0. \w離開^n")
	show_menu(id, KEYSMENU, menu, -1, "BFG Menu")
}
public menu_buy_forever_gun(id, key)
{
	switch (key)
	{
		case 0: show_menu_lbuy_forever_gun(id)
		case 1: show_menu_sbuy_forever_gun(id)
		case 2: show_menu_forever_gun_info(id)
		case 9: return PLUGIN_HANDLED;
		default: show_menu_buy_forever_gun(id)
	}
	return PLUGIN_HANDLED;
}
public show_menu_buy_player(id)
{
	if (!get_user_login(id))
	{
		client_printcolor(id, "^x04[自我現實: 請先登入]")
		return;
	}
	static menu[250], len
	len = 0
	len += formatex(menu[len], charsmax(menu) - len, "\w選擇一種購買方式^n^n")
	len += formatex(menu[len], charsmax(menu) - len, "\r1. \wL幣^n")
	len += formatex(menu[len], charsmax(menu) - len, "\r2. \wS幣^n")
	len += formatex(menu[len], charsmax(menu) - len, "\r3. \w角色資訊^n")
	len += formatex(menu[len], charsmax(menu) - len, "\r0. \w離開^n")
	show_menu(id, KEYSMENU, menu, -1, "BuyPlayerMenu")
}
public menu_buy_player(id, key)
{
	switch (key)
	{
		case 0: show_menu_lbuy_player(id)
		case 1: show_menu_sbuy_player(id)
		case 2: show_menu_player_info(id)
		case 9: return PLUGIN_HANDLED;
		default: show_menu_buy_player(id)
	}
	return PLUGIN_HANDLED;
}
public show_menu_player_info(id)
{
	if (!get_user_login(id))
	{
		client_printcolor(id, "^x04[自我現實: 請先登入]")
		return;
	}
	new menu = menu_create("角色資訊", "menu_player_info")
	menu_additem(menu, "射命丸ザヤとは", "1", 0)
	menu_additem(menu, "Ezio", "2", 0)
	menu_additem(menu, "サニ一ミルク", "3", 0)
	menu_additem(menu, "鈴仙・優曇華院・イナバ", "4", 0)
	menu_setprop(menu, MPROP_EXIT, MEXIT_ALL)
	menu_display(id, menu, 0)
}
public menu_player_info(id, menu, item)
{
	if (item == MENU_EXIT || !get_user_login(id))
	{
		menu_destroy(menu)
		return PLUGIN_HANDLED;
	}
	new data[6], iName[64], access, callback
	menu_item_getinfo(menu, item, access, data, 5, iName, 63, callback)
	new key = str_to_num(data)
	switch (key)
	{
		case 1: client_printcolor(id, "^x04[自我現實: 此角色可以讓攻擊力兩倍]")
		case 2: client_printcolor(id, "^x04[自我現實: 此角色可以讓速度增加30以及無摔傷]")
		case 3: client_printcolor(id, "^x04[自我現實: 此角色可以讓重力減少3/10]")
		case 4: client_printcolor(id, "^x04[自我現實: 此角色可以讓重力減少1/10 - 攻擊力1.5倍 - 速度增加15]")
	}
	show_menu_player_info(id)
	return PLUGIN_HANDLED;
}
public show_menu_forever_gun_info(id)
{
	if (!get_user_login(id))
	{
		client_printcolor(id, "^x04[自我現實: 請先登入]")
		return;
	}
	new menu = menu_create("槍枝資訊", "menu_forever_gun_info")
	menu_additem(menu, "AK47-60R", "1", 0)
	menu_additem(menu, "M4A1-60R", "2", 0)
	menu_additem(menu, "M24", "3", 0)
	menu_additem(menu, "MG3", "4", 0)
	menu_additem(menu, "F2000", "5", 0)
	menu_additem(menu, "WA2000", "6", 0)
	menu_additem(menu, "邪靈契約", "7", 0)
	menu_additem(menu, "極道狂徒", "8", 0)
	menu_setprop(menu, MPROP_EXIT, MEXIT_ALL)
	menu_display(id, menu, 0)
}
public menu_forever_gun_info(id, menu, item)
{
	if (item == MENU_EXIT || !get_user_login(id))
	{
		menu_destroy(menu)
		return PLUGIN_HANDLED;
	}
	new data[6], iName[64], access, callback
	menu_item_getinfo(menu, item, access, data, 5, iName, 63, callback)
	new key = str_to_num(data)
	switch (key)
	{
		case 1: client_printcolor(id, "^x04[自我現實: 此永久槍在攻擊時可以增加200傷害]")
		case 2: client_printcolor(id, "^x04[自我現實: 此永久槍在攻擊時可以增加100傷害 - 降低一半的後座力]")
		case 3: client_printcolor(id, "^x04[自我現實: 此永久槍在攻擊時可以增加六倍的傷害]")
		case 4: client_printcolor(id, "^x04[自我現實: 此永久槍在攻擊時會減少34％的傷害但是子彈多以及射擊速度快]")
		case 5: client_printcolor(id, "^x04[自我現實: 此永久槍在攻擊時可以增加100的傷害]")
		case 6: client_printcolor(id, "^x04[自我現實: 此永久槍在攻擊時可以增加三倍的傷害]")
		case 7: client_printcolor(id, "^x04[自我現實: 此永久槍在攻擊時可以增加150的傷害]")
		case 8: client_printcolor(id, "^x04[自我現實: 此永久槍在攻擊時可以增加100的傷害]")
	}
	show_menu_forever_gun_info(id)
	return PLUGIN_HANDLED;
}
public show_menu_lbuy_forever_gun(id)
{
	if (!get_user_login(id))
	{
		client_printcolor(id, "^x04[自我現實: 請先登入]")
		return;
	}
	static menu[250], len
	len = 0
	len += formatex(menu[len], charsmax(menu) - len, "\w購買永久槍^n^n")
	if (g_forever_gun[id][CSW_AK47])
		len += formatex(menu[len], charsmax(menu) - len, "\r1. \wAK47-60R\d[持有]^n")
	else
		len += formatex(menu[len], charsmax(menu) - len, "\r1. \wAK47-60R%s[%d L]^n", g_lmoney[id] >= ak4760r_lcost ? "\y" : "\d", ak4760r_lcost)

	if (g_forever_gun[id][CSW_M4A1])
		len += formatex(menu[len], charsmax(menu) - len, "\r2. \wM4A1-60R\d[持有]^n")
	else
		len += formatex(menu[len], charsmax(menu) - len, "\r2. \wM4A1-60R%s[%d L]^n", g_lmoney[id] >= m4a160r_lcost ? "\y" : "\d", m4a160r_lcost)

	if (g_forever_gun[id][CSW_SCOUT])
		len += formatex(menu[len], charsmax(menu) - len, "\r3. \wM24\d[持有]^n")
	else
		len += formatex(menu[len], charsmax(menu) - len, "\r3. \wM24%s[%d L]^n", g_lmoney[id] >= m24_lcost ? "\y" : "\d", m24_lcost)

	if (g_forever_gun[id][CSW_M249])
		len += formatex(menu[len], charsmax(menu) - len, "\r4. \wMG3\d[持有]^n")
	else
		len += formatex(menu[len], charsmax(menu) - len, "\r4. \wMG3%s[%d L]^n", g_lmoney[id] >= mg3_lcost ? "\y" : "\d", mg3_lcost)

	if (g_forever_gun[id][CSW_SG552])
		len += formatex(menu[len], charsmax(menu) - len, "\r5. \wF2000\d[持有]^n")
	else
		len += formatex(menu[len], charsmax(menu) - len, "\r5. \wF2000%s[%d L]^n", g_lmoney[id] >= f2000_lcost ? "\y" : "\d", f2000_lcost)

	if (g_forever_gun[id][CSW_G3SG1])
		len += formatex(menu[len], charsmax(menu) - len, "\r6. \wWA2000\d[持有]^n")
	else
		len += formatex(menu[len], charsmax(menu) - len, "\r6. \wWA2000%s[%d L]^n", g_lmoney[id] >= wa2000_lcost ? "\y" : "\d", wa2000_lcost)

	if (g_forever_gun[id][CSW_GALIL])
		len += formatex(menu[len], charsmax(menu) - len, "\r7. \w邪靈契約\d[持有]^n")
	else
		len += formatex(menu[len], charsmax(menu) - len, "\r7. \w邪靈契約%s[%d L]^n", g_lmoney[id] >= k1ases_lcost ? "\y" : "\d", k1ases_lcost)

	if (g_forever_gun[id][CSW_P90])
		len += formatex(menu[len], charsmax(menu) - len, "\r8. \w極道狂徒\d[持有]^n")
	else
		len += formatex(menu[len], charsmax(menu) - len, "\r8. \w極道狂徒%s[%d L]^n", g_lmoney[id] >= thompson_lcost ? "\y" : "\d", thompson_lcost)

	len += formatex(menu[len], charsmax(menu) - len, "\r0. \w離開^n")
	show_menu(id, KEYSMENU, menu, -1, "L Menu")
}
public menu_lbuy_forever_gun(id, key)
{
	switch (key)
	{
		case 0:
		{
			if (!g_forever_gun[id][CSW_AK47])
			{
				if (g_lmoney[id] >= ak4760r_lcost)
				{
					new name[64]
					get_user_name(id, name, 63)
					change_name(name, 63)
					g_forever_gun[id][CSW_AK47] = ak4760r_lcost
					g_lmoney[id] -= ak4760r_lcost
					client_printcolor(id, "^x04[自我現實: /ctrAK47-60R^x04在攻擊時可以增加200傷害]")
					client_printcolor(0, "^x04[自我現實: /ctr%s ^x04購買了 /ctrAK47-60R^x04]", name)
				}
				else
					client_printcolor(id, "^x04[自我現實: 你的L幣不足]")
			}
			else
				client_printcolor(id, "^x04[自我現實: 此永久槍在攻擊時可以增加200傷害]")
		}
		case 1:
		{
			if (!g_forever_gun[id][CSW_M4A1])
			{
				if (g_lmoney[id] >= m4a160r_lcost)
				{
					new name[64]
					get_user_name(id, name, 63)
					change_name(name, 63)
					g_forever_gun[id][CSW_M4A1] = m4a160r_lcost
					g_lmoney[id] -= m4a160r_lcost
					client_printcolor(id, "^x04[自我現實: /ctrM4A1-60R^x04在攻擊時可以增加100傷害 - 降低一半的後座力]")
					client_printcolor(0, "^x04[自我現實: /ctr%s ^x04購買了 /ctrM4A1-60R^x04]", name)
				}
				else
					client_printcolor(id, "^x04[自我現實: 你的L幣不足]")
			}
			else
				client_printcolor(id, "^x04[自我現實: 此永久槍在攻擊時可以增加100傷害 - 降低一半的後座力]")
		}
		case 2:
		{
			if (!g_forever_gun[id][CSW_SCOUT])
			{
				if (g_lmoney[id] >= m24_lcost)
				{
					new name[64]
					get_user_name(id, name, 63)
					change_name(name, 63)
					g_forever_gun[id][CSW_SCOUT] = m24_lcost
					g_lmoney[id] -= m24_lcost
					client_printcolor(id, "^x04[自我現實: /ctrM24^x04在攻擊時可以增加六倍的傷害]")
					client_printcolor(0, "^x04[自我現實: /ctr%s ^x04購買了 /ctrM24^x04]", name)
				}
				else
					client_printcolor(id, "^x04[自我現實: 你的L幣不足]")
			}
			else
				client_printcolor(id, "^x04[自我現實: 此永久槍在攻擊時可以增加六倍的傷害]")
		}
		case 3:
		{
			if (!g_forever_gun[id][CSW_M249])
			{
				if (g_lmoney[id] >= mg3_lcost)
				{
					new name[64]
					get_user_name(id, name, 63)
					change_name(name, 63)
					g_forever_gun[id][CSW_M249] = mg3_lcost
					g_lmoney[id] -= mg3_lcost
					client_printcolor(id, "^x04[自我現實: /ctrMG3^x04在攻擊時會減少34％的傷害但是子彈多以及射擊速度快]")
					client_printcolor(0, "^x04[自我現實: /ctr%s ^x04購買了 /ctrMG3^x04]", name)
				}
				else
					client_printcolor(id, "^x04[自我現實: 你的L幣不足]")
			}
			else
				client_printcolor(id, "^x04[自我現實: 此永久槍在攻擊時會減少34％的傷害但是子彈多以及射擊速度快]")
		}
		case 4:
		{
			if (!g_forever_gun[id][CSW_SG552])
			{
				if (g_lmoney[id] >= f2000_lcost)
				{
					new name[64]
					get_user_name(id, name, 63)
					change_name(name, 63)
					g_forever_gun[id][CSW_SG552] = f2000_lcost
					g_lmoney[id] -= f2000_lcost
					client_printcolor(id, "^x04[自我現實: /ctrF2000^x04在攻擊時可以增加100的傷害]")
					client_printcolor(0, "^x04[自我現實: /ctr%s ^x04購買了 /ctrF2000^x04]", name)
				}
				else
					client_printcolor(id, "^x04[自我現實: 你的L幣不足]")
			}
			else
				client_printcolor(id, "^x04[自我現實: 此永久槍在攻擊時可以增加100的傷害]")
		}
		case 5:
		{
			if (!g_forever_gun[id][CSW_G3SG1])
			{
				if (g_lmoney[id] >= wa2000_lcost)
				{
					new name[64]
					get_user_name(id, name, 63)
					change_name(name, 63)
					g_forever_gun[id][CSW_G3SG1] = wa2000_lcost
					g_lmoney[id] -= wa2000_lcost
					client_printcolor(id, "^x04[自我現實: /ctrWA2000^x04在攻擊時可以增加三倍的傷害]")
					client_printcolor(0, "^x04[自我現實: /ctr%s ^x04購買了 /ctrWA2000^x04]", name)
				}
				else
					client_printcolor(id, "^x04[自我現實: 你的L幣不足]")
			}
			else
				client_printcolor(id, "^x04[自我現實: 此永久槍在攻擊時可以增加三倍的傷害]")
		}
		case 6:
		{
			if (!g_forever_gun[id][CSW_GALIL])
			{
				if (g_lmoney[id] >= k1ases_lcost)
				{
					new name[64]
					get_user_name(id, name, 63)
					change_name(name, 63)
					g_forever_gun[id][CSW_GALIL] = k1ases_lcost
					g_lmoney[id] -= k1ases_lcost
					client_printcolor(id, "^x04[自我現實: /ctr邪靈契約^x04在攻擊時可以增加150的傷害]")
					client_printcolor(0, "^x04[自我現實: /ctr%s ^x04購買了 /ctr邪靈契約^x04]", name)
				}
				else
					client_printcolor(id, "^x04[自我現實: 你的L幣不足]")
			}
			else
				client_printcolor(id, "^x04[自我現實: 此永久槍在攻擊時可以增加150的傷害]")
		}
		case 7:
		{
			if (!g_forever_gun[id][CSW_P90])
			{
				if (g_lmoney[id] >= thompson_lcost)
				{
					new name[64]
					get_user_name(id, name, 63)
					change_name(name, 63)
					g_forever_gun[id][CSW_P90] = thompson_lcost
					g_lmoney[id] -= thompson_lcost
					client_printcolor(id, "^x04[自我現實: /ctr極道狂徒^x04在攻擊時可以增加100的傷害]")
					client_printcolor(0, "^x04[自我現實: /ctr%s ^x04購買了 /ctr極道狂徒^x04]", name)
				}
				else
					client_printcolor(id, "^x04[自我現實: 你的L幣不足]")
			}
			else
				client_printcolor(id, "^x04[自我現實: 此永久槍在攻擊時可以增加100的傷害]")
		}
		case 9: return PLUGIN_HANDLED;
		default: show_menu_lbuy_forever_gun(id)
	}
	return PLUGIN_HANDLED;
}
public show_menu_sbuy_forever_gun(id)
{
	if (!get_user_login(id))
	{
		client_printcolor(id, "^x04[自我現實: 請先登入]")
		return;
	}
	static menu[250], len
	len = 0
	len += formatex(menu[len], charsmax(menu) - len, "\w購買永久槍^n^n")
	if (g_forever_gun[id][CSW_AK47])
		len += formatex(menu[len], charsmax(menu) - len, "\r1. \wAK47-60R\d[持有]^n")
	else
		len += formatex(menu[len], charsmax(menu) - len, "\r1. \wAK47-60R%s[%d S]^n", g_smoney[id] >= ak4760r_scost ? "\y" : "\d", ak4760r_scost)

	if (g_forever_gun[id][CSW_M4A1])
		len += formatex(menu[len], charsmax(menu) - len, "\r2. \wM4A1-60R\d[持有]^n")
	else
		len += formatex(menu[len], charsmax(menu) - len, "\r2. \wM4A1-60R%s[%d S]^n", g_smoney[id] >= m4a160r_scost ? "\y" : "\d", m4a160r_scost)

	if (g_forever_gun[id][CSW_SCOUT])
		len += formatex(menu[len], charsmax(menu) - len, "\r3. \wM24\d[持有]^n")
	else
		len += formatex(menu[len], charsmax(menu) - len, "\r3. \wM24%s[%d S]^n", g_smoney[id] >= m24_scost ? "\y" : "\d", m24_scost)

	if (g_forever_gun[id][CSW_M249])
		len += formatex(menu[len], charsmax(menu) - len, "\r4. \wMG3\d[持有]^n")
	else
		len += formatex(menu[len], charsmax(menu) - len, "\r4. \wMG3%s[%d S]^n", g_smoney[id] >= mg3_scost ? "\y" : "\d", mg3_scost)

	if (g_forever_gun[id][CSW_SG552])
		len += formatex(menu[len], charsmax(menu) - len, "\r5. \wF2000\d[持有]^n")
	else
		len += formatex(menu[len], charsmax(menu) - len, "\r5. \wF2000%s[%d S]^n", g_smoney[id] >= f2000_scost ? "\y" : "\d", f2000_scost)

	if (g_forever_gun[id][CSW_G3SG1])
		len += formatex(menu[len], charsmax(menu) - len, "\r6. \wWA2000\d[持有]^n")
	else
		len += formatex(menu[len], charsmax(menu) - len, "\r6. \wWA2000%s[%d S]^n", g_smoney[id] >= wa2000_scost ? "\y" : "\d", wa2000_scost)

	if (g_forever_gun[id][CSW_GALIL])
		len += formatex(menu[len], charsmax(menu) - len, "\r7. \w邪靈契約\d[持有]^n")
	else
		len += formatex(menu[len], charsmax(menu) - len, "\r7. \w邪靈契約%s[%d S]^n", g_smoney[id] >= k1ases_scost ? "\y" : "\d", k1ases_scost)

	if (g_forever_gun[id][CSW_P90])
		len += formatex(menu[len], charsmax(menu) - len, "\r8. \w極道狂徒\d[持有]^n")
	else
		len += formatex(menu[len], charsmax(menu) - len, "\r8. \w極道狂徒%s[%d S]^n", g_smoney[id] >= thompson_scost ? "\y" : "\d", thompson_scost)

	len += formatex(menu[len], charsmax(menu) - len, "\r0. \w離開^n")
	show_menu(id, KEYSMENU, menu, -1, "S Menu")
}
public menu_sbuy_forever_gun(id, key)
{
	switch (key)
	{
		case 0:
		{
			if (!g_forever_gun[id][CSW_AK47])
			{
				if (g_smoney[id] >= ak4760r_scost)
				{
					new name[64]
					get_user_name(id, name, 63)
					change_name(name, 63)
					g_forever_gun[id][CSW_AK47] = ak4760r_scost
					g_smoney[id] -= ak4760r_scost
					client_printcolor(id, "^x04[自我現實: /ctrAK47-60R^x04在攻擊時可以增加200傷害]")
					client_printcolor(0, "^x04[自我現實: /ctr%s ^x04購買了 /ctrAK47-60R^x04]", name)
				}
				else
					client_printcolor(id, "^x04[自我現實: 你的S幣不足]")
			}
			else
				client_printcolor(id, "^x04[自我現實: 此永久槍在攻擊時可以增加200傷害]")
		}
		case 1:
		{
			if (!g_forever_gun[id][CSW_M4A1])
			{
				if (g_smoney[id] >= m4a160r_scost)
				{
					new name[64]
					get_user_name(id, name, 63)
					change_name(name, 63)
					g_forever_gun[id][CSW_M4A1] = m4a160r_scost
					g_smoney[id] -= m4a160r_scost
					client_printcolor(id, "^x04[自我現實: /ctrM4A1-60R^x04在攻擊時可以增加100傷害 - 降低一半的後座力]")
					client_printcolor(0, "^x04[自我現實: /ctr%s ^x04購買了 /ctrM4A1-60R^x04]", name)
				}
				else
					client_printcolor(id, "^x04[自我現實: 你的S幣不足]")
			}
			else
				client_printcolor(id, "^x04[自我現實: 此永久槍在攻擊時可以增加100傷害 - 降低一半的後座力]")
		}
		case 2:
		{
			if (!g_forever_gun[id][CSW_SCOUT])
			{
				if (g_smoney[id] >= m24_scost)
				{
					new name[64]
					get_user_name(id, name, 63)
					change_name(name, 63)
					g_forever_gun[id][CSW_SCOUT] = m24_scost
					g_smoney[id] -= m24_scost
					client_printcolor(id, "^x04[自我現實: /ctrM24^x04在攻擊時可以增加六倍的傷害]")
					client_printcolor(0, "^x04[自我現實: /ctr%s ^x04購買了 /ctrM24^x04]", name)
				}
				else
					client_printcolor(id, "^x04[自我現實: 你的S幣不足]")
			}
			else
				client_printcolor(id, "^x04[自我現實: 此永久槍在攻擊時可以增加六倍的傷害]")
		}
		case 3:
		{
			if (!g_forever_gun[id][CSW_M249])
			{
				if (g_smoney[id] >= mg3_scost)
				{
					new name[64]
					get_user_name(id, name, 63)
					change_name(name, 63)
					g_forever_gun[id][CSW_M249] = mg3_scost
					g_smoney[id] -= mg3_scost
					client_printcolor(id, "^x04[自我現實: /ctrMG3^x04在攻擊時會減少34％的傷害但是子彈多以及射擊速度快]")
					client_printcolor(0, "^x04[自我現實: /ctr%s ^x04購買了 /ctrMG3^x04]", name)
				}
				else
					client_printcolor(id, "^x04[自我現實: 你的S幣不足]")
			}
			else
				client_printcolor(id, "^x04[自我現實: 此永久槍在攻擊時會減少34％的傷害但是子彈多以及射擊速度快]")
		}
		case 4:
		{
			if (!g_forever_gun[id][CSW_SG552])
			{
				if (g_smoney[id] >= f2000_scost)
				{
					new name[64]
					get_user_name(id, name, 63)
					change_name(name, 63)
					g_forever_gun[id][CSW_SG552] = f2000_scost
					g_smoney[id] -= f2000_scost
					client_printcolor(id, "^x04[自我現實: /ctrF2000^x04在攻擊時可以增加100的傷害]")
					client_printcolor(0, "^x04[自我現實: /ctr%s ^x04購買了 /ctrF2000^x04]", name)
				}
				else
					client_printcolor(id, "^x04[自我現實: 你的S幣不足]")
			}
			else
				client_printcolor(id, "^x04[自我現實: 此永久槍在攻擊時可以增加100的傷害]")
		}
		case 5:
		{
			if (!g_forever_gun[id][CSW_G3SG1])
			{
				if (g_smoney[id] >= wa2000_scost)
				{
					new name[64]
					get_user_name(id, name, 63)
					change_name(name, 63)
					g_forever_gun[id][CSW_G3SG1] = wa2000_scost
					g_smoney[id] -= wa2000_scost
					client_printcolor(id, "^x04[自我現實: /ctrWA2000^x04在攻擊時可以增加三倍的傷害]")
					client_printcolor(0, "^x04[自我現實: /ctr%s ^x04購買了 /ctrWA2000^x04]", name)
				}
				else
					client_printcolor(id, "^x04[自我現實: 你的S幣不足]")
			}
			else
				client_printcolor(id, "^x04[自我現實: 此永久槍在攻擊時可以增加三倍的傷害]")
		}
		case 6:
		{
			if (!g_forever_gun[id][CSW_GALIL])
			{
				if (g_smoney[id] >= k1ases_scost)
				{
					new name[64]
					get_user_name(id, name, 63)
					change_name(name, 63)
					g_forever_gun[id][CSW_GALIL] = k1ases_scost
					g_smoney[id] -= k1ases_scost
					client_printcolor(id, "^x04[自我現實: /ctr邪靈契約^x04在攻擊時可以增加150的傷害]")
					client_printcolor(0, "^x04[自我現實: /ctr%s ^x04購買了 /ctr邪靈契約^x04]", name)
				}
				else
					client_printcolor(id, "^x04[自我現實: 你的S幣不足]")
			}
			else
				client_printcolor(id, "^x04[自我現實: 此永久槍在攻擊時可以增加150的傷害]")
		}
		case 7:
		{
			if (!g_forever_gun[id][CSW_P90])
			{
				if (g_smoney[id] >= thompson_scost)
				{
					new name[64]
					get_user_name(id, name, 63)
					change_name(name, 63)
					g_forever_gun[id][CSW_P90] = thompson_scost
					g_smoney[id] -= thompson_scost
					client_printcolor(id, "^x04[自我現實: /ctr極道狂徒^x04在攻擊時可以增加100的傷害]")
					client_printcolor(0, "^x04[自我現實: /ctr%s ^x04購買了 /ctr極道狂徒^x04]", name)
				}
				else
					client_printcolor(id, "^x04[自我現實: 你的S幣不足]")
			}
			else
				client_printcolor(id, "^x04[自我現實: 此永久槍在攻擊時可以增加100的傷害]")
		}
		case 9: return PLUGIN_HANDLED;
		default: show_menu_sbuy_forever_gun(id)
	}
	return PLUGIN_HANDLED;
}
public show_menu_lbuy_player(id)
{
	if (!get_user_login(id))
	{
		client_printcolor(id, "^x04[自我現實: 請先登入]")
		return;
	}
	static menu[250], len
	len = 0
	len += formatex(menu[len], charsmax(menu) - len, "\w購買角色^n^n")
	len += formatex(menu[len], charsmax(menu) - len, "\r1. \w射命丸ザヤとは %s%s^n", g_lmoney[id] >= 50 ? "\y" : "\d", g_model[id][0] ? "\d[已擁有此角色]" : "[50 L幣]")
	len += formatex(menu[len], charsmax(menu) - len, "\r2. \wEzio %s%s^n", g_lmoney[id] >= 40 ? "\y" : "\d", g_model[id][1] ? "\d[已擁有此角色]" : "[40 L幣]")
	len += formatex(menu[len], charsmax(menu) - len, "\r3. \wサニ一ミルク %s%s^n", g_lmoney[id] >= 25 ? "\y" : "\d", g_model[id][2] ? "\d[已擁有此角色]" : "[25 L幣]")
	len += formatex(menu[len], charsmax(menu) - len, "\r4. \w鈴仙・優曇華院・イナバ %s%s^n", g_lmoney[id] >= 70 ? "\y" : "\d", g_model[id][3] ? "\d[已擁有此角色]" : "[70 L幣]")
	len += formatex(menu[len], charsmax(menu) - len, "\r0. \w離開^n")
	show_menu(id, KEYSMENU, menu, -1, "L Buy Menu")
}
public menu_lbuy_player(id, key)
{
	switch (key)
	{
		case 0:
		{
			if (!g_model[id][0])
			{
				if (g_lmoney[id] >= 50)
				{
					new name[64]
					get_user_name(id, name, 63)
					change_name(name, 63)
					g_model[id][0] = 1
					g_lmoney[id] -= 50
					client_printcolor(id, "^x04[自我現實: /ctr射命丸ザヤとは^x04可以讓攻擊力兩倍]")
					client_printcolor(0, "^x04[自我現實: /ctr%s ^x04購買了 /ctr射命丸ザヤとは^x04]", name)
				}
				else
					client_printcolor(id, "^x04[自我現實: 你的L幣不足]")
			}
			else
				client_printcolor(id, "^x04[自我現實: 此角色可以讓攻擊力兩倍]")
		}
		case 1:
		{
			if (!g_model[id][1])
			{
				if (g_lmoney[id] >= 40)
				{
					new name[64]
					get_user_name(id, name, 63)
					change_name(name, 63)
					g_model[id][1] = 1
					g_lmoney[id] -= 40
					client_printcolor(id, "^x04[自我現實: /ctrEzio^x04可以讓速度增加30以及無摔傷]")
					client_printcolor(0, "^x04[自我現實: /ctr%s ^x04購買了 /ctrEzio^x04]", name)
				}
				else
					client_printcolor(id, "^x04[自我現實: 你的L幣不足]")
			}
			else
				client_printcolor(id, "^x04[自我現實: 此角色可以讓速度增加30以及無摔傷]")
		}
		case 2:
		{
			if (!g_model[id][2])
			{
				if (g_lmoney[id] >= 25)
				{
					new name[64]
					get_user_name(id, name, 63)
					change_name(name, 63)
					g_model[id][2] = 1
					g_lmoney[id] -= 25
					client_printcolor(id, "^x04[自我現實: /ctrサニ一ミルク^x04可以讓重力減少3/10]")
					client_printcolor(0, "^x04[自我現實: /ctr%s ^x04購買了 /ctrサニ一ミルク^x04]", name)
				}
				else
					client_printcolor(id, "^x04[自我現實: 你的L幣不足]")
			}
			else
				client_printcolor(id, "^x04[自我現實: 此角色可以讓重力減少3/10]")
		}
		case 3:
		{
			if (!g_model[id][3])
			{
				if (g_lmoney[id] >= 70)
				{
					new name[64]
					get_user_name(id, name, 63)
					change_name(name, 63)
					g_model[id][3] = 1
					g_lmoney[id] -= 70
					client_printcolor(id, "^x04[自我現實: /ctr鈴仙・優曇華院・イナバ^x04可以讓重力減少1/10 - 攻擊力1.5倍 - 速度增加15]")
					client_printcolor(0, "^x04[自我現實: /ctr%s ^x04購買了 /ctr鈴仙・優曇華院・イナバ^x04]", name)
				}
				else
					client_printcolor(id, "^x04[自我現實: 你的L幣不足]")
			}
			else
				client_printcolor(id, "^x04[自我現實: 此角色可以讓重力減少1/10 - 攻擊力1.5倍 - 速度增加15]")
		}
		case 9: return PLUGIN_HANDLED;
		default: show_menu_lbuy_player(id)
	}
	return PLUGIN_HANDLED;
}
public show_menu_sbuy_player(id)
{
	if (!get_user_login(id))
	{
		client_printcolor(id, "^x04[自我現實: 請先登入]")
		return;
	}
	static menu[250], len
	len = 0
	len += formatex(menu[len], charsmax(menu) - len, "\w購買角色^n^n")
	len += formatex(menu[len], charsmax(menu) - len, "\r1. \w射命丸ザヤとは %s%s^n", g_smoney[id] >= 150 ? "\y" : "\d", g_model[id][0] ? "\d[已擁有此角色]" : "[150 S幣]")
	len += formatex(menu[len], charsmax(menu) - len, "\r2. \wEzio %s%s^n", g_smoney[id] >= 110 ? "\y" : "\d", g_model[id][1] ? "\d[已擁有此角色]" : "[110 S幣]")
	len += formatex(menu[len], charsmax(menu) - len, "\r3. \wサニ一ミルク %s%s^n", g_smoney[id] >= 80 ? "\y" : "\d", g_model[id][2] ? "\d[已擁有此角色]" : "[80 S幣]")
	len += formatex(menu[len], charsmax(menu) - len, "\r4. \w鈴仙・優曇華院・イナバ %s%s^n", g_smoney[id] >= 210 ? "\y" : "\d", g_model[id][3] ? "\d[已擁有此角色]" : "[210 S幣]")
	len += formatex(menu[len], charsmax(menu) - len, "\r0. \w離開^n")
	show_menu(id, KEYSMENU, menu, -1, "S Buy Menu")
}
public menu_sbuy_player(id, key)
{
	switch (key)
	{
		case 0:
		{
			if (!g_model[id][0])
			{
				if (g_smoney[id] >= 150)
				{
					new name[64]
					get_user_name(id, name, 63)
					change_name(name, 63)
					g_model[id][0] = 1
					g_smoney[id] -= 150
					client_printcolor(id, "^x04[自我現實: /ctr射命丸ザヤとは^x04可以讓攻擊力兩倍]")
					client_printcolor(0, "^x04[自我現實: /ctr%s ^x04購買了 /ctr射命丸ザヤとは^x04]", name)
				}
				else
					client_printcolor(id, "^x04[自我現實: 你的S幣不足]")
			}
			else
				client_printcolor(id, "^x04[自我現實: 此角色可以讓攻擊力兩倍]")
		}
		case 1:
		{
			if (!g_model[id][1])
			{
				if (g_smoney[id] >= 110)
				{
					new name[64]
					get_user_name(id, name, 63)
					change_name(name, 63)
					g_model[id][1] = 1
					g_smoney[id] -= 110
					client_printcolor(id, "^x04[自我現實: /ctrEzio^x04可以讓速度增加30以及無摔傷]")
					client_printcolor(0, "^x04[自我現實: /ctr%s ^x04購買了 /ctrEzio^x04]", name)
				}
				else
					client_printcolor(id, "^x04[自我現實: 你的S幣不足]")
			}
			else
				client_printcolor(id, "^x04[自我現實: 此角色可以讓速度增加30以及無摔傷]")
		}
		case 2:
		{
			if (!g_model[id][2])
			{
				if (g_smoney[id] >= 80)
				{
					new name[64]
					get_user_name(id, name, 63)
					change_name(name, 63)
					g_model[id][2] = 1
					g_smoney[id] -= 80
					client_printcolor(id, "^x04[自我現實: /ctrサニ一ミルク^x04可以讓重力減少3/10]")
					client_printcolor(0, "^x04[自我現實: /ctr%s ^x04購買了 /ctrサニ一ミルク^x04]", name)
				}
				else
					client_printcolor(id, "^x04[自我現實: 你的S幣不足]")
			}
			else
				client_printcolor(id, "^x04[自我現實: 此角色可以讓重力減少3/10]")
		}
		case 3:
		{
			if (!g_model[id][3])
			{
				if (g_smoney[id] >= 210)
				{
					new name[64]
					get_user_name(id, name, 63)
					change_name(name, 63)
					g_model[id][3] = 1
					g_smoney[id] -= 210
					client_printcolor(id, "^x04[自我現實: /ctr鈴仙・優曇華院・イナバ^x04可以讓重力減少1/10 - 攻擊力1.5倍 - 速度增加15]")
					client_printcolor(0, "^x04[自我現實: /ctr%s ^x04購買了 /ctr鈴仙・優曇華院・イナバ^x04]", name)
				}
				else
					client_printcolor(id, "^x04[自我現實: 你的S幣不足]")
			}
			else
				client_printcolor(id, "^x04[自我現實: 此角色可以讓重力減少1/10 - 攻擊力1.5倍 - 速度增加15]")
		}
		case 9: return PLUGIN_HANDLED;
		default: show_menu_lbuy_player(id)
	}
	return PLUGIN_HANDLED;
}
public show_menu_level_gun(id)
{
	if (!get_user_login(id))
	{
		client_printcolor(id, "^x04[自我現實: 請先登入]")
		return;
	}
	if (g_Boss[id] || !is_user_alive(id))
		return;

	new szMsg[60]
	formatex(szMsg, 59, "\y選擇武器 - 目前等級 \r%d\R", g_level[id])
	new menu = menu_create(szMsg, "menu_level_gun")
	new i, itemname[64], data[2], weapon_id
	for (i = 0;i < sizeof MenuLevelGun;i++)
	{
		weapon_id = get_string_index(WEAPON_CLASSNAME, (CSW_P90+1), MenuLevelGun[i])
		if (weapon_id && ((1<<weapon_id) & PRIMARY_WEAPONS_BIT_SUM))
		{
			if (g_level[id] >= WEAPON_LEVEL[weapon_id])
			{
				format(itemname, 63, "\w%s \y(等級 %d)", WEAPONNAMES[weapon_id], WEAPON_LEVEL[weapon_id])
				data[0] = weapon_id
				data[1] = '^0'
				menu_additem(menu, itemname, data, 0, -1)
			}
			else
			{
				format(itemname, 63, "\d%s (\r等級 %d\d)", WEAPONNAMES[weapon_id], WEAPON_LEVEL[weapon_id])
				data[0] = weapon_id
				data[1] = '^0'
				menu_additem(menu, itemname, data, 0, -1)
			}
		}
	}
	menu_setprop(menu, MPROP_EXIT, MEXIT_ALL)
	menu_display(id, menu, 0)
	g_select_gun_menu[id] = true
}
public menu_level_gun(id, menu, item)
{
	if (item == MENU_EXIT || !is_user_alive(id))
	{
		menu_destroy(menu)
		return PLUGIN_HANDLED;
	}
	if (is_user_alive(id) && !g_Boss[id])
	{
		new data[2], itemname[64], access, callback, weapon_id
		menu_item_getinfo(menu, item, access, data, 5, itemname, 63, callback)
		weapon_id = data[0]
		if (g_level[id] >= WEAPON_LEVEL[weapon_id])
		{
			if (random_num(1, 100) <= 5)
			{
				if (++g_msgChannel > 9 || g_msgChannel < 3)
					g_msgChannel = 3

				new name[64], Float:verpos = 0.45 + float(g_msgChannel) / 35.0
				get_user_name(id, name, 63)
				change_name(name, 63)
				set_dhudmessage(255, 255, 255, 0.05, verpos, 0, 6.0, 6.0, 0.5, 0.15)
				show_dhudmessage(0, "%s : 奇怪...槍怎麼沒反應 ? 幹 ! 選到壞掉的槍", name)
				user_level_up(id, UP_CANT_USE_GUN)
				g_special_weapon_num[id] = 0
			}
			else if (random_num(1, 100) <= 1)
			{
				g_special_weapon_num[id]++
				give_the_plasma(id)
			}
			else if (random_num(1, 100) <= 1)
			{
				g_special_weapon_num[id]++
				give_the_giaf(id)
			}
			else
			{
				g_special_weapon_num[id] = 0
				drop_weapons(id, 1)
				drop_weapons(id, 2)
				fm_give_item(id, WEAPON_CLASSNAME[weapon_id])
				ExecuteHamB(Ham_GiveAmmo, id, 250, AMMOTYPE[weapon_id], 250)
			}
			if (g_special_weapon_num[id] >= 2)
				user_level_up(id, UP_SPECIAL_WEAPON)

			g_has_choose[id] = true
		}
		else
		{
			client_printcolor(id, "^x04[自我現實: 你的等級還沒達到 ^x03%d^x04]", WEAPON_LEVEL[weapon_id])
			show_menu_gun(id)
		}
	}
	menu_destroy(menu)
	return PLUGIN_HANDLED;
}
public show_menu_forever_gun(id)
{
	if (!get_user_login(id))
	{
		client_printcolor(id, "^x04[自我現實: 請先登入]")
		return;
	}
	if (g_Boss[id] || !is_user_alive(id))
		return;

	static menu[250], len
	len = 0
	len += formatex(menu[len], charsmax(menu) - len, "\y選擇武器 - 目前等級 \r%d^n^n", g_level[id])
	len += formatex(menu[len], charsmax(menu) - len, "\r1. %sAK47-60R^n", g_forever_gun[id][CSW_AK47] ? "\y" : "\d")
	len += formatex(menu[len], charsmax(menu) - len, "\r2. %sM4A1-60R^n", g_forever_gun[id][CSW_M4A1] ? "\y" : "\d")
	len += formatex(menu[len], charsmax(menu) - len, "\r3. %sM24^n", g_forever_gun[id][CSW_SCOUT] ? "\y" : "\d")
	len += formatex(menu[len], charsmax(menu) - len, "\r4. %sMG3^n", g_forever_gun[id][CSW_M249] ? "\y" : "\d")
	len += formatex(menu[len], charsmax(menu) - len, "\r5. %sF2000^n", g_forever_gun[id][CSW_SG552] ? "\y" : "\d")
	len += formatex(menu[len], charsmax(menu) - len, "\r6. %sWA2000^n", g_forever_gun[id][CSW_G3SG1] ? "\y" : "\d")
	len += formatex(menu[len], charsmax(menu) - len, "\r7. %s邪靈契約^n", g_forever_gun[id][CSW_GALIL] ? "\y" : "\d")
	len += formatex(menu[len], charsmax(menu) - len, "\r8. %s極道狂徒^n", g_forever_gun[id][CSW_P90] ? "\y" : "\d")
	//len += formatex(menu[len], charsmax(menu) - len, "\r9. %s英雄戰擊^n", get_user_flags(id) & ADMIN_CHAT ? "\y" : "\d")
	show_menu(id, KEYSMENU, menu, -1, "CF Menu")
	g_select_gun_menu[id] = true
}
public menu_forever_gun(id, key)
{
	if (g_Boss[id] || !is_user_alive(id))
		return PLUGIN_HANDLED;

	new name[64]
	get_user_name(id, name, 63)
	change_name(name, 63)
	switch (key)
	{
		case 0:
		{
			if (g_forever_gun[id][CSW_AK47])
			{
				if (random_num(1, 100) <= 5)
				{
					if (++g_msgChannel > 9 || g_msgChannel < 3)
						g_msgChannel = 3

					new Float:verpos = 0.45 + float(g_msgChannel) / 35.0
					set_dhudmessage(255, 255, 255, 0.05, verpos, 0, 6.0, 6.0, 0.5, 0.15)
					show_dhudmessage(0, "%s : 奇怪...槍怎麼沒反應 ? 幹 ! 選到壞掉的槍", name)
					user_level_up(id, UP_CANT_USE_GUN)
					g_special_weapon_num[id] = 0
				}
				else if (random_num(1, 100) <= 1)
				{
					g_special_weapon_num[id]++
					give_the_plasma(id)
				}
				else if (random_num(1, 100) <= 1)
				{
					g_special_weapon_num[id]++
					give_the_giaf(id)
				}
				else
				{
					g_special_weapon_num[id] = 0
					give_the_ak4760r(id)
				}
				if (g_special_weapon_num[id] >= 2)
					user_level_up(id, UP_SPECIAL_WEAPON)

				g_has_choose[id] = true
			}
			else
			{
				client_printcolor(id, "^x04[自我現實: 你並沒有/ctrAK47-60R^x04]")
				show_menu_gun(id)
			}
		}
		case 1:
		{
			if (g_forever_gun[id][CSW_M4A1])
			{
				if (random_num(1, 100) <= 5)
				{
					if (++g_msgChannel > 9 || g_msgChannel < 3)
						g_msgChannel = 3

					new Float:verpos = 0.45 + float(g_msgChannel) / 35.0
					set_dhudmessage(255, 255, 255, 0.05, verpos, 0, 6.0, 6.0, 0.5, 0.15)
					show_dhudmessage(0, "%s : 奇怪...槍怎麼沒反應 ? 幹 ! 選到壞掉的槍", name)
					user_level_up(id, UP_CANT_USE_GUN)
					g_special_weapon_num[id] = 0
				}
				else if (random_num(1, 100) <= 1)
				{
					g_special_weapon_num[id]++
					give_the_plasma(id)
				}
				else if (random_num(1, 100) <= 1)
				{
					g_special_weapon_num[id]++
					give_the_giaf(id)
				}
				else
				{
					g_special_weapon_num[id] = 0
					give_the_m4a160r(id)
				}
				if (g_special_weapon_num[id] >= 2)
					user_level_up(id, UP_SPECIAL_WEAPON)

				g_has_choose[id] = true
			}
			else
			{
				client_printcolor(id, "^x04[自我現實: 你並沒有/ctrM4A1-60R^x04]")
				show_menu_gun(id)
			}
		}
		case 2:
		{
			if (g_forever_gun[id][CSW_SCOUT])
			{
				if (random_num(1, 100) <= 5)
				{
					if (++g_msgChannel > 9 || g_msgChannel < 3)
						g_msgChannel = 3

					new Float:verpos = 0.45 + float(g_msgChannel) / 35.0
					set_dhudmessage(255, 255, 255, 0.05, verpos, 0, 6.0, 6.0, 0.5, 0.15)
					show_dhudmessage(0, "%s : 奇怪...槍怎麼沒反應 ? 幹 ! 選到壞掉的槍", name)
					user_level_up(id, UP_CANT_USE_GUN)
					g_special_weapon_num[id] = 0
				}
				else if (random_num(1, 100) <= 1)
				{
					g_special_weapon_num[id]++
					give_the_plasma(id)
				}
				else if (random_num(1, 100) <= 1)
				{
					g_special_weapon_num[id]++
					give_the_giaf(id)
				}
				else
				{
					g_special_weapon_num[id] = 0
					give_the_m24(id)
				}
				if (g_special_weapon_num[id] >= 2)
					user_level_up(id, UP_SPECIAL_WEAPON)

				g_has_choose[id] = true
			}
			else
			{
				client_printcolor(id, "^x04[自我現實: 你並沒有/ctrM24^x04]")
				show_menu_gun(id)
			}
		}
		case 3:
		{
			if (g_forever_gun[id][CSW_M249])
			{
				if (random_num(1, 100) <= 5)
				{
					if (++g_msgChannel > 9 || g_msgChannel < 3)
						g_msgChannel = 3

					new Float:verpos = 0.45 + float(g_msgChannel) / 35.0
					set_dhudmessage(255, 255, 255, 0.05, verpos, 0, 6.0, 6.0, 0.5, 0.15)
					show_dhudmessage(0, "%s : 奇怪...槍怎麼沒反應 ? 幹 ! 選到壞掉的槍", name)
					user_level_up(id, UP_CANT_USE_GUN)
					g_special_weapon_num[id] = 0
				}
				else if (random_num(1, 100) <= 1)
				{
					g_special_weapon_num[id]++
					give_the_plasma(id)
				}
				else if (random_num(1, 100) <= 1)
				{
					g_special_weapon_num[id]++
					give_the_giaf(id)
				}
				else
				{
					g_special_weapon_num[id] = 0
					give_the_mg3(id)
				}
				if (g_special_weapon_num[id] >= 2)
					user_level_up(id, UP_SPECIAL_WEAPON)

				g_has_choose[id] = true
			}
			else
			{
				client_printcolor(id, "^x04[自我現實: 你並沒有/ctrMG3^x04]")
				show_menu_gun(id)
			}
		}
		case 4:
		{
			if (g_forever_gun[id][CSW_SG552])
			{
				if (random_num(1, 100) <= 5)
				{
					if (++g_msgChannel > 9 || g_msgChannel < 3)
						g_msgChannel = 3

					new Float:verpos = 0.45 + float(g_msgChannel) / 35.0
					set_dhudmessage(255, 255, 255, 0.05, verpos, 0, 6.0, 6.0, 0.5, 0.15)
					show_dhudmessage(0, "%s : 奇怪...槍怎麼沒反應 ? 幹 ! 選到壞掉的槍", name)
					user_level_up(id, UP_CANT_USE_GUN)
					g_special_weapon_num[id] = 0
				}
				else if (random_num(1, 100) <= 1)
				{
					g_special_weapon_num[id]++
					give_the_plasma(id)
				}
				else if (random_num(1, 100) <= 1)
				{
					g_special_weapon_num[id]++
					give_the_giaf(id)
				}
				else
				{
					g_special_weapon_num[id] = 0
					give_the_f2000(id)
				}
				if (g_special_weapon_num[id] >= 2)
					user_level_up(id, UP_SPECIAL_WEAPON)

				g_has_choose[id] = true
			}
			else
			{
				client_printcolor(id, "^x04[自我現實: 你並沒有/ctrF2000^x04]")
				show_menu_gun(id)
			}
		}
		case 5:
		{
			if (g_forever_gun[id][CSW_G3SG1])
			{
				if (random_num(1, 100) <= 5)
				{
					if (++g_msgChannel > 9 || g_msgChannel < 3)
						g_msgChannel = 3

					new Float:verpos = 0.45 + float(g_msgChannel) / 35.0
					set_dhudmessage(255, 255, 255, 0.05, verpos, 0, 6.0, 6.0, 0.5, 0.15)
					show_dhudmessage(0, "%s : 奇怪...槍怎麼沒反應 ? 幹 ! 選到壞掉的槍", name)
					user_level_up(id, UP_CANT_USE_GUN)
					g_special_weapon_num[id] = 0
				}
				else if (random_num(1, 100) <= 1)
				{
					g_special_weapon_num[id]++
					give_the_plasma(id)
				}
				else if (random_num(1, 100) <= 1)
				{
					g_special_weapon_num[id]++
					give_the_giaf(id)
				}
				else
				{
					g_special_weapon_num[id] = 0
					give_the_wa2000(id)
				}
				if (g_special_weapon_num[id] >= 2)
					user_level_up(id, UP_SPECIAL_WEAPON)

				g_has_choose[id] = true
			}
			else
			{
				client_printcolor(id, "^x04[自我現實: 你並沒有/ctrWA2000^x04]")
				show_menu_gun(id)
			}
		}
		case 6:
		{
			if (g_forever_gun[id][CSW_GALIL])
			{
				if (random_num(1, 100) <= 5)
				{
					if (++g_msgChannel > 9 || g_msgChannel < 3)
						g_msgChannel = 3

					new Float:verpos = 0.45 + float(g_msgChannel) / 35.0
					set_dhudmessage(255, 255, 255, 0.05, verpos, 0, 6.0, 6.0, 0.5, 0.15)
					show_dhudmessage(0, "%s : 奇怪...槍怎麼沒反應 ? 幹 ! 選到壞掉的槍", name)
					user_level_up(id, UP_CANT_USE_GUN)
					g_special_weapon_num[id] = 0
				}
				else if (random_num(1, 100) <= 1)
				{
					g_special_weapon_num[id]++
					give_the_plasma(id)
				}
				else if (random_num(1, 100) <= 1)
				{
					g_special_weapon_num[id]++
					give_the_giaf(id)
				}
				else
				{
					g_special_weapon_num[id] = 0
					give_the_k1ases(id)
				}
				if (g_special_weapon_num[id] >= 2)
					user_level_up(id, UP_SPECIAL_WEAPON)

				g_has_choose[id] = true
			}
			else
			{
				client_printcolor(id, "^x04[自我現實: 你並沒有/ctr邪靈契約^x04]")
				show_menu_gun(id)
			}
		}
		case 7:
		{
			if (g_forever_gun[id][CSW_P90])
			{
				if (random_num(1, 100) <= 5)
				{
					if (++g_msgChannel > 9 || g_msgChannel < 3)
						g_msgChannel = 3

					new Float:verpos = 0.45 + float(g_msgChannel) / 35.0
					set_dhudmessage(255, 255, 255, 0.05, verpos, 0, 6.0, 6.0, 0.5, 0.15)
					show_dhudmessage(0, "%s : 奇怪...槍怎麼沒反應 ? 幹 ! 選到壞掉的槍", name)
					user_level_up(id, UP_CANT_USE_GUN)
					g_special_weapon_num[id] = 0
				}
				else if (random_num(1, 100) <= 1)
				{
					g_special_weapon_num[id]++
					give_the_plasma(id)
				}
				else if (random_num(1, 100) <= 1)
				{
					g_special_weapon_num[id]++
					give_the_giaf(id)
				}
				else
				{
					g_special_weapon_num[id] = 0
					give_the_thompson(id)
				}
				if (g_special_weapon_num[id] >= 2)
					user_level_up(id, UP_SPECIAL_WEAPON)

				g_has_choose[id] = true
			}
			else
			{
				client_printcolor(id, "^x04[自我現實: 你並沒有/ctr極道狂徒^x04]")
				show_menu_gun(id)
			}
		}
		/*case 8:
		{
			if (get_user_flags(id) & ADMIN_CHAT)
			{
				if (random_num(1, 100) <= 5)
				{
					if (++g_msgChannel > 9 || g_msgChannel < 3)
						g_msgChannel = 3

					new Float:verpos = 0.45 + float(g_msgChannel) / 35.0
					set_dhudmessage(255, 255, 255, 0.05, verpos, 0, 6.0, 6.0, 0.5, 0.15)
					show_dhudmessage(0, "%s : 奇怪...槍怎麼沒反應 ? 幹 ! 選到壞掉的槍", name)
					user_level_up(id, UP_CANT_USE_GUN)
					g_special_weapon_num[id] = 0
				}
				else if (random_num(1, 100) <= 1)
				{
					g_special_weapon_num[id]++
					give_the_plasma(id)
				}
				else if (random_num(1, 100) <= 1)
				{
					g_special_weapon_num[id]++
					give_the_giaf(id)
				}
				else
				{
					g_special_weapon_num[id] = 0
					give_the_ssvd(id)
				}
				if (g_special_weapon_num[id] >= 2)
					user_level_up(id, UP_SPECIAL_WEAPON)

				g_has_choose[id] = true
			}
			else
			{
				client_printcolor(id, "^x04[自我現實: 你並沒有/ctr英雄戰擊^x04]")
				show_menu_gun(id)
			}
		}*/
		default: show_menu_gun(id)
	}
	return PLUGIN_HANDLED;
}
public RestartRound()
	server_cmd("sv_restart 1")

public Kill_All()
{
	new iPlayers[32], iNum
	get_players(iPlayers, iNum, "c")
	for (new i = 0;i < iNum;i++)
	{
		if (cs_get_user_team(iPlayers[i]) == CS_TEAM_CT || cs_get_user_team(iPlayers[i]) == CS_TEAM_T)
			user_kill(iPlayers[i])
	}
	g_cant_up = false
	return PLUGIN_CONTINUE;
}
public Boss_15S_UP()
	g_boss_15s_up = true

public Boss_60S_UP()
	g_boss_60s_up = true

public Human_10S_UP()
	g_human_10s_up = true

public close_die()
	g_the_die = true

public On_Ground_UP(taskid)
{
	static id
	id = taskid - 1249
	if (is_user_connected(id))
	{
		if (is_user_alive(id))
		{
			user_level_up(id, UP_AT_AIR_10S)
		}
	}
}
public UP_HIGHEST_KILL()
{
	new iPlayers[32], iNum
	get_players(iPlayers, iNum)
	if (iNum < 9)
		return;

	new iBestPlayerKillNum = iPlayers[0]
	for (new i = 1, id;i < iNum;i++)
	{
		id = iPlayers[i]
		if (g_kill_num[id] > g_kill_num[iBestPlayerKillNum])
		{
			iBestPlayerKillNum = id
		}
	}
	new szName[32]
	get_user_name(iBestPlayerKillNum, szName, charsmax(szName))
	if (g_kill_num[iBestPlayerKillNum] > 0)
		user_level_up(iBestPlayerKillNum, UP_KILL_HIGHEST)
}
public UP_HIGHEST_DEATH()
{
	new iPlayers[32], iNum
	get_players(iPlayers, iNum)
	if (iNum < 9)
		return;

	new iBestPlayerDeathNum = iPlayers[0]
	for (new i = 1, id;i < iNum;i++)
	{
		id = iPlayers[i]
		if (g_death_num[id] > g_death_num[iBestPlayerDeathNum])
		{
			iBestPlayerDeathNum = id
		}
	}
	new szName[32]
	get_user_name(iBestPlayerDeathNum, szName, charsmax(szName))
	if (g_death_num[iBestPlayerDeathNum] > 0)
		user_level_up(iBestPlayerDeathNum, UP_DEATH_HIGHEST)
}
public Throw_Rock(id)
{
	new ent = create_entity("info_target")
	if (ent == 0)
		return;

	new Float:origin[3], Float:Fire[3], PlayerOrigin[3], Float:velocity[3], Float:angles[3]
	set_pev(ent, pev_classname, "Boss_Rock")
	set_pev(ent, pev_solid, SOLID_BBOX)
	set_pev(ent, pev_movetype, MOVETYPE_BOUNCE)
	set_pev(ent, pev_sequence, 1)
	set_pev(ent, pev_takedamage, 0.0)
	entity_set_model(ent, "models/tank_rock.mdl")
	entity_set_size(ent, Float:{-5.0, -5.0, -5.0}, Float:{5.0, 5.0, 5.0})
	entity_get_vector(id, EV_VEC_origin, origin)
	entity_get_vector(id, EV_VEC_origin, Fire)
	get_user_origin(id, PlayerOrigin, 1)
	Fire[0] = float(PlayerOrigin[0])
	Fire[1] = float(PlayerOrigin[1])
	Fire[2] = float(PlayerOrigin[2])
	entity_set_origin(ent, Fire)
	VelocityByAim(id, 0, velocity)
	entity_set_edict(ent, EV_ENT_owner, id)
	vector_to_angle(velocity, angles)
	entity_set_vector(ent, EV_VEC_velocity, velocity)
	entity_set_vector(ent, EV_VEC_angles, angles)
	set_pev(ent, pev_iuser2, id)
	set_pev(ent, pev_iuser3, 0)
	create_beam_follow(ent, 102, 51, 45, 200)
	new param[1]
	param[0] = ent
	set_task(0.0, "Rock_Process", ent+6666, param, 1)
}
public Rock_Process(param[1])
{
	new ent = param[0]
	if (!pev_valid(ent))
		return;

	create_beam_follow(ent, 102, 51, 45, 200)
	new Float:velocity[3], Float:angles[3]
	pev(ent, pev_velocity, velocity)
	angles[0] = random_float(-90.0, 90.0)
	angles[1] = random_float(0.0, 359.0)
	angles[2] = 0.0
	set_pev(ent, pev_angles, angles)
	xs_vec_mul_scalar(velocity, 0.99, velocity)
	set_pev(ent, pev_velocity, velocity)
	if (!(pev(ent, pev_iuser3)))
	{
		change_angel(ent)
		set_pev(ent, pev_iuser3, 1)
	}
	set_task(0.0, "Rock_Process", ent+6666, param, 1)
}
public Rock_Detonate(ent, id)
{
	if (!pev_valid(ent))
		return;

	new Float:origin[3], owner = pev(ent, pev_iuser2)
	if (owner == id)
		return;

	pev(ent, pev_origin, origin)
	create_blast_effect(origin)
	Create_Smoke_Group(origin)
	emit_sound(owner, CHAN_WEAPON, "weapons/Tank_Rock_Smash.wav", VOL_NORM, ATTN_NORM, 0, PITCH_HIGH)
	rock_explode_damage(owner, origin)
	engfunc(EngFunc_RemoveEntity, ent)
}
stock rock_explode_damage(attacker, Float:hit_origin[3])
{
	new Float:target_origin[3], Origin[3], i
	for (i = 1;i <= get_maxplayers();i++)
	{
		if (!g_Boss[i])
		{
			if (!is_user_alive(i) || !pev(i, pev_takedamage))
				continue;

			get_user_origin(i,Origin)
			pev(i, pev_origin, target_origin)
			new dist = floatround(get_distance_f(hit_origin, target_origin))
			if (dist > 180)
				continue;

			new hp = get_user_health(i)
			new damage = 100
			new Float:temp = float(damage - 1)
			damage -= floatround(temp * float(dist - 16) / 180)
			if (damage >= 0)
			{
				new Origin[3], Float:velocity[3]
				get_user_origin(i, Origin)
				get_speed_vector_point_entity(hit_origin, i, 1500, velocity)
				set_pev(i, pev_velocity, velocity)
				if (hp > damage)
				{
					rock_hit[i] = true
					hit[i] = get_gametime()
					screen_shake(i, 4, 2, 10)
					stop_fire(i, 2.0)
					rock_damage(i, damage, Origin, DMG_BLAST)
					g_catch_rock_num[i]++
					if (g_catch_rock_num[i] >= 5 && is_user_alive(i))
						user_level_up(i, UP_ROCK_5_ALIVE)
				}
				else
					log_kill(attacker, i, "Boss Rock", 0)
			}
		}
	}
}
public Shockwave(id)
{
	new ent = create_entity("info_target")
	if (ent == 0)
		return;

	new Float:origin[3], Float:Fire[3], Float:velocity[3], Float:angles[3]
	entity_set_string(ent, EV_SZ_classname, "shockwave_Model")
	entity_set_int(ent, EV_INT_movetype, MOVETYPE_FLY)
	entity_set_int(ent, EV_INT_solid, SOLID_BBOX)
	entity_set_int(ent, EV_INT_sequence, 1)
	entity_set_model(ent, "models/lie_weapon/shockwaveball.mdl")
	entity_set_size(ent, Float:{-0.0, -0.0, -0.0}, Float:{0.0, 0.0, 0.0})
	entity_get_vector(id, EV_VEC_origin, origin)
	entity_get_vector(id, EV_VEC_origin, Fire)
	entity_set_origin(ent, Fire)
	VelocityByAim(id, 1800, velocity)
	entity_set_edict(ent, EV_ENT_owner, id)
	entity_set_float(ent, EV_FL_takedamage, 1.0)
	vector_to_angle(velocity, angles)
	entity_set_vector(ent, EV_VEC_velocity, velocity)
	entity_set_vector(ent, EV_VEC_angles, angles)
	set_pev(ent, pev_iuser2, id)
	create_beam_follow(ent, 255, 255, 0, 255)
	new param[1]
	param[0] = ent
	set_task(0.0, "Shockwave_Ball_Process", ent+1234, param, 1)
}
public Shockwave_Detonate(ent)
{
	if (!pev_valid(ent))
		return;

	new Float:origin[3]
	pev(ent, pev_origin, origin)
	shockwave_i(ent, origin)
	create_explosion_effect(origin)
	emit_sound(ent, CHAN_WEAPON, "weapons/zombie_bomb_exp.wav", 1.0, ATTN_NORM, 0, PITCH_NORM)
	engfunc(EngFunc_RemoveEntity, ent)
}
public Shockwave_Ball_Process(param[1])
{
	new ent = param[0]
	if (!pev_valid(ent))
		return;

	create_beam_follow(ent, 255, 255, 0, 255)
	set_task(0.0, "Shockwave_Ball_Process", ent+1234, param, 1)
}
stock shockwave_i(ent, Float:hit_origin[3])
{
	new Float:target_origin[3], Origin[3], owner
	owner = entity_get_edict(ent, EV_ENT_owner)
	for (new i = 1;i <= get_maxplayers();i++)
	{
		if (!g_Boss[i])
		{
			if (!is_user_alive(i) || !is_user_connected(i) || !pev(i, pev_takedamage))
				continue;

			get_user_origin(i, Origin)
			pev(i, pev_origin, target_origin)
			new dist = floatround(get_distance_f(hit_origin, target_origin))
			if (dist > 80.0)
				continue;

			if (!get_user_plasma(i))
			{
				g_drop_weapon_num[owner]++
				if (g_drop_weapon_num[owner] >= 5)
					user_level_up(owner, UP_DROP_5WEAPON)

				if (g_drop_weapon_num[owner] >= 10)
					user_level_up(owner, UP_DROP_10WEAPON)

				if (g_drop_weapon_num[owner] >= 20)
					user_level_up(owner, UP_DROP_20WEAPON)

				drop_current_weapon(i)
			}
		}
	}
}
public fire_laser(id)
{
	if (!is_user_alive(id) || !g_sBoss_laser_mode[id])
		return PLUGIN_CONTINUE;

	emit_sound(id, CHAN_WEAPON, "weapons/laser_fire.wav", 0.8, ATTN_NORM, 0, PITCH_NORM)
	new aimvec[3]
	get_user_origin(id, aimvec, 3)
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
	write_byte(TE_BEAMENTPOINT)
	write_short(id | 0x1000)
	write_coord(aimvec[0])
	write_coord(aimvec[1])
	write_coord(aimvec[2])
	write_short(g_laserSpr)
	write_byte(1)
	write_byte(5)
	write_byte(1)
	write_byte(10)
	write_byte(0)
	write_byte(left_time >= 40 ? 255 : left_time >= 20 ? 0 : 255)
	write_byte(left_time >= 40 ? 216 : left_time >= 20 ? 0 : 0)
	write_byte(left_time >= 40 ? 0 : left_time >= 20 ? 255 : 0)
	write_byte(200)
	write_byte(200)
	message_end()
	message_begin(MSG_PVS, SVC_TEMPENTITY)
	write_byte(9)
	write_coord(aimvec[0])
	write_coord(aimvec[1])
	write_coord(aimvec[2])
	message_end()
	new victim, body
	get_user_aiming(id, victim, body)
	if (is_user_alive(victim) && !g_Boss[victim] && g_Boss[id] && g_sBoss[id] && !g_BugBoss[id] && cs_get_user_team(victim) != CS_TEAM_SPECTATOR)
	{
		new health, dmg = (left_time >= 40 ? 20 : left_time >= 20 ? 50 : 80)
		health = pev(victim, pev_health)
		if (health > dmg)
		{
			new Origin[3]
			get_user_origin(victim, Origin)
			rock_damage(victim, dmg, Origin, DMG_BLAST)
			g_catch_laser_num[victim]++
			if (g_catch_laser_num[victim] >= 5 && is_user_alive(victim))
				user_level_up(victim, UP_LASER_5_ALIVE)
		}
		else
			log_kill(id, victim, "Boss Laser", 0)
	}
	new decal = random_num(41, 44)
	if (victim)
	{
		message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
		write_byte(TE_DECAL)
		write_coord(aimvec[0])
		write_coord(aimvec[1])
		write_coord(aimvec[2])
		write_byte(decal)
		write_short(victim)
		message_end()
	}
	else
	{
		message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
		write_byte(TE_WORLDDECAL)
		write_coord(aimvec[0])
		write_coord(aimvec[1])
		write_coord(aimvec[2])
		write_byte(decal)
		message_end()
	}
	return PLUGIN_CONTINUE;
}
public remove_tank_effect(id)
{
	set_pev(id, pev_flags, (pev(id, pev_flags) & ~FL_FROZEN))
}
replace_weapon_models(id, weaponid)
{
	switch (weaponid)
	{
		case CSW_KNIFE:
		{
			if (g_Boss[id])
			{
				set_pev(id, pev_viewmodel2, model_vknife_boss)
				set_pev(id, pev_weaponmodel2, "")
			}
			else
			{
				set_pev(id, pev_viewmodel2, model_vknife_human)
				set_pev(id, pev_weaponmodel2, model_pknife_human)
			}
		}
	}
}
public close_godmode(id)
{
	if (is_user_alive(id))
	{
		set_user_godmode(id, 0)
	}
}
public close_boss_charge(id)
{
	g_sBoss_in_charge[id] = false
	g_sBoss_charge[id] = false
}
public close_charge_hit(id)
	g_sBoss_charge_hit[id] = false

public close_light_hit(id)
	g_light_hit[id] = false

public close_get_damage(id)
{
	g_get_damage[id] = false
	if (!g_get_damage_value[id])
		user_level_up(id, UP_NO_GET_DAMAGE)

	if (g_get_damage_value[id] >= 5000)
		user_level_up(id, UP_GET_5000DAMAGE)

	if (g_get_damage_value[id] >= 10000)
		user_level_up(id, UP_GET_10000DAMAGE)

	if (g_get_damage_value[id] >= 15000)
		user_level_up(id, UP_GET_15000DAMAGE)

	if (g_get_damage_value[id] >= 20000)
		user_level_up(id, UP_GET_20000DAMAGE)

	g_get_damage_value[id] = 0
	set_dhudmessage(0, 255, 0, -1.0, 0.2, 0, 6.0, 1.5, 0.0, 0.0)
	show_dhudmessage(0, "傷害吸收結束")
}
public close_vector_get()
{
	g_vector_get = false
	new i, iPlayers[32], iNum
	get_players(iPlayers, iNum, "c")
	for (i = 0;i < iNum;i++)
	{
		if (is_user_alive(iPlayers[i]) && !g_Boss[iPlayers[i]])
		{
			g_vector_get_num[iPlayers[i]]++
			if (g_vector_get_num[iPlayers[i]] >= 3)
			{
				user_level_up(iPlayers[i], UP_VECTOR_GET_3_ALIVE)
			}
		}
	}
}
public close_laser_mode(id)
{
	if (is_user_connected(id))
		g_sBoss_laser_mode[id] = false

	client_cmd(0, "stopsound")
	new i, iPlayers[32], iNum
	get_players(iPlayers, iNum, "c")
	for (i = 0;i < iNum;i++)
	{
		if (is_user_alive(iPlayers[i]) && !g_Boss[iPlayers[i]] && g_sBoss_never_laser_mode[id])
			user_level_up(iPlayers[i], UP_LASER_MODE_ALIVE)
	}
}
public Laser_Mode_CD()
{
	if (left_time > 0)
	{
		set_dhudmessage(0, 255, 0, -1.0, 0.2, 0, 6.0, 1.05, 0.0, 0.0)
		show_dhudmessage(0, "剩餘時間: %d秒", left_time)
		set_task(1.0, "Laser_Mode_CD")
	}
	left_time--
}
public Make_Space()
{
	if (left_time > 0)
	{
		amx_make_space(0.6, 1.0, 1)
		set_task(1.0, "Make_Space")
	}
}
public LevelUPMenu(id, key)
{
	switch (key)
	{
		case 0:  //  1. 上一頁 2. 下一頁 3. 回到第一頁 4. 最後一頁 0. 離開
		{
			if (g_menuPosition[id] - 1 < 0)
				displayLevelUPMenu(id, g_menuPosition[id] = 0)
			else
				displayLevelUPMenu(id, --g_menuPosition[id])
		}
		case 1:
		{
			if (g_menuPosition[id] + 1 == (g_UPNum / 8) + (((g_UPNum % 8) > 0) ? 1 : 0))
				displayLevelUPMenu(id, g_menuPosition[id])
			else
				displayLevelUPMenu(id, ++g_menuPosition[id])
		}
		case 2: displayLevelUPMenu(id, g_menuPosition[id] = 0)
		case 3:
		{
			displayLevelUPMenu(id, (g_UPNum / 8) + (((g_UPNum % 8) > 0) ? 1 : 0) - 1)
			g_menuPosition[id] = (g_UPNum / 8) + (((g_UPNum % 8) > 0) ? 1 : 0) - 1
		}
		case 9: return PLUGIN_HANDLED;
		default: displayLevelUPMenu(id, g_menuPosition[id])
	}
	return PLUGIN_HANDLED;
}
displayLevelUPMenu(id, pos)
{
	if (pos < 0)
		return;

	new menuBody[512]
	new start = pos * 8
	if (start >= g_UPNum)
		start = pos = g_menuPosition[id] = (g_UPNum / 8) + (((g_UPNum % 8) > 0) ? 1 : 0)

	new len = format(menuBody, 511,"\r成就列表\R%d / %d^n^n", pos + 1, (g_UPNum / 8) + (((g_UPNum % 8) > 0) ? 1 : 0))
	new end = start + 8
	if (end > g_UPNum)
		end = g_UPNum

	for (new a = start;a < end;++a)
	{
		if (!g_up[id][a])
			len += format(menuBody[len], 511-len, "\rX - %s^n", g_LevelUPName[a])
		else
			len += format(menuBody[len], 511-len, "\w%d - %s^n", a, g_LevelUPName[a])
	}
	format(menuBody[len], 511-len, "^n\w1. 上一頁 2. 下一頁 3. 回到第一頁 4. 最後一頁 0. 離開")
	show_menu(id, KEYSMENU, menuBody, -1, "Level UP Menu")
}
public cmdUPMenu(id, level, cid)
{
	displayLevelUPMenu(id, g_menuPosition[id])
}
public user_level_up(id, up)
{
	if (!g_up[id][up] && !g_cant_up && cs_get_user_team(id) != CS_TEAM_SPECTATOR)
	{
		new name[64], TeamName[128], message[256]
		get_user_name(id, name, 63)
		change_name(name, 63)
		formatex(message, 255, "^x03[UP] %s %s", name, level_up[up])
		g_level[id]++
		g_up[id][up]++
		g_statpoint[id]++
		g_round_up[id]++
		g_clear_up[id]++
		for (new i = 0;i < get_maxplayers();i++)
		{
			if (is_user_connected(i))
			{
				get_user_team(i, TeamName, 127)
				ChangeTeamInfo(i, "ALL")
				WriteMessage(i, message)
				ChangeTeamInfo(i, TeamName)
			}
		}
		if (g_round_up[id] >= 5)
			user_level_up(id, UP_1ROUND_CLEAN_5UP)

		if (g_level[id] == 10)
		{
			client_printcolor(id, "^x04[自我現實: 你完成了 /ctr10 ^x04個成就 - 自動給予10枚S幣]")
			g_smoney[id] += 10
		}
		if (g_level[id] == 20)
		{
			client_printcolor(id, "^x04[自我現實: 你完成了 /ctr20 ^x04個成就 - 自動給予10枚S幣]")
			g_smoney[id] += 10
		}
		if (g_level[id] == 30)
		{
			client_printcolor(id, "^x04[自我現實: 你完成了 /ctr30 ^x04個成就 - 自動給予10枚S幣]")
			g_smoney[id] += 10
		}
		if (g_level[id] == 40)
		{
			client_printcolor(id, "^x04[自我現實: 你完成了 /ctr40 ^x04個成就 - 自動給予10枚S幣]")
			g_smoney[id] += 10
		}
		if (g_level[id] == 50)
		{
			client_printcolor(id, "^x04[自我現實: 你完成了 /ctr50 ^x04個成就 - 自動給予10枚S幣]")
			user_level_up(id, UP_CLEAR_50_UP)
			g_smoney[id] += 10
		}
		if (g_level[id] == 60)
		{
			client_printcolor(id, "^x04[自我現實: 你完成了 /ctr60 ^x04個成就 - 自動給予10枚S幣]")
			g_smoney[id] += 10
		}
		if (g_level[id] == 70)
		{
			client_printcolor(id, "^x04[自我現實: 你完成了 /ctr70 ^x04個成就 - 自動給予10枚S幣]")
			g_smoney[id] += 10
		}
		if (g_level[id] == 80)
		{
			client_printcolor(id, "^x04[自我現實: 你完成了 /ctr80 ^x04個成就 - 自動給予10枚S幣]")
			g_smoney[id] += 10
		}
		if (g_level[id] == 90)
		{
			client_printcolor(id, "^x04[自我現實: 你完成了 /ctr90 ^x04個成就 - 自動給予10枚S幣]")
			g_smoney[id] += 10
		}
		if (g_level[id] == 100)
		{
			client_printcolor(id, "^x04[自我現實: 你完成了 /ctr100 ^x04個成就 - 自動給予10枚S幣]")
			user_level_up(id, UP_CLEAR_100_UP)
			g_smoney[id] += 10
		}
		if (g_level[id] == 110)
		{
			client_printcolor(id, "^x04[自我現實: 你完成了 /ctr110 ^x04個成就 - 自動給予10枚S幣]")
			g_smoney[id] += 10
		}
		if (g_level[id] == 120)
		{
			client_printcolor(id, "^x04[自我現實: 你完成了 /ctr120 ^x04個成就 - 自動給予10枚S幣]")
			g_smoney[id] += 10
		}
		if (g_level[id] == 130)
		{
			client_printcolor(id, "^x04[自我現實: 你完成了 /ctr130 ^x04個成就 - 自動給予10枚S幣]")
			g_smoney[id] += 10
		}
		if (g_level[id] == 140)
		{
			client_printcolor(id, "^x04[自我現實: 你完成了 /ctr140 ^x04個成就 - 自動給予10枚S幣]")
			g_smoney[id] += 10
		}
		if (g_level[id] == 150)
		{
			client_printcolor(id, "^x04[自我現實: 你完成了 /ctr150 ^x04個成就 - 自動給予10枚S幣]")
			g_smoney[id] += 10
		}
		if (g_level[id] == 160)
		{
			client_printcolor(id, "^x04[自我現實: 你完成了 /ctr160 ^x04個成就 - 自動給予10枚S幣]")
			g_smoney[id] += 10
		}
		if (g_level[id] == 170)
		{
			client_printcolor(id, "^x04[自我現實: 你完成了 /ctr170 ^x04個成就 - 自動給予10枚S幣]")
			g_smoney[id] += 10
		}
		if (g_level[id] == 180)
		{
			client_printcolor(id, "^x04[自我現實: 你完成了 /ctr180 ^x04個成就 - 自動給予10枚S幣]")
			g_smoney[id] += 10
		}
		if (g_level[id] == 190)
		{
			client_printcolor(id, "^x04[自我現實: 你完成了 /ctr190 ^x04個成就 - 自動給予10枚S幣]")
			g_smoney[id] += 10
		}
		if (g_level[id] == 200)
		{
			client_printcolor(id, "^x04[自我現實: 你完成了 /ctr200 ^x04個成就 - 自動給予10枚S幣]")
			g_smoney[id] += 10
		}
	}
}
public ChangeTeamInfo(player, team[])
{
	message_begin(MSG_ONE, get_user_msgid("TeamInfo"), _, player)
	write_byte(player)
	write_string(team)
	message_end()
}
public WriteMessage(player, message[])
{
	message_begin(MSG_ONE, get_user_msgid("SayText"), {0, 0, 0}, player)
	write_byte(player)
	write_string(message)
	message_end()
}
public Beacon_Effect(id)
{
	new origin[3]
	get_user_origin(id, origin)
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
	write_byte(TE_BEAMCYLINDER)
	write_coord(origin[0])
	write_coord(origin[1])
	write_coord(origin[2]-20)
	write_coord(origin[0])
	write_coord(origin[1])
	write_coord(origin[2]+200)
	write_short(g_lightSpr)
	write_byte(0)
	write_byte(1)
	write_byte(10)
	write_byte(5)
	write_byte(1)
	write_byte(255)
	write_byte(0)
	write_byte(0)
	write_byte(255)
	write_byte(6)
	message_end()
}
public change_angel(ent)
{
	new Float:myvelocity = 1200.0
	if (is_valid_ent(ent))
	{
		new players[32], count, owner
		get_players(players, count)
		owner = entity_get_edict(ent, EV_ENT_owner)
		new Float:entity_origin[3], target_origin[3]
		entity_get_vector(ent, EV_VEC_origin, entity_origin)
		get_user_origin(owner, target_origin, 3)
		new Float:diff[3]
		diff[0] = target_origin[0] - entity_origin[0]
		diff[1] = target_origin[1] - entity_origin[1]
		diff[2] = target_origin[2] - entity_origin[2]
		new Float:length = floatsqroot(floatpower(diff[0], 2.0) + floatpower(diff[1], 2.0) + floatpower(diff[2], 2.0))
		new Float:Velocity[3]
		Velocity[0] = diff[0] * ((myvelocity+0.0) / length)
		Velocity[1] = diff[1] * ((myvelocity+0.0) / length)
		Velocity[2] = diff[2] * ((myvelocity+0.0) / length)
		entity_set_vector(ent, EV_VEC_velocity, Velocity)
		new Float:NewAngle[3]
		entity_get_vector(ent, EV_VEC_velocity, Velocity)
		vector_to_angle(Velocity, NewAngle)
		entity_set_vector(ent, EV_VEC_angles, NewAngle)
	}
}
public Create_Smoke_Group(Float:position[3])
{
	new Float:origin[4][3]
	position[2] -= 20
	get_spherical_coord(position, 40.0, 0.0, 0.0, origin[0])
	get_spherical_coord(position, 40.0, 90.0, 0.0, origin[1])
	get_spherical_coord(position, 40.0, 180.0, 0.0, origin[2])
	get_spherical_coord(position, 40.0, 270.0, 0.0, origin[3])
	for (new i = 0;i < 4;i++)
		create_Smoke(origin[i], g_smokeSpr, 50, 0)
}
public create_oberon(id)
{
	if (oberon_control[id] || !is_user_alive(id))
		return;

	new Float:iOrigin[3], iPlayers[32], iNum
	new ent = create_entity("info_target")
	strip_user_weapons(id)
	entity_set_float(id, EV_FL_takedamage, 0.0)
	entity_set_int(id, EV_INT_solid, 0)
	entity_set_int(id, EV_INT_movetype, MOVETYPE_NOCLIP)
	Util_SetRendering(id, kRenderFxGlowShell, {0.0, 0.0, 0.0}, kRenderTransAlpha, 0.0)
	entity_get_vector(id, EV_VEC_origin, iOrigin)
	entity_set_origin(ent, iOrigin)
	entity_set_float(ent, EV_FL_takedamage, 1.0)
	entity_set_float(ent, EV_FL_health, 500000.0)
	entity_set_string(ent, EV_SZ_classname, "npc_oberon")
	entity_set_model(ent, oberon_model)
	entity_set_int(ent, EV_INT_solid, 2)
	entity_set_edict(ent, EV_ENT_owner, id)
	entity_set_int(ent, EV_INT_movetype, MOVETYPE_PUSHSTEP)
	set_pev(ent, pev_enemy, 0)
	entity_set_byte(ent, EV_BYTE_controller1, 125)
	entity_set_byte(ent, EV_BYTE_controller2, 125)
	entity_set_byte(ent, EV_BYTE_controller3, 125)
	entity_set_byte(ent, EV_BYTE_controller4, 125)
	maxs[ent][0] = 32.0
	maxs[ent][1] = 32.0
	maxs[ent][2] = 150.0
	mins[ent][0] = -32.0
	mins[ent][1] = -32.0
	mins[ent][2] = -36.0
	entity_set_size(ent, mins[ent], maxs[ent])
	bwave[ent] = false
	has_bombs[ent] = true
	can_move[id] = true
	can_space[id] = true
	can_switch[id] = true
	g_victim[id] = 0
	play_anim(ent, 2, 1.0)
	drop_to_floor(ent)
	if (!g_hamtakedmg)
	{
		RegisterHamFromEntity(Ham_TakeDamage, ent, "fw_zb_takedmg")
		g_hamtakedmg++
	}
	oberon_control[id] = ent
	g_oBoss[id] = true
	create_camera(id)
	view_camera(id)
	get_players(iPlayers, iNum, "c")
	entity_set_float(ent, EV_FL_nextthink, halflife_time() + 0.01)
	set_dhudmessage(255, 20, 20, -1.0, 0.17, 1, 0.0, 5.0, 1.0, 1.0)
	show_dhudmessage(0, "危險: 魔王進化成阿比隆了")
	set_dhudmessage(0, 200, 0, -1.0, 0.75, 0, 6.0, 12.0, 1.0, 1.0)
	show_dhudmessage(id, "你現在是阿比隆，按G可以使用結界，按E可以使用衝擊波，按R可以使用毒氣彈")
	user_level_up(id, UP_BE_OBERON)
	if (iNum < 10)
		return;

	for (new i = 0;i < iNum;i++)
	{
		if (is_user_alive(iPlayers[i]) && !g_Boss[iPlayers[i]] && !g_human_has_dead)
			user_level_up(iPlayers[i], UP_ALL_CT_NO_KILL_OBERON)
	}
}
public oberon_jump(ent)
{
	if (!is_valid_ent(ent))
		return;

	new Float:flAngles[3], Float:Direction[3];
	pev(ent, pev_angles, flAngles)
	angle_vector(flAngles, ANGLEVECTOR_FORWARD, Direction)
	xs_vec_mul_scalar(Direction, 300.0, Direction)
	Direction[2] = 300.0
	entity_set_int(ent, EV_INT_movetype, MOVETYPE_BOUNCE)
	entity_set_float(ent, EV_FL_friction, 0.8)
	entity_set_vector(ent, EV_VEC_velocity, Direction)
}
public oberon_land(ent)
{
	if (!is_valid_ent(ent))
		return;

	bwave[ent] = false
	new Float:speed[3] = {0.01,0.0,0.0}
	entity_set_vector(ent, EV_VEC_velocity, speed)
	entity_set_int(ent, EV_INT_movetype, MOVETYPE_PUSHSTEP)
}
public oberon_bw_deploy(ent)
{
	if (!is_valid_ent(ent))
		return;

	new Float:flAngles[3], Float:Ent_Origin[3], Float:NewOrigin[3]
	pev(ent, pev_angles, flAngles)
    	pev(ent, pev_origin, Ent_Origin)
	for (new Float:i = 0.0;i <= 200.0;i += 0.1)
	{
		NewOrigin[0] = floatcos(flAngles[1], degrees) * i
		NewOrigin[1] = floatsin(flAngles[1], degrees) * i
		NewOrigin[0] += Ent_Origin[0]
		NewOrigin[1] += Ent_Origin[1]
		NewOrigin[2] = Ent_Origin[2]
		if (PointContents(NewOrigin) == CONTENTS_SOLID)
		{
			i -= 0.1;
			NewOrigin[0] = floatcos(flAngles[1], degrees) * i
			NewOrigin[1] = floatsin(flAngles[1], degrees) * i
			NewOrigin[0] += Ent_Origin[0]
			NewOrigin[1] += Ent_Origin[1]
			NewOrigin[2] = Ent_Origin[2]
			break;
		}
	}
	new ent2 = create_entity("info_target")
	new owner = entity_get_edict(ent, EV_ENT_owner)
	entity_set_origin(ent2, NewOrigin)
	entity_set_edict(ent2, EV_ENT_owner, owner)
	oberon_blastwave(ent2)
}
public oberon_blastwave(ent)
{
	new origin[3], Float:iOrigin[3], Float:cView[3], Float:radious, iVictim
	entity_get_vector(ent, EV_VEC_origin, iOrigin)
	radious = 400.0
	engfunc(EngFunc_MessageBegin, MSG_PVS, SVC_TEMPENTITY, iOrigin, 0)
	write_byte(TE_BEAMCYLINDER)
	engfunc(EngFunc_WriteCoord, iOrigin[0])
	engfunc(EngFunc_WriteCoord, iOrigin[1])
	engfunc(EngFunc_WriteCoord, iOrigin[2])
	engfunc(EngFunc_WriteCoord, iOrigin[0])
	engfunc(EngFunc_WriteCoord, iOrigin[1])
	engfunc(EngFunc_WriteCoord, iOrigin[2] + (radious * 10))
	write_short(g_ringSpr)
	write_byte(0)
	write_byte(0)
	write_byte(1)
	write_byte(100)
	write_byte(0)
	write_byte(255)
	write_byte(255)
	write_byte(255)
	write_byte(200)
	write_byte(0)
	message_end()
	get_origin_int(ent, origin)
	rocks_explode(origin)
	emit_sound(ent, CHAN_BODY, oberon_earth_sound, 1.0, ATTN_NORM, 0, PITCH_NORM)
	while ((iVictim = find_ent_in_sphere(iVictim, iOrigin, radious)) != 0)
	{
		if (is_user_alive(iVictim) && cs_get_user_team(iVictim) != CS_TEAM_SPECTATOR)
		{
			new Float:takedmg = entity_get_float(iVictim, EV_FL_takedamage)
			if (!takedmg)
				continue;

			new Float:Orig[3]
			static iNewHealth
			entity_get_vector(iVictim, EV_VEC_origin, Orig)
			new Float:distance = get_distance_f(iOrigin, Orig)
			new Float:speed = distance / radious
			cView[0] = (Orig[0] - iOrigin[0]) * speed
			cView[1] = (Orig[1] - iOrigin[1]) * speed
			cView[2] = 700.0 - distance
			new Float:dis_dmg = (distance / radious) * 100.0
			dis_dmg = (100 * dis_dmg) / 100.0
			new dis_dmg_round = floatround(dis_dmg , floatround_ceil)
			if ((100 - dis_dmg_round) > 100)
				iNewHealth = max(0, get_user_health(iVictim) - (100 - dis_dmg_round))
			else
				iNewHealth = max(0, get_user_health(iVictim) - 100)

			entity_set_vector(iVictim, EV_VEC_velocity, cView)
			if (!iNewHealth)
			{
				new owner = entity_get_edict(ent, EV_ENT_owner)
				ExecuteHamB(Ham_Killed, iVictim, owner, 0)
				user_level_up(owner, UP_OBERON_SW_KILL)
				g_oberon_sw_kill_num[owner]++
				if (g_oberon_sw_kill_num[owner] >= 10)
					user_level_up(owner, UP_OBERON_SW_10KILL)

				if (g_oberon_sw_kill_num[owner] >= 20)
					user_level_up(owner, UP_OBERON_SW_20KILL)

				continue;
			}
			screen_effects(iVictim)
			set_user_health(iVictim, iNewHealth)
		}
	}
	remove_entity(ent)
}
public get_origin_int(index, origin[3])
{
	new Float:FVec[3]
	pev(index, pev_origin, FVec)
	origin[0] = floatround(FVec[0])
	origin[1] = floatround(FVec[1])
	origin[2] = floatround(FVec[2])
	return 1;
}
public fadeout(ent2)
{
	visibility[ent2] -= 5
	Util_SetRendering(ent2, kRenderFxGlowShell, {0.0, 0.0, 0.0}, kRenderTransAlpha, visibility[ent2])
	if (visibility[ent2] > 0)
		set_task(0.1, "fadeout", ent2)
	else
		remove_entity(ent2)
}
public create_target_spr(id, target)
{
	new Float:origin[3]
	new ent = create_entity("info_target")
	entity_set_string(ent, EV_SZ_classname, "target_model")
	entity_set_edict(ent, EV_ENT_owner, target)
	entity_set_model(ent, mdl_target)
	entity_get_vector(target, EV_VEC_origin, origin)
	origin[2] += 16.0
	entity_set_vector(ent, EV_VEC_origin, origin)
    	entity_set_int(ent, EV_INT_movetype, MOVETYPE_NOCLIP)
	set_pev(ent, pev_rendermode, kRenderTransAlpha)
    	set_pev(ent, pev_renderamt, 0.0)
	play_anim(ent, 0, 1.0)
	entity_set_float(ent, EV_FL_nextthink, halflife_time() + 0.01)
	target_ent[id] = ent
}
public target_model_think(ent)
{
	new Float:origin[3]
	new owner = entity_get_edict(ent, EV_ENT_owner)
	entity_get_vector(owner, EV_VEC_origin, origin)
	origin[2] += 16.0
	entity_set_vector(ent, EV_VEC_origin, origin)
	if (get_anim(ent) != 0)
		play_anim(ent, 0, 1.0)

	entity_set_float(ent, EV_FL_nextthink, get_gametime() + 0.01)
}
public can_move_again(id)
	can_move[id] = true

public can_space_again(id)
	can_space[id] = true

public stop_movement(ent)
{
	if (!is_valid_ent(ent))
		return;

	new Float:Direction[3] = {0.0,0.0,0.0}
	entity_set_vector(ent, EV_VEC_velocity, Direction)
}
public remove_this_ent(ent)
{
	if (!is_valid_ent(ent))
		return;

	remove_entity(ent)
}
public remove_shield(ent)
{
	if (!is_valid_ent(ent))
		return;

	maxs[ent][2] = 136.0
	entity_set_size(ent, mins[ent], maxs[ent])
	entity_set_float(ent, EV_FL_takedamage, 1.0)
	Util_SetRendering(ent, kRenderFxGlowShell, {0.0, 0.0, 0.0}, kRenderNormal, 0.0)
}
public light_attack(ent)
{
	emit_sound(ent, CHAN_VOICE, oberon_l_attack_sound, 1.0, ATTN_NORM, 0, PITCH_NORM)
	play_anim(ent, 7, 1.0)
	set_task(0.1, "l_attack_dmg", ent)
}
public l_attack_dmg(ent)
{
	new iVictim, Float:iOrigin[3]
	new Float:radious = 150.0
	pev(ent, pev_origin, iOrigin)
	while ((iVictim = find_ent_in_sphere(iVictim, iOrigin, radious)) != 0)
	{
		if (is_user_alive(iVictim) && cs_get_user_team(iVictim) != CS_TEAM_SPECTATOR)
		{
			new Float:takedmg = entity_get_float(iVictim, EV_FL_takedamage)
			if (!takedmg)
				continue;

			static iNewHealth
			iNewHealth = max(0, get_user_health(iVictim) - 70)
			if (!iNewHealth)
			{
				new owner = entity_get_edict(ent, EV_ENT_owner)
				ExecuteHamB(Ham_Killed, iVictim, owner, 0)
				continue;
			}
			emit_sound(iVictim, CHAN_BODY, oberon_attack_sound, 1.0, ATTN_NORM, 0, PITCH_NORM)
			screen_effects(iVictim)
			set_user_health(iVictim, iNewHealth)
		}
	}
}
public heavy_attack(ent)
{
	new Float:Ent_Origin[3], Float:flAngles[3], Float:Dir[3]
	new ent2 = create_entity("info_target")
	new owner = entity_get_edict(ent, EV_ENT_owner)
    	pev(ent, pev_origin, Ent_Origin)
	entity_set_origin(ent2, Ent_Origin)
	entity_set_int(ent2, EV_INT_movetype, MOVETYPE_NOCLIP)
	entity_set_edict(ent2, EV_ENT_owner, owner)
	pev(ent, pev_angles, flAngles)
	angle_vector(flAngles, ANGLEVECTOR_FORWARD, Dir)
	xs_vec_mul_scalar(Dir, 150.0, Dir)
	entity_set_vector(ent2, EV_VEC_velocity, Dir)
	emit_sound(ent, CHAN_VOICE, oberon_h_attack_sound, 1.0, ATTN_NORM, 0, PITCH_NORM)
	play_anim(ent, 6, 1.0)
	set_task(1.0, "h_attack_dmg", ent2)
}
public h_attack_dmg(ent)
{
	new iVictim, Float:iOrigin[3]
	new Float:radious = 150.0
	pev(ent, pev_origin, iOrigin)
	while ((iVictim = find_ent_in_sphere(iVictim, iOrigin, radious)) != 0)
	{
		if (is_user_alive(iVictim) && cs_get_user_team(iVictim) != CS_TEAM_SPECTATOR)
		{
			new Float:takedmg = entity_get_float(iVictim, EV_FL_takedamage)
			if (!takedmg)
				continue;

			new owner = entity_get_edict(ent, EV_ENT_owner)
			ExecuteHamB(Ham_Killed, iVictim, owner, 0)
			emit_sound(iVictim, CHAN_BODY, oberon_attack_sound, 1.0, ATTN_NORM, 0, PITCH_NORM)
			continue;
		}
	}
	remove_entity(ent)
}
public npc_turntotarget(ent, Float:Ent_Origin[3], target, Float:Vic_Origin[3])
{
	if (target)
	{
		new Float:newAngle[3]
		entity_get_vector(ent, EV_VEC_angles, newAngle)
		new Float:x = Vic_Origin[0] - Ent_Origin[0];
		new Float:z = Vic_Origin[1] - Ent_Origin[1];
		new Float:radians = floatatan(z/x, radian)
		newAngle[1] = radians * (180 / 3.14)
		if (Vic_Origin[0] < Ent_Origin[0])
			newAngle[1] -= 180.0;

		entity_set_vector(ent, EV_VEC_angles, newAngle)
	}
}
public FindClosestEnemy(entid)
{
	new Float:Dist
	new Float:maxdistance = 4000.0
	new indexid = 0
	for (new i = 0;i < get_maxplayers();i++)
	{
		if (is_user_alive(i) && can_see_fm(entid, i))
		{
			Dist = entity_range(entid, i)
			new Float:takedmg = entity_get_float(i, EV_FL_takedamage)
			if (!takedmg)
				continue;

			if (Dist <= maxdistance)
			{
				maxdistance = Dist
				indexid = i
			}
		}
	}
	return indexid;
}
public bool:can_see_fm(entindex1, entindex2)
{
	if (!entindex1 || !entindex2)
		return false;

	new flags = pev(entindex1, pev_flags)
	if (flags & EF_NODRAW || flags & FL_NOTARGET)
		return false;

	new Float:lookerOrig[3], Float:temp[3], Float:NewOrigin[3], Float:angles[3], is_oberon[32], iVictim
	entity_get_vector(entindex1, EV_VEC_origin, lookerOrig)
	pev(entindex1, pev_view_ofs, temp)
	lookerOrig[0] += temp[0]
	lookerOrig[1] += temp[1]
	lookerOrig[2] += temp[2]
	entity_get_vector(entindex1,EV_VEC_angles,angles)
	entity_get_string(entindex1, EV_SZ_classname, is_oberon, 31)
	if (equal(is_oberon, "npc_oberon"))
	{
		new owner = entity_get_edict(entindex1, EV_ENT_owner)
		entity_get_vector(owner,EV_VEC_angles,angles)
	}
	NewOrigin[0] = floatcos(angles[1], degrees) * 400.0
	NewOrigin[1] = floatsin(angles[1], degrees) * 400.0
	NewOrigin[0] += lookerOrig[0]
	NewOrigin[1] += lookerOrig[1]
	NewOrigin[2] = lookerOrig[2]
	while ((iVictim = find_ent_in_sphere(iVictim, NewOrigin, 400.0)) != 0)
	{
		if (iVictim == entindex2 && is_user_alive(iVictim))
		{
			new Float:targetBaseOrig[3], Float:targetOrig[3]
			pev(entindex2, pev_origin, targetBaseOrig)
			pev(entindex2, pev_view_ofs, temp)
			targetOrig[0] = targetBaseOrig[0] + temp[0]
			targetOrig[1] = targetBaseOrig[1] + temp[1]
			targetOrig[2] = targetBaseOrig[2] + temp[2]
			engfunc(EngFunc_TraceLine, lookerOrig, targetOrig, 0, entindex1, 0)
			if (get_tr2(0, TraceResult:TR_InOpen) && get_tr2(0, TraceResult:TR_InWater))
				return false;
			else
			{
				new Float:flFraction
				get_tr2(0, TraceResult:TR_flFraction, flFraction)
				if (flFraction == 1.0 || (get_tr2(0, TraceResult:TR_pHit) == entindex2))
					return true
				else
				{
					targetOrig[0] = targetBaseOrig[0]
					targetOrig[1] = targetBaseOrig[1]
					targetOrig[2] = targetBaseOrig[2]
					engfunc(EngFunc_TraceLine, lookerOrig, targetOrig, 0, entindex1, 0)
					get_tr2(0, TraceResult:TR_flFraction, flFraction)
					if (flFraction == 1.0 || (get_tr2(0, TraceResult:TR_pHit) == entindex2))
						return true;
					else
					{
						targetOrig[0] = targetBaseOrig[0]
						targetOrig[1] = targetBaseOrig[1]
						targetOrig[2] = targetBaseOrig[2] - 17.0
						engfunc(EngFunc_TraceLine, lookerOrig, targetOrig, 0, entindex1, 0)
						get_tr2(0, TraceResult:TR_flFraction, flFraction)
						if (flFraction == 1.0 || (get_tr2(0, TraceResult:TR_pHit) == entindex2))
							return true;
					}
				}
			}
		}
	}
	return false;
}
public oberon_bomb(id)
{
	new owner = entity_get_edict(id, EV_ENT_owner)
	if (!is_valid_ent(oberon_control[owner]))
		return;

	new Float:iOrigin[3], Float:Direction[3]
	new Float:maxs[3] = {1.0, 1.0, 1.0}
	new Float:mins[3] = {-1.0, -1.0, -1.0}
	new target = g_victim[owner]
	entity_get_vector(id, EV_VEC_origin, iOrigin)
	new ent = create_entity("info_target")
	entity_set_string(ent, EV_SZ_classname, "oberon_bomb")
	entity_set_model(ent, oberon_bomb_model)
	entity_set_edict(ent, EV_ENT_owner, owner)
	entity_set_size(ent, mins, maxs)
	iOrigin[2] += 40.0
	entity_set_origin(ent, iOrigin)
	entity_set_int(ent, EV_INT_effects, 2)
	entity_set_int(ent, EV_INT_solid, 1)
	entity_set_int(ent, EV_INT_movetype, MOVETYPE_BOUNCE)
	if (target)
	{
		new Float:TarOrigin[3]
		entity_get_vector(target, EV_VEC_origin, TarOrigin)
		Direction[0] = (TarOrigin[0] - iOrigin[0]) * 1.3
		Direction[1] = (TarOrigin[1] - iOrigin[1]) * 1.3
		Direction[2] = 250.0
		npc_turntotarget(ent, TarOrigin, target, iOrigin)
	}
	else
	{
		new Float:angles[3]
		pev(owner, pev_angles, angles)
		angle_vector(angles, ANGLEVECTOR_FORWARD, Direction)
		xs_vec_mul_scalar(Direction, 1000.0, Direction)
		Direction[2] = 250.0
	}
	entity_set_vector(ent, EV_VEC_velocity, Direction)
	emit_sound(id, CHAN_BODY, oberon_bomb_deploy_sound, 1.0, ATTN_NORM, 0, PITCH_NORM)
}
public oberon_bomb2(id)
{
	new owner = entity_get_edict(id, EV_ENT_owner)
	if (!is_valid_ent(oberon_control[owner]))
		return;

	new Float:iOrigin[3], Float:Direction[3]
	new Float:maxs[3] = {1.0, 1.0, 1.0}
	new Float:mins[3] = {-1.0, -1.0, -1.0}
	new target = g_victim[owner]
	entity_get_vector(id, EV_VEC_origin, iOrigin)
	new ent = create_entity("info_target")
	entity_set_string(ent, EV_SZ_classname, "oberon_bomb")
	entity_set_model(ent, oberon_bomb_model)
	entity_set_edict(ent, EV_ENT_owner, owner)
	entity_set_size(ent, mins, maxs)
	iOrigin[2] += 40.0
	entity_set_origin(ent, iOrigin)
	entity_set_int(ent, EV_INT_effects, 2)
	entity_set_int(ent, EV_INT_solid, 1)
	entity_set_int(ent, EV_INT_movetype, MOVETYPE_BOUNCE)
	if (target)
	{
		new Float:TarOrigin[3]
		entity_get_vector(target, EV_VEC_origin, TarOrigin)
		Direction[0] = (TarOrigin[0] - iOrigin[0]) * 1.3
		Direction[1] = (TarOrigin[1] - iOrigin[1]) * 1.3
		Direction[2] = 250.0
		npc_turntotarget(ent, TarOrigin, target, iOrigin)
	}
	else
	{
		new Float:angles[3]
		pev(owner, pev_angles, angles)
		angle_vector(angles, ANGLEVECTOR_FORWARD, Direction)
		xs_vec_mul_scalar(Direction, 1000.0, Direction)
		Direction[2] = 250.0
	}
	entity_set_vector(ent, EV_VEC_velocity, Direction)
	emit_sound(id, CHAN_BODY, oberon_bomb_deploy_sound, 1.0, ATTN_NORM, 0, PITCH_NORM)
	play_anim(oberon_control[owner], 9, 1.0)
}
public bomb_touch(id, touched)
{
	new Float:origin[3]
	new owner = entity_get_edict(id, EV_ENT_owner)
	entity_get_vector(id, EV_VEC_origin, origin)
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
	write_byte(TE_FIREFIELD)
	engfunc(EngFunc_WriteCoord, origin[0])
	engfunc(EngFunc_WriteCoord, origin[1])
	engfunc(EngFunc_WriteCoord, origin[2] + 50)
	write_short(100)
	write_short(g_puffSpr)
	write_byte(100)
	write_byte(TEFIRE_FLAG_ALPHA)
	write_byte(100)
	message_end()
	new ent = create_entity("info_target")
	entity_set_string(ent, EV_SZ_classname, "poison")
	entity_set_edict(ent, EV_ENT_owner, owner)
	entity_set_vector(ent, EV_VEC_origin, origin)
	set_task(10.0, "remove_this_ent", ent)
	entity_set_float(ent, EV_FL_nextthink, halflife_time() + 0.01)
	emit_sound(id, CHAN_BODY, oberon_bomb_explode_sound, 1.0, ATTN_NORM, 0, PITCH_NORM)
	remove_entity(id)
}
public poison_think(ent)
{
	new Float:radious = 175.0
	new Float:iOrigin[3], iVictim
	entity_get_vector(ent, EV_VEC_origin, iOrigin)
	while ((iVictim = find_ent_in_sphere(iVictim, iOrigin, radious)) != 0)
	{
		if (is_user_alive(iVictim) && cs_get_user_team(iVictim) != CS_TEAM_SPECTATOR)
		{
			new Float:takedmg = entity_get_float(iVictim, EV_FL_takedamage)
			if (!takedmg)
				continue;

			static iNewHealth
			iNewHealth = max(0, get_user_health(iVictim) - 50)
			if (!iNewHealth)
			{
				new owner = entity_get_edict(ent, EV_ENT_owner)
				ExecuteHamB(Ham_Killed, iVictim, owner, 0)
				user_level_up(owner, UP_OBERON_BW_KILL)
				g_oberon_bw_kill_num[owner]++
				if (g_oberon_bw_kill_num[owner] >= 10)
					user_level_up(owner, UP_OBERON_BW_10KILL)

				if (g_oberon_bw_kill_num[owner] >= 20)
					user_level_up(owner, UP_OBERON_BW_20KILL)

				continue;
			}
			screen_effects(iVictim)
			set_user_health(iVictim, iNewHealth)
		}
	}
	entity_set_float(ent, EV_FL_nextthink, get_gametime() + 1.0)
}
public play_bgm()
{
	new iPlayers[32], iNum
	new sound = random_num(0, sizeof BGM - 1)
	get_players(iPlayers, iNum, "c")
	for (new i = 0;i < iNum;i++)
	{
		client_cmd(iPlayers[i], "mp3 play ^"sound/%s^"", BGM[sound])
	}
	set_task(float(BGM_TASK[sound]), "play_bgm", 7866)
}
public bomb_cooldown(id)
{
	if (!is_valid_ent(id))
		return;

	has_bombs[id] = true
}
public FX_Line(user, start[3], stop[3], color[3], brightness)
{
	if (!user)
		return;

	message_begin(MSG_ONE_UNRELIABLE, SVC_TEMPENTITY, _, user)
	write_byte(TE_BEAMPOINTS)
	write_coord(start[0])
	write_coord(start[1])
	write_coord(start[2])
	write_coord(stop[0])
	write_coord(stop[1])
	write_coord(stop[2])
	write_short(g_dotSpr)
	write_byte(1)
	write_byte(1)
	write_byte(1)
	write_byte(10)
	write_byte(0)
	write_byte(color[0])
	write_byte(color[1])
	write_byte(color[2])
	write_byte(brightness)
	write_byte(0)
	message_end()
}
public reset_all(id)
{
	if (!is_valid_ent(oberon_control[id]))
		return;

	remove_entity(oberon_control[id])
	if (is_valid_ent(camera[id]))
		remove_entity(camera[id])

	if (target_ent[id])
	{
		remove_entity(target_ent[id])
		target_ent[id] = 0
	}
	entity_set_int(id, EV_INT_movetype, MOVETYPE_WALK)
	if (is_user_alive(id))
		attach_view(id, id)

	entity_set_float(id, EV_FL_takedamage, 1.0)
	fm_give_item(id, "weapon_knife")
	oberon_control[id] = 0
	camera[id] = 0 
	can_move[id] = false
	can_space[id] = false
	g_victim[id] = 0
	Util_SetRendering(id, kRenderFxGlowShell, {0.0, 0.0, 0.0}, kRenderTransAlpha, 255.0)
}
public task_hide_money(id)
{
	if (!is_user_alive(id))
		return;

	message_begin(MSG_ONE, get_user_msgid("HideWeapon"), _, id)
	write_byte((1<<5))
	message_end()
}
Save_Data(id)
{
	new Vault_Key[64]
	get_user_name(id, Vault_Key, 63)
	replace_all(Vault_Key, 63, "'", "\'" )
	new iLen = 0
	static szData[9000]
	iLen += formatex(szData[iLen], charsmax(szData) - iLen, "%d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d#",
	g_statpoint[id], g_crit[id], g_lucky[id], g_damage[id], g_speed[id], g_health[id], g_level[id], g_money[id], g_lmoney[id], g_smoney[id], g_respawn[id], g_oldplayer[id], g_time_s[id], g_time_m[id], g_time_h[id],
	g_model[id][0], g_model[id][1], g_model[id][2], g_model[id][3])
	nvault_set(g_save1, Vault_Key, szData)
	iLen = 0
	szData = ""
	iLen += formatex(szData[iLen], charsmax(szData) - iLen, "%d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d#",
	g_shop_buy_num[id], g_drop_weapon_num[id], g_kill_oberon_num[id], g_hurt_by_knife[id], g_m79_kill_num[id], g_strong_kill_num[id], g_god_axe_kill_num[id], g_plasma_kill_num[id], g_skullaxe_kill_num[id],
	g_kill_door_num[id], g_attack1_teammate[id], g_attack2_teammate[id], g_use_money[id], g_hurt_by_hegrenade[id], g_kill_boss_num[id], g_kill_sp_boss_num[id], g_hs_kill_boss_num[id], g_bug_boss_kill_human_num[id],
	g_sp_boss_bedie_kill[id], g_sp_boss_bedie_attack[id], g_lucky_num[id], g_crit_num[id], g_clear_up[id], g_lastgun_kill[id], g_on_boss[id], g_play_round[id], g_respawn_human_num[id], g_damage_up_num[id],
	g_oberon_bw_kill_num[id], g_oberon_sw_kill_num[id])
	nvault_set(g_save2, Vault_Key, szData)
	iLen = 0
	szData = ""
	iLen += formatex(szData[iLen], charsmax(szData) - iLen, "#")
	for(new up = 0;up < MAX_UP;up++)
	{
		iLen += formatex(szData[iLen], charsmax(szData) - iLen, "%d#", g_up[id][up])
	}
	nvault_set(g_save3, Vault_Key, szData)
	iLen = 0
	szData = ""
	iLen += formatex(szData[iLen], charsmax(szData) - iLen, "#")
	for(new forever = 0;forever < CSW_P90 + 1;forever++)
	{
		iLen += formatex(szData[iLen], charsmax(szData) - iLen, "%d#", g_forever_gun[id][forever])
	}
	nvault_set(g_save4, Vault_Key, szData)
}
Load_Data(id)
{
	new Vault_Key[64], szClassLevel[512], szClassLevel2[512]
	new szStatpoint[32], szCrit[32], szLucky[32], szDamage[32], szSpeed[32], szHealth[32], szLevel[32], szMoney[32], szLmoney[32], szSmoney[32], szRespawn[32], szOldplayer[32], szTimeS[32], szTimeM[32], szTimeH[32]
	new szSBN[32], szDWN[32], szKON[32], szHBK[32], szMKN[32], szSKN[32], szGAKN[32], szPKN[32], szSAKN[32], szKDN[32], szA1T[32], szA2T[32],
	szUM[32], szHBH[32], szKBN[32], szKSBN[32], szHKBN[32], szBBKHN[32], szSBBK[32], szSBBA[32], szLN[32], szCN[32], szCU[32], szLGK[32], szOB[32],
	szPR[32], szRHN[32], szDUN[32], szOBWKN[32], szOSWKN[32], szUP[32], szFG[32],
	szM1[32], szM2[32], szM3[32], szM4[32]
	static szData[9000], szAllItems[9000], szData2[9000], szAllItems2[9000], szData3[9000], szAllItems3[9000], szAllItems4[9000], szData4[9000], szData5[9000], szData6[9000]
	get_user_name(id, Vault_Key, 63)
	replace_all(Vault_Key, 63, "'", "\'" )
	//nvault_get(g_save1, Vault_Key, szData, charsmax(szData))
	//nvault_get(g_save2, Vault_Key, szData2, charsmax(szData2))
	nvault_get(g_save3, Vault_Key, szData3, charsmax(szData3))
	//nvault_get(g_save4, Vault_Key, szData6, charsmax(szData6))
	strtok(szData, szData, sizeof(szData) - 1, szAllItems, sizeof(szAllItems) - 1, '#')
	strtok(szData2, szData2, sizeof(szData2) - 1, szAllItems2, sizeof(szAllItems2) - 1, '#')
	strtok(szData3, szData3, sizeof(szData3) - 1, szAllItems3, sizeof(szAllItems3) - 1, '#')
	strtok(szData6, szData6, sizeof(szData6) - 1, szAllItems4, sizeof(szAllItems4) - 1, '#')
	parse(szData, szStatpoint, 31, szCrit, 31, szLucky, 31, szDamage, 31, szSpeed, 31, szHealth, 31, szLevel, 31, szMoney, 31, szLmoney, 31, szSmoney, 31, szRespawn, 31,
	szOldplayer, 31, szTimeS, 31, szTimeM, 31, szTimeH, 31, szM1, 31, szM2, 31, szM3, 31, szM4, 31)
	parse(szData2, szSBN, 31, szDWN, 31, szKON, 31, szHBK, 31, szMKN, 31, szSKN, 31, szGAKN, 31, szPKN, 31, szSAKN, 31, szKDN, 31, szData4, charsmax(szData4))
	parse(szData4, szA1T, 31, szA2T, 31, szUM, 31, szHBH, 31, szKBN, 31, szKSBN, 31, szHKBN, 31, szBBKHN, 31, szSBBK, 31, szSBBA, 31, szData5, charsmax(szData5))
	parse(szData5, szLN, 31, szCN, 31, szCU, 31, szLGK, 31, szOB, 31, szPR, 31, szRHN, 31, szDUN, 31, szOBWKN, 31, szOSWKN, 31)
	g_statpoint[id] = str_to_num(szStatpoint)
	g_crit[id] = str_to_num(szCrit)
	g_lucky[id] = str_to_num(szLucky)
	g_damage[id] = str_to_num(szDamage)
	g_speed[id] = str_to_num(szSpeed)
	g_health[id] = str_to_num(szHealth)
	g_level[id] = str_to_num(szLevel)
	g_money[id] = str_to_num(szMoney)
	g_lmoney[id] = str_to_num(szLmoney)
	g_smoney[id] = str_to_num(szSmoney)
	g_respawn[id] = str_to_num(szRespawn)
	g_oldplayer[id] = str_to_num(szOldplayer)
	g_time_s[id] = str_to_num(szTimeS)
	g_time_m[id] = str_to_num(szTimeM)
	g_time_h[id] = str_to_num(szTimeH)
	g_model[id][0] = str_to_num(szM1)
	g_model[id][1] = str_to_num(szM2)
	g_model[id][2] = str_to_num(szM3)
	g_model[id][3] = str_to_num(szM4)
	g_shop_buy_num[id] = str_to_num(szSBN)
	g_drop_weapon_num[id] = str_to_num(szDWN)
	g_kill_oberon_num[id] = str_to_num(szKON)
	g_hurt_by_knife[id] = str_to_num(szHBK)
	g_m79_kill_num[id] = str_to_num(szMKN)
	g_strong_kill_num[id] = str_to_num(szSKN)
	g_god_axe_kill_num[id] = str_to_num(szGAKN)
	g_plasma_kill_num[id] = str_to_num(szPKN)
	g_skullaxe_kill_num[id] = str_to_num(szSAKN)
	g_kill_door_num[id] = str_to_num(szKDN)
	g_attack1_teammate[id] = str_to_num(szA1T)
	g_attack2_teammate[id] = str_to_num(szA2T)
	g_use_money[id] = str_to_num(szUM)
	g_hurt_by_hegrenade[id] = str_to_num(szHBH)
	g_kill_boss_num[id] = str_to_num(szKBN)
	g_kill_sp_boss_num[id] = str_to_num(szKSBN)
	g_hs_kill_boss_num[id] = str_to_num(szHKBN)
	g_bug_boss_kill_human_num[id] = str_to_num(szBBKHN)
	g_sp_boss_bedie_kill[id] = str_to_num(szSBBK)
	g_sp_boss_bedie_attack[id] = str_to_num(szSBBA)
	g_lucky_num[id] = str_to_num(szLN)
	g_crit_num[id] = str_to_num(szCN)
	g_clear_up[id] = str_to_num(szCU)
	g_lastgun_kill[id] = str_to_num(szLGK)
	g_on_boss[id] = str_to_num(szOB)
	g_play_round[id] = str_to_num(szPR)
	g_respawn_human_num[id] = str_to_num(szRHN)
	g_damage_up_num[id] = str_to_num(szDUN)
	g_oberon_bw_kill_num[id] = str_to_num(szOBWKN)
	g_oberon_sw_kill_num[id] = str_to_num(szOSWKN)
	for(new up = 0;up < MAX_UP;up++)
	{
		strtok(szAllItems3, szClassLevel, sizeof(szClassLevel) - 1, szAllItems3, sizeof(szAllItems3) - 1, '#')
		strtok(szClassLevel, szUP, sizeof(szUP) - 1, szClassLevel, sizeof(szClassLevel) - 1, ' ')
		g_up[id][up] = str_to_num(szUP)
	}
	for(new forever = 0;forever < CSW_P90 + 1;forever++)
	{
		strtok(szAllItems4, szClassLevel2, sizeof(szClassLevel2) - 1, szAllItems4, sizeof(szAllItems4) - 1, '#')
		strtok(szClassLevel2, szFG, sizeof(szFG) - 1, szClassLevel2, sizeof(szClassLevel2) - 1, ' ')
		g_forever_gun[id][forever] = str_to_num(szFG)
	}
}
public native_get_user_boss(id)
	return g_Boss[id];

public native_get_user_sboss(id)
	return g_sBoss[id];

public native_get_user_oboss(id)
	return g_oBoss[id];

public native_get_user_bboss(id)
	return g_BugBoss[id];

public native_get_user_bmoney(id)
	return g_money[id];

public native_get_user_lmoney(id)
	return g_lmoney[id];

public native_get_user_smoney(id)
	return g_smoney[id];

public native_get_boss_lm(id)
	return g_sBoss_laser_mode[id];

public native_set_user_bmoney(id, set)
	g_money[id] = set;

public native_set_user_fire_num(id, set)
	g_fire_num[id] = set;

public native_set_user_hit_num(id, set)
	g_boss_hit_num[id] = set;

public native_set_user_damage_money(id, set)
	g_damage_money[id] = set;

public native_set_user_has_hurt(id, set)
{
	if (set)
		g_has_hurt[id] = true;
	else
		g_has_hurt[id] = false;
}
public native_set_user_all_damage(id, set)
	g_all_damage[id] = set;

public native_set_user_crit_num(id, set)
	g_crit_num[id] = set;

public native_set_user_has_fire(id, set)
{
	if (set)
		g_has_fire[id] = true;
	else
		g_has_fire[id] = false;
}
public native_set_user_space_num(id, set)
	g_catch_space_num[id] = set;

public native_set_user_shop_num(id, set)
	g_shop_buy_num[id] = set;

public native_set_user_m79_kill_num(id, set)
	g_m79_kill_num[id] = set;

public native_set_get_money_by_damage(id, set)
	g_get_money_by_damage[id] = set;

public native_set_user_use_money(id, set)
	g_use_money[id] = set;

public native_set_user_kill_door_num(id, set)
	g_kill_door_num[id] = set;

public native_set_has_randomed(set)
{
	if (set)
		g_has_randomed = true;
	else
		g_has_randomed = false;
}
public native_set_shop_has_buy(id, get, set)
	g_shop_has_buy[id][get] = set;

public native_set_respawn_human_num(id, set)
	g_respawn_human_num[id] = set;

public native_set_user_damageup_num(id, set)
	g_damage_up_num[id] = set;

public native_set_user_damage_value(id, set)
	g_get_damage_value[id] = set;

public native_set_god_axe_kill_num(id, set)
	g_god_axe_kill_num[id] = set;

public native_set_plasma_kill_num(id, set)
	g_plasma_kill_num[id] = set;

public native_set_dead_respawn(id, set)
{
	if (set)
		g_dead_respawn[id] = true;
	else
		g_dead_respawn[id] = false;
}
public native_set_respawn_num(id, set)
	g_respawn_num[id] = set;

public native_set_msg_channel(set)
	g_msgChannel = set;

public native_get_user_fire_num(id)
	return g_fire_num[id];

public native_get_user_hit_num(id)
	return g_boss_hit_num[id];

public native_get_user_damage_money(id)
	return g_damage_money[id];

public native_get_user_has_hurt(id)
	return g_has_hurt[id];

public native_get_user_all_damage(id)
	return g_all_damage[id];

public native_get_user_crit_num(id)
	return g_crit_num[id];

public native_get_user_has_fire(id)
	return g_has_fire[id];

public native_get_user_crit(id)
	return g_crit[id];

public native_get_user_damage(id)
	return g_damage[id];

public native_get_user_usemodel(id)
	return g_usemodel[id];

public native_get_user_laser_mode(id)
	return g_sBoss_laser_mode[id];

public native_get_user_n_laser_mode(id)
	return g_sBoss_never_laser_mode[id];

public native_get_user_forever_gun(id, get)
	return g_forever_gun[id][get];

public native_get_user_space_num(id)
	return g_catch_space_num[id];

public native_get_user_shop_num(id)
	return g_shop_buy_num[id];

public native_get_user_m79_kill_num(id)
	return g_m79_kill_num[id];

public native_get_money_by_damage(id)
	return g_get_money_by_damage[id];

public native_get_user_use_money(id)
	return g_use_money[id];

public native_get_user_kill_door_num(id)
	return g_kill_door_num[id];

public native_get_has_randomed()
	return g_has_randomed;

public native_get_shop_has_buy(id, get)
	return g_shop_has_buy[id][get];

public native_get_respawn_human_num(id)
	return g_respawn_human_num[id];

public native_get_user_damageup_num(id)
	return g_damage_up_num[id];

public native_get_user_damage_value(id)
	return g_get_damage_value[id];

public native_get_user_get_damage(id)
	return g_get_damage[id];

public native_get_god_axe_kill_num(id, set)
	return g_god_axe_kill_num[id];

public native_get_plasma_kill_num(id)
	return g_plasma_kill_num[id];

public native_get_respawn_num(id)
	return g_respawn_num[id];

public native_get_msg_channel()
	return g_msgChannel;

public native_get_user_up(id, get)
	return g_up[id][get];

public native_get_user_respawn(id)
	return g_respawn[id];

public native_get_user_level(id)
	return g_level[id];

public native_get_user_hp(id)
	return g_health[id];

public native_get_user_stpoint(id)
	return g_statpoint[id];

public Event_StatusValue(id)
{
	new num = read_data(1)
	if (num <= 0 || num >= MAX_TYPES)
		return;

	new update = status_value[num] = read_data(2)
	switch(num)
	{
		case TYPE_RELATION:
		{
			if (!update && is_user_alive(id))
			{
				message_begin(MSG_ONE_UNRELIABLE, get_user_msgid("StatusText"), _, id)
				write_byte(0)
				write_string("")
				message_end()
			}
		}
		case TYPE_PLAYER:
		{
			if (is_user_alive(id))
			{
				new message[1024]
				switch(status_value[TYPE_RELATION])
				{
					case LOOK_FRIEND: copy(message, charsmax(message), "%class% : [Lv.%lv%]%name%%stat%")
					case LOOK_ENEMY: copy(message, charsmax(message), "%class% : [Lv.%lv%]%name%%stat%")
					case LOOK_HOSTAGE: return;
				}
				EditMessage(message, update, get_user_health(update), get_user_armor(update), id)
				message_begin(MSG_ONE_UNRELIABLE, get_user_msgid("StatusText"), _, id)
				write_byte(0)
				write_string(message)
				message_end()
			}
		}
	}
}
EditMessage(message[1024], player, hp, armor, id)
{
	new temp[35]
	if (is_user_alive(player))
	{
		for (new i;i < MAX_REPLACES;i++)
		{
			switch(i)
			{
				case RE_CLASS:
				{
					if (g_Boss[player])
						copy(temp, charsmax(temp), "魔王")
					else
						copy(temp, charsmax(temp), "人類")
				}
				case RE_LV: num_to_str(g_level[player], temp, charsmax(temp))
				case RE_STAT: 
				{
					copy(temp, charsmax(temp), "")
					if (cs_get_user_team(id) == cs_get_user_team(player))
					{
						new iFormat[256], iHp[256], iArmor[256]
						num_to_str(hp, iHp, charsmax(iHp))
						num_to_str(armor, iArmor, charsmax(iArmor))
						format(iFormat, 255, "  血量 : %s  護甲 : %s", iHp, iArmor)
						copy(temp, charsmax(temp), iFormat)
					}
				}
				case RE_NAME:
				{
					copy(temp, charsmax(temp), "")
					if (!get_cvar_num("amx_show_name"))
						copy(temp, charsmax(temp), "%p2")
					else
					{
						new name[256]
						get_user_name(player, name, 255)
						change_name(name, 255)
						copy(temp, charsmax(temp), name)
					}
				}
				default: copy(temp, charsmax(temp), "")
			}
			replace(message, charsmax(message), Replaces[i], temp)
		}
	}
	trim(message)
}
stock client_printcolor(const id, const input[], any:...)
{
	new count = 1, players[32]
	static msg[1024]
	vformat(msg, 1023, input, 3)
	replace_all(msg, 1023, "^x04", "^4")
	replace_all(msg, 1023, "/y", "^1")
	replace_all(msg, 1023, "/ctr", "^3")
	if (id)
		players[0] = id
	else
		get_players(players, count, "ch")

	for (new i = 0;i < count;i++)
	{
		if (is_user_connected(players[i]))
		{
			message_begin(MSG_ONE_UNRELIABLE, get_user_msgid("SayText"), _, players[i])
			write_byte(players[i])
			write_string(msg)
			message_end()
		}
	}
}
stock drop_weapons(id, dropwhat)
{
	static weapons[32], num, i, weaponid
	num = 0
	get_user_weapons(id, weapons, num)
	for (i = 0; i < num; i++)
	{
		weaponid = weapons[i]
		if ((dropwhat == 1 && ((1<<weaponid) & PRIMARY_WEAPONS_BIT_SUM)) || (dropwhat == 2 && ((1<<weaponid) & SECONDARY_WEAPONS_BIT_SUM)))
		{
			static wname[32], weapon_ent
			get_weaponname(weaponid, wname, charsmax(wname))
			weapon_ent = fm_find_ent_by_owner(-1, wname, id)
			set_pev(weapon_ent, pev_iuser1, cs_get_user_bpammo(id, weaponid))
			engclient_cmd(id, "drop", wname)
			cs_set_user_bpammo(id, weaponid, 0)
		}
	}
}
stock fm_find_ent_by_owner(entity, const classname[], owner)
{
	while ((entity = engfunc(EngFunc_FindEntityByString, entity, "classname", classname)) && pev(entity, pev_owner) != owner)
	{
	}
	return entity;
}
stock stop_fire(id, Float:time)
{
	static weapon, weapon_name[32], weap_ent
	weapon = get_user_weapon(id)
	get_weaponname(weapon, weapon_name, charsmax(weapon_name))
	weap_ent = fm_find_ent_by_owner(-1, weapon_name, id)
	set_weapon_next_pri_attack(weap_ent, time)
	set_weapon_next_sec_attack(weap_ent, time)
	set_weapon_idle_time(weap_ent, time)
}
stock log_kill(killer, victim, weapon[], headshot)
{
	new attacker_frags = get_user_frags(killer)
	set_msg_block(get_user_msgid("DeathMsg"), BLOCK_SET)
	ExecuteHamB(Ham_Killed, victim, killer, 1)
	set_msg_block(get_user_msgid("DeathMsg"), BLOCK_NOT)
	message_begin(MSG_BROADCAST, get_user_msgid("DeathMsg"))
	write_byte(killer)
	write_byte(victim)
	write_byte(headshot)
	write_string(weapon)
	message_end()
	if (get_user_team(killer) == get_user_team(victim))
		attacker_frags -= 1
	else
		attacker_frags += 1

 	return PLUGIN_CONTINUE;
}
stock fm_get_aim_origin(index, Float:origin[3])
{
	new Float:start[3], Float:view_ofs[3], Float:dest[3]
	pev(index, pev_origin, start)
	pev(index, pev_view_ofs, view_ofs)
	xs_vec_add(start, view_ofs, start)
	pev(index, pev_v_angle, dest)
	engfunc(EngFunc_MakeVectors, dest)
	global_get(glb_v_forward, dest)
	xs_vec_mul_scalar(dest, 9999.0, dest)
	xs_vec_add(start, dest, dest)
	engfunc(EngFunc_TraceLine, start, dest, 0, index, 0)
	get_tr2(0, TR_vecEndPos, origin)
	return 1;
}
stock rock_damage(victim, damage, origin[3], bit)
{
	message_begin(MSG_ONE, get_user_msgid("Damage"), {0, 0, 0}, victim)
	write_byte(21)
	write_byte(20)
	write_long(bit)
	write_coord(origin[0])
	write_coord(origin[1])
	write_coord(origin[2])
	message_end()
	set_user_health(victim, get_user_health(victim) - damage)
	if (g_sBoss[victim] && g_Boss[victim] && is_user_alive(victim))
	{
		if (get_user_health(victim) < 1000)
		{
			set_pev(victim, pev_health, 1000.0)
		}
	}
	else if (get_user_health(victim) < damage && !g_sBoss[victim] && g_Boss[victim] && !g_oBoss[victim] && !g_has_randomed && !g_BugBoss[victim])
	{
		set_pev(victim, pev_health, 1000.0)
		g_has_randomed = true
		if (random_num(1, 100) <= 50)
		{
			create_oberon(victim)
		}
	}
}
stock set_speed_to_velocity(id, Float:scalar = 1.0)
{
	static Float:velocity[3]
	pev(id, pev_velocity, velocity)
	xs_vec_mul_scalar(velocity, scalar, velocity)
	set_pev(id, pev_velocity, velocity)
	return 1;
}
stock get_speed_vector_point_entity(const Float:point[3], ent, speed, Float:new_velocity[3])
{
	if (!pev_valid(ent))
		return 0;

	static Float:origin[3], Float:num
	pev(ent, pev_origin, origin)
	new_velocity[0] = origin[0] - point[0]
	new_velocity[1] = origin[1] - point[1]
	new_velocity[2] = origin[2] - point[2]
	num = float(speed) / vector_length(new_velocity)
	new_velocity[0] *= num
	new_velocity[1] *= num
	new_velocity[2] *= num
	if (new_velocity[2] > 1500.0)
		new_velocity[2] = 1500.0
	else if (new_velocity[2] < -200.0)
		new_velocity[2] = -200.0

	return 1;
}
stock SendWeaponAnim(id, iAnim)
{
	set_pev(id, pev_weaponanim, iAnim)
	message_begin(MSG_ONE_UNRELIABLE, SVC_WEAPONANIM, _, id)
	write_byte(iAnim)
	write_byte(pev(id, pev_body))
	message_end()
}
stock screen_shake(id, amplitude = 4, duration = 2, frequency = 10)
{
	message_begin(MSG_ONE_UNRELIABLE, get_user_msgid("ScreenShake"), _, id)
	write_short((1<<12) * amplitude)
	write_short((1<<12) * duration)
	write_short((1<<12) * frequency)
	message_end()
}
stock create_beam_follow(entity, red, green, blue, brightness)
{
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
	write_byte(TE_BEAMFOLLOW)
	write_short(entity)
	write_short(g_trailSpr)
	write_byte(10)
	write_byte(3)
	write_byte(red)
	write_byte(green)
	write_byte(blue)
	write_byte(brightness)
	message_end()
}
stock create_blast_effect(const Float:originF[3])
{
	engfunc(EngFunc_MessageBegin, MSG_PVS, SVC_TEMPENTITY, originF, 0)
	write_byte(TE_BEAMCYLINDER)
	engfunc(EngFunc_WriteCoord, originF[0])
	engfunc(EngFunc_WriteCoord, originF[1])
	engfunc(EngFunc_WriteCoord, originF[2])
	engfunc(EngFunc_WriteCoord, originF[0])
	engfunc(EngFunc_WriteCoord, originF[1])
	engfunc(EngFunc_WriteCoord, originF[2] + 200)
	write_short(g_blastSpr)
	write_byte(0)
	write_byte(0)
	write_byte(5)
	write_byte(10)
	write_byte(0)
	write_byte(255)
	write_byte(255)
	write_byte(192)
	write_byte(128)
	write_byte(0)
	message_end()
}
stock create_Smoke(const Float:position[3], sprite_index, life, framerate)
{
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
	write_byte(TE_SMOKE)
	engfunc(EngFunc_WriteCoord, position[0])
	engfunc(EngFunc_WriteCoord, position[1])
	engfunc(EngFunc_WriteCoord, position[2])
	write_short(sprite_index)
	write_byte(life)
	write_byte(framerate)
	message_end()
}
stock get_spherical_coord(const Float:ent_origin[3], Float:redius, Float:level_angle, Float:vertical_angle, Float:origin[3])
{
	new Float:length
	length  = redius * floatcos(vertical_angle, degrees)
	origin[0] = ent_origin[0] + length * floatcos(level_angle, degrees)
	origin[1] = ent_origin[1] + length * floatsin(level_angle, degrees)
	origin[2] = ent_origin[2] + redius * floatsin(vertical_angle, degrees)
}
stock set_weapon_next_pri_attack(entity, Float:time)
{
	set_pdata_float(entity, 46, time, 4)
}
stock set_weapon_next_sec_attack(entity, Float:time)
{
	set_pdata_float(entity, 47, time, 4)
}
stock set_weapon_idle_time(entity, Float:time)
{
	set_pdata_float(entity, 48, time, 4)
}
stock get_string_index(const string_array[][], string_num, const dest_string[])
{
	new i
	for (i = 0;i < string_num;i++)
	{
		if (equal(string_array[i], dest_string))
			return i;
	}
	return -1;
}
stock fm_cs_get_current_weapon_ent(id)
{
	return get_pdata_cbase(id, 373, 5);
}
stock fm_cs_get_weapon_ent_owner(ent)
{
	return get_pdata_cbase(ent, 41, 4);
}
stock fm_give_item(id, const item[])
{
	static ent
	ent = engfunc(EngFunc_CreateNamedEntity, engfunc(EngFunc_AllocString, item))
	if (!pev_valid(ent))
		return;

	static Float:originF[3], save
	pev(id, pev_origin, originF)
	set_pev(ent, pev_origin, originF)
	set_pev(ent, pev_spawnflags, pev(ent, pev_spawnflags) | SF_NORESPAWN)
	dllfunc(DLLFunc_Spawn, ent)
	save = pev(ent, pev_solid)
	dllfunc(DLLFunc_Touch, ent, id)
	if (pev(ent, pev_solid) != save)
		return;

	engfunc(EngFunc_RemoveEntity, ent)
}
stock bool:is_in_view(index, target, ignoremonsters = 1)
{
	if (index == target)
		return false;

	new Float:angles[3], Float:origin[3], Float:point[3], Float:diff[3], Float:norm[3], Float:view_ofs[3], Float:fraction, Float:dot, Float:fov
	pev(index, pev_angles, angles)
	engfunc(EngFunc_MakeVectors, angles)
	global_get(glb_v_forward, angles)
	angles[2] = 0.0
	pev(index, pev_origin, origin)
	pev(target, pev_origin, point)
	xs_vec_sub(point, origin, diff)
	diff[2] = 0.0
	xs_vec_normalize(diff, norm)
	pev(index, pev_view_ofs, view_ofs)
	xs_vec_add(origin, view_ofs, origin)
	engfunc(EngFunc_TraceLine, origin, point, ignoremonsters, index, 0)
	dot = xs_vec_dot(norm, angles)
	pev(index, pev_fov, fov)
	get_tr2(0, TR_flFraction, fraction)
	if (dot >= floatcos(fov * M_PI / 360) && fraction == 1.0)
		return true;

	return false;
}
stock drop_current_weapon(id)
{
	static weapon_id, clip, ammo
	weapon_id = get_user_weapon(id, clip, ammo)
	if (((1<<weapon_id) & PRIMARY_WEAPONS_BIT_SUM) || ((1<<weapon_id) & SECONDARY_WEAPONS_BIT_SUM))
	{
		static weapon_name[32]
		get_weaponname(weapon_id, weapon_name, sizeof weapon_name - 1)
		engclient_cmd(id, "drop", weapon_name)
	}
}
stock create_explosion_effect(const Float:originF[3])
{
	engfunc(EngFunc_MessageBegin, MSG_PVS, SVC_TEMPENTITY, originF, 0)
	write_byte(TE_EXPLOSION)
	engfunc(EngFunc_WriteCoord, originF[0])
	engfunc(EngFunc_WriteCoord, originF[1])
	engfunc(EngFunc_WriteCoord, originF[2])
	write_short(g_explodeSpr)
	write_byte(20)
	write_byte(15)
	write_byte(0)
	message_end()
}
stock bool:is_user_in_target_back(id, target, angles_range = 120, distance_range = 200)
{
	new Float:origin1[3], Float:origin2[3], Float:angle, Float:angles1[3], Float:vector[3], Float:angles2[3]
	pev(id, pev_origin, origin1)
	pev(target, pev_origin, origin2)
	pev(target, pev_angles, angles1)
	vector[0] = origin1[0] - origin2[0]
	vector[1] = origin1[1] - origin2[1]
	vector[2] = origin1[2] - origin2[2]
	vector_to_angle(vector, angles2)
	if (angles2[1] >= angles1[1])
		angle = angles2[1] - angles1[1]
	else
		angle = angles1[1] - angles2[1]

	while (angles_range > 360)
		angles_range -= 360

	new Float:temp1 = 180.0 - (float(angles_range) / 2.0)
	new Float:temp2 = 360.0 - temp1 
	if ((angle <= temp1) || (angle >= temp2))
		return false;

	new distance = floatround(get_distance_f(origin1, origin2))
	if (distance > distance_range)
		return false;

	return true;
}
stock bool:IsValidTarget(iTarget)
{
	if (!iTarget || !(1 <= iTarget <= get_maxplayers()) || !is_user_alive(iTarget))
		return false;

	return true;
}
stock get_anim(id)
	return pev(id, pev_sequence);

stock play_anim(index, sequence, Float:framerate = 1.0)
{
	entity_set_float(index, EV_FL_animtime, get_gametime())
	entity_set_float(index, EV_FL_frame, 0.0)
	entity_set_float(index, EV_FL_framerate,  framerate)
	entity_set_int(index, EV_INT_sequence, sequence)
}
stock create_camera(id)
{
	new Float:v_angle[3], Float:angles[3], Float:mins[3], Float:maxs[3];
	entity_get_vector(id, EV_VEC_origin, origin[id])
	entity_get_vector(id, EV_VEC_v_angle, v_angle)
	entity_get_vector(id, EV_VEC_angles, angles)
	new ent = create_entity("info_target")
	entity_set_string(ent, EV_SZ_classname, "JJG75_Camera")
	entity_set_int(ent, EV_INT_solid, 0)
	entity_set_int(ent, EV_INT_movetype, MOVETYPE_NOCLIP)
	entity_set_edict(ent, EV_ENT_owner, id)
	entity_set_model(ent, "models/camera.mdl")
	mins[0] = -1.0
	mins[1] = -1.0
	mins[2] = -1.0
	maxs[0] = 1.0
	maxs[1] = 1.0
	maxs[2] = 1.0
	entity_set_size(ent, mins, maxs)
	entity_set_origin(ent, origin[id])
	entity_set_vector(ent, EV_VEC_v_angle, v_angle)
	entity_set_vector(ent, EV_VEC_angles, angles)
	Util_SetRendering(ent, kRenderFxGlowShell, {0.0, 0.0, 0.0}, kRenderTransAlpha, 0.0)
	camera[id] = ent
	return 1;
}
stock view_camera(id)
{
	if (is_valid_ent(camera[id]))
	{
		attach_view(id, camera[id])
		return 1;
	}
	return 0;
}
Util_SetRendering(iEntity, kRenderFx = kRenderFxNone, {Float,_}: fVecColor[3] = {0.0, 0.0, 0.0 }, kRender = kRenderNormal, Float:flAmount = 0.0) 
{
	set_pev(iEntity, pev_renderfx, kRenderFx)
	set_pev(iEntity, pev_rendercolor, fVecColor)
	set_pev(iEntity, pev_rendermode, kRender)
	set_pev(iEntity, pev_renderamt, flAmount)
}
screen_effects(id)
{
	message_begin(MSG_ONE_UNRELIABLE, get_user_msgid("ScreenFade"), _, id)
	write_short((1<<12) * 1)
	write_short((1<<12) * 1)
	write_short(0x0000)
	write_byte(200)
	write_byte(0)
	write_byte(0)
	write_byte(125)
	message_end()
	message_begin(MSG_ONE_UNRELIABLE, get_user_msgid("ScreenShake"), _, id)
	write_short((1<<12) * 5)
	write_short((1<<12) * 1)
	write_short((1<<12) * 5)
	message_end()
}
rocks_explode(origin[3])
{
	new gibtime = 20
	for (new i = 0;i < 25;i++)
	{
		message_begin(MSG_BROADCAST,SVC_TEMPENTITY)
		write_byte(TE_MODEL)
		write_coord(origin[0])
		write_coord(origin[1])
		write_coord(origin[2])
		write_coord(random_num(-500, 500))
		write_coord(random_num(-500, 500))
		write_coord(random_num(100, 200))
		write_angle(random_num(0,360))
		write_short(g_rockSpr)
		write_byte(0)
		write_byte(gibtime)
		message_end()
	}
}
load_customization_from_files()
{
	new path[64]
	get_configsdir(path, charsmax(path))
	format(path, charsmax(path), "%s/BossSetting.ini", path)
	if (!file_exists(path))
		return;

	new linedata[1024], key[64], value[960], section
	new file = fopen(path, "rt")
	while (file && !feof(file))
	{
		fgets(file, linedata, charsmax(linedata))
		replace(linedata, charsmax(linedata), "^n", "")
		if (!linedata[0] || linedata[0] == ';')
			continue;

		if (linedata[0] == '[')
		{
			section++
			continue;
		}
		strtok(linedata, key, charsmax(key), value, charsmax(value), '=')
		trim(key)
		trim(value)
		switch (section)
		{
			case 1:
			{
				if (equal(key, "V_KNIFE HUMAN"))
					copy(model_vknife_human, charsmax(model_vknife_human), value)
				else if (equal(key, "P_KNIFE HUMAN"))
					copy(model_pknife_human, charsmax(model_pknife_human), value)
				else if (equal(key, "V_KNIFE BOSS"))
					copy(model_vknife_boss, charsmax(model_vknife_boss), value)
			}
		}
	}
	if (file)
		fclose(file)
}
stock screen_fade(id, Float:time, red, green, blue, alpha)
{
	message_begin(MSG_ONE_UNRELIABLE, get_user_msgid("ScreenFade"), _, id)
	write_short((1<<12) * 1)
	write_short(floatround((1<<12) * time))
	write_short(0x0000)
	write_byte(red)
	write_byte(green)
	write_byte(blue)
	write_byte(alpha)
	message_end()
}
stock fm_set_rendering(entity, fx = kRenderFxNone, r = 255, g = 255, b = 255, render = kRenderNormal, amount = 16)
{
	new Float:RenderColor[3]
	RenderColor[0] = float(r)
	RenderColor[1] = float(g)
	RenderColor[2] = float(b)
	set_pev(entity, pev_renderfx, fx)
	set_pev(entity, pev_rendercolor, RenderColor)
	set_pev(entity, pev_rendermode, render)
	set_pev(entity, pev_renderamt, float(amount))
}